"use strict";function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(t)}function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(t)}
/*! choices.js v9.0.1 | Â© 2019 Josh Johnson | https://github.com/jshjohnson/Choices#readme */function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(t)}function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(t)}function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(t)}function t(e,t,i){new Promise((function(i,n){var r=document.querySelector("#js-modal-img"),a=document.querySelector("#js-modal-img-content"),s=t.split(/\s*-\s*/);s=s[2],a.innerHTML='\n            <figure class="modal__figure"> \n                <picture class="modal__picture">\n                    <source type="image/webp" srcset="'.concat(e[s].webp,'">\n                    <img src="').concat(e[s].jpg,'" alt="').concat(e[s].alt,'" class="modal__img">\n                </picture>\n            \n                <figcaption class="modal__figcaption">\n                    <div class="modal__figcaption-container">\n                        <h2 class="modal__title">\n                            ').concat(e[s].title,'\n                        </h2>\n    \n                        <span class="modal__pictureName">\n                            ').concat(e[s].alt,'\n                        </span>\n    \n                        <time class="modal__time">\n                            ').concat(e[s].yearsOfLife,'\n                        </time>\n    \n                        <p class="modal__discription">\n                            ').concat(e[s].disc,"\n                        </p>\n                    </div>\n                </figcaption>\n            </figure>\n        "),r.classList.remove("modal_is-close"),r.classList.add("modal_is-open"),i(r)})).then((function(e){e.querySelector("#js-modal-btn"),document.querySelector(".main")}))}function i(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}!function(t,i){"object"==("undefined"==typeof exports?"undefined":e(exports))&&"undefined"!=typeof module?module.exports=i():"function"==typeof define&&define.amd?define(i):(t="undefined"!=typeof globalThis?globalThis:t||self).Swiper=i()}(void 0,(function(){function t(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function i(){return(i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var i=arguments[t];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(e[n]=i[n])}return e}).apply(this,arguments)}function n(t){return null!==t&&"object"==e(t)&&"constructor"in t&&t.constructor===Object}function r(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((function(i){void 0===e[i]?e[i]=t[i]:n(t[i])&&n(e[i])&&Object.keys(t[i]).length>0&&r(e[i],t[i])}))}var a={body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},createElementNS:function(){return{}},importNode:function(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function s(){var e="undefined"!=typeof document?document:{};return r(e,a),e}var o={document:a,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState:function(){},pushState:function(){},go:function(){},back:function(){}},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){},matchMedia:function(){return{}},requestAnimationFrame:function(e){return"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0)},cancelAnimationFrame:function(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function l(){var e="undefined"!=typeof window?window:{};return r(e,o),e}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function h(e,t,i){return(h=u()?Reflect.construct:function(e,t,i){var n=[null];n.push.apply(n,t);var r=new(Function.bind.apply(e,n));return i&&d(r,i.prototype),r}).apply(null,arguments)}function p(e){var t="function"==typeof Map?new Map:void 0;return(p=function(e){if(null===e||(i=e,-1===Function.toString.call(i).indexOf("[native code]")))return e;var i;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,n)}function n(){return h(e,arguments,c(this).constructor)}return n.prototype=Object.create(e.prototype,{constructor:{value:n,enumerable:!1,writable:!0,configurable:!0}}),d(n,e)})(e)}var f=function(e){var t,i;function n(t){var i,n,r;return n=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(i=e.call.apply(e,[this].concat(t))||this),r=n.__proto__,Object.defineProperty(n,"__proto__",{get:function(){return r},set:function(e){r.__proto__=e}}),i}return i=e,(t=n).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i,n}(p(Array));function m(e){void 0===e&&(e=[]);var t=[];return e.forEach((function(e){Array.isArray(e)?t.push.apply(t,m(e)):t.push(e)})),t}function v(e,t){return Array.prototype.filter.call(e,t)}function g(e,t){var i=l(),n=s(),r=[];if(!t&&e instanceof f)return e;if(!e)return new f(r);if("string"==typeof e){var a=e.trim();if(a.indexOf("<")>=0&&a.indexOf(">")>=0){var o="div";0===a.indexOf("<li")&&(o="ul"),0===a.indexOf("<tr")&&(o="tbody"),0!==a.indexOf("<td")&&0!==a.indexOf("<th")||(o="tr"),0===a.indexOf("<tbody")&&(o="table"),0===a.indexOf("<option")&&(o="select");var c=n.createElement(o);c.innerHTML=a;for(var d=0;d<c.childNodes.length;d+=1)r.push(c.childNodes[d])}else r=function(e,t){if("string"!=typeof e)return[e];for(var i=[],n=t.querySelectorAll(e),r=0;r<n.length;r+=1)i.push(n[r]);return i}(e.trim(),t||n)}else if(e.nodeType||e===i||e===n)r.push(e);else if(Array.isArray(e)){if(e instanceof f)return e;r=e}return new f(function(e){for(var t=[],i=0;i<e.length;i+=1)-1===t.indexOf(e[i])&&t.push(e[i]);return t}(r))}g.fn=f.prototype;var b,y,w,E={addClass:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var n=m(t.map((function(e){return e.split(" ")})));return this.forEach((function(e){var t;(t=e.classList).add.apply(t,n)})),this},removeClass:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var n=m(t.map((function(e){return e.split(" ")})));return this.forEach((function(e){var t;(t=e.classList).remove.apply(t,n)})),this},hasClass:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var n=m(t.map((function(e){return e.split(" ")})));return v(this,(function(e){return n.filter((function(t){return e.classList.contains(t)})).length>0})).length>0},toggleClass:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var n=m(t.map((function(e){return e.split(" ")})));this.forEach((function(e){n.forEach((function(t){e.classList.toggle(t)}))}))},attr:function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var i=0;i<this.length;i+=1)if(2===arguments.length)this[i].setAttribute(e,t);else for(var n in e)this[i][n]=e[n],this[i].setAttribute(n,e[n]);return this},removeAttr:function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},transform:function(e){for(var t=0;t<this.length;t+=1)this[t].style.transform=e;return this},transition:function(e){for(var t=0;t<this.length;t+=1)this[t].style.transitionDuration="string"!=typeof e?e+"ms":e;return this},on:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var n=t[0],r=t[1],a=t[2],s=t[3];function o(e){var t=e.target;if(t){var i=e.target.dom7EventData||[];if(i.indexOf(e)<0&&i.unshift(e),g(t).is(r))a.apply(t,i);else for(var n=g(t).parents(),s=0;s<n.length;s+=1)g(n[s]).is(r)&&a.apply(n[s],i)}}function l(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),a.apply(this,t)}"function"==typeof t[1]&&(n=t[0],a=t[1],s=t[2],r=void 0),s||(s=!1);for(var c,d=n.split(" "),u=0;u<this.length;u+=1){var h=this[u];if(r)for(c=0;c<d.length;c+=1){var p=d[c];h.dom7LiveListeners||(h.dom7LiveListeners={}),h.dom7LiveListeners[p]||(h.dom7LiveListeners[p]=[]),h.dom7LiveListeners[p].push({listener:a,proxyListener:o}),h.addEventListener(p,o,s)}else for(c=0;c<d.length;c+=1){var f=d[c];h.dom7Listeners||(h.dom7Listeners={}),h.dom7Listeners[f]||(h.dom7Listeners[f]=[]),h.dom7Listeners[f].push({listener:a,proxyListener:l}),h.addEventListener(f,l,s)}}return this},off:function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var n=t[0],r=t[1],a=t[2],s=t[3];"function"==typeof t[1]&&(n=t[0],a=t[1],s=t[2],r=void 0),s||(s=!1);for(var o=n.split(" "),l=0;l<o.length;l+=1)for(var c=o[l],d=0;d<this.length;d+=1){var u=this[d],h=void 0;if(!r&&u.dom7Listeners?h=u.dom7Listeners[c]:r&&u.dom7LiveListeners&&(h=u.dom7LiveListeners[c]),h&&h.length)for(var p=h.length-1;p>=0;p-=1){var f=h[p];a&&f.listener===a||a&&f.listener&&f.listener.dom7proxy&&f.listener.dom7proxy===a?(u.removeEventListener(c,f.proxyListener,s),h.splice(p,1)):a||(u.removeEventListener(c,f.proxyListener,s),h.splice(p,1))}}return this},trigger:function(){for(var e=l(),t=arguments.length,i=new Array(t),n=0;n<t;n++)i[n]=arguments[n];for(var r=i[0].split(" "),a=i[1],s=0;s<r.length;s+=1)for(var o=r[s],c=0;c<this.length;c+=1){var d=this[c];if(e.CustomEvent){var u=new e.CustomEvent(o,{detail:a,bubbles:!0,cancelable:!0});d.dom7EventData=i.filter((function(e,t){return t>0})),d.dispatchEvent(u),d.dom7EventData=[],delete d.dom7EventData}}return this},transitionEnd:function(e){var t=this;return e&&t.on("transitionend",(function i(n){n.target===this&&(e.call(this,n),t.off("transitionend",i))})),this},outerWidth:function(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue("margin-right"))+parseFloat(t.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue("margin-top"))+parseFloat(t.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},styles:function(){var e=l();return this[0]?e.getComputedStyle(this[0],null):{}},offset:function(){if(this.length>0){var e=l(),t=s(),i=this[0],n=i.getBoundingClientRect(),r=t.body,a=i.clientTop||r.clientTop||0,o=i.clientLeft||r.clientLeft||0,c=i===e?e.scrollY:i.scrollTop,d=i===e?e.scrollX:i.scrollLeft;return{top:n.top+c-a,left:n.left+d-o}}return null},css:function(e,t){var i,n=l();if(1===arguments.length){if("string"!=typeof e){for(i=0;i<this.length;i+=1)for(var r in e)this[i].style[r]=e[r];return this}if(this[0])return n.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(i=0;i<this.length;i+=1)this[i].style[e]=t;return this}return this},each:function(e){return e?(this.forEach((function(t,i){e.apply(t,[t,i])})),this):this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:null;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){var t,i,n=l(),r=s(),a=this[0];if(!a||void 0===e)return!1;if("string"==typeof e){if(a.matches)return a.matches(e);if(a.webkitMatchesSelector)return a.webkitMatchesSelector(e);if(a.msMatchesSelector)return a.msMatchesSelector(e);for(t=g(e),i=0;i<t.length;i+=1)if(t[i]===a)return!0;return!1}if(e===r)return a===r;if(e===n)return a===n;if(e.nodeType||e instanceof f){for(t=e.nodeType?[e]:e,i=0;i<t.length;i+=1)if(t[i]===a)return!0;return!1}return!1},index:function(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;var t=this.length;if(e>t-1)return g([]);if(e<0){var i=t+e;return g(i<0?[]:[this[i]])}return g([this[e]])},append:function(){for(var e,t=s(),i=0;i<arguments.length;i+=1){e=i<0||arguments.length<=i?void 0:arguments[i];for(var n=0;n<this.length;n+=1)if("string"==typeof e){var r=t.createElement("div");for(r.innerHTML=e;r.firstChild;)this[n].appendChild(r.firstChild)}else if(e instanceof f)for(var a=0;a<e.length;a+=1)this[n].appendChild(e[a]);else this[n].appendChild(e)}return this},prepend:function(e){var t,i,n=s();for(t=0;t<this.length;t+=1)if("string"==typeof e){var r=n.createElement("div");for(r.innerHTML=e,i=r.childNodes.length-1;i>=0;i-=1)this[t].insertBefore(r.childNodes[i],this[t].childNodes[0])}else if(e instanceof f)for(i=0;i<e.length;i+=1)this[t].insertBefore(e[i],this[t].childNodes[0]);else this[t].insertBefore(e,this[t].childNodes[0]);return this},next:function(e){return this.length>0?e?this[0].nextElementSibling&&g(this[0].nextElementSibling).is(e)?g([this[0].nextElementSibling]):g([]):this[0].nextElementSibling?g([this[0].nextElementSibling]):g([]):g([])},nextAll:function(e){var t=[],i=this[0];if(!i)return g([]);for(;i.nextElementSibling;){var n=i.nextElementSibling;e?g(n).is(e)&&t.push(n):t.push(n),i=n}return g(t)},prev:function(e){if(this.length>0){var t=this[0];return e?t.previousElementSibling&&g(t.previousElementSibling).is(e)?g([t.previousElementSibling]):g([]):t.previousElementSibling?g([t.previousElementSibling]):g([])}return g([])},prevAll:function(e){var t=[],i=this[0];if(!i)return g([]);for(;i.previousElementSibling;){var n=i.previousElementSibling;e?g(n).is(e)&&t.push(n):t.push(n),i=n}return g(t)},parent:function(e){for(var t=[],i=0;i<this.length;i+=1)null!==this[i].parentNode&&(e?g(this[i].parentNode).is(e)&&t.push(this[i].parentNode):t.push(this[i].parentNode));return g(t)},parents:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var n=this[i].parentNode;n;)e?g(n).is(e)&&t.push(n):t.push(n),n=n.parentNode;return g(t)},closest:function(e){var t=this;return void 0===e?g([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var n=this[i].querySelectorAll(e),r=0;r<n.length;r+=1)t.push(n[r]);return g(t)},children:function(e){for(var t=[],i=0;i<this.length;i+=1)for(var n=this[i].children,r=0;r<n.length;r+=1)e&&!g(n[r]).is(e)||t.push(n[r]);return g(t)},filter:function(e){return g(v(this,e))},remove:function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this}};function _(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function x(){return Date.now()}function S(e,t){void 0===t&&(t="x");var i,n,r,a=l(),s=a.getComputedStyle(e,null);return a.WebKitCSSMatrix?((n=s.transform||s.webkitTransform).split(",").length>6&&(n=n.split(", ").map((function(e){return e.replace(",",".")})).join(", ")),r=new a.WebKitCSSMatrix("none"===n?"":n)):i=(r=s.MozTransform||s.OTransform||s.MsTransform||s.msTransform||s.transform||s.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(n=a.WebKitCSSMatrix?r.m41:16===i.length?parseFloat(i[12]):parseFloat(i[4])),"y"===t&&(n=a.WebKitCSSMatrix?r.m42:16===i.length?parseFloat(i[13]):parseFloat(i[5])),n||0}function T(t){return"object"==e(t)&&null!==t&&t.constructor&&t.constructor===Object}function C(){for(var e=Object(arguments.length<=0?void 0:arguments[0]),t=1;t<arguments.length;t+=1){var i=t<0||arguments.length<=t?void 0:arguments[t];if(null!=i)for(var n=Object.keys(Object(i)),r=0,a=n.length;r<a;r+=1){var s=n[r],o=Object.getOwnPropertyDescriptor(i,s);void 0!==o&&o.enumerable&&(T(e[s])&&T(i[s])?C(e[s],i[s]):!T(e[s])&&T(i[s])?(e[s]={},C(e[s],i[s])):e[s]=i[s])}}return e}function L(e,t){Object.keys(t).forEach((function(i){T(t[i])&&Object.keys(t[i]).forEach((function(n){"function"==typeof t[i][n]&&(t[i][n]=t[i][n].bind(e))})),e[i]=t[i]}))}function k(){return b||(b=function(){var e=l(),t=s();return{touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch),pointerEvents:!!e.PointerEvent&&"maxTouchPoints"in e.navigator&&e.navigator.maxTouchPoints>=0,observer:"MutationObserver"in e||"WebkitMutationObserver"in e,passiveListener:function(){var t=!1;try{var i=Object.defineProperty({},"passive",{get:function(){t=!0}});e.addEventListener("testPassiveListener",null,i)}catch(e){}return t}(),gestures:"ongesturestart"in e}}()),b}function O(e){return void 0===e&&(e={}),y||(y=function(e){var t=(void 0===e?{}:e).userAgent,i=k(),n=l(),r=n.navigator.platform,a=t||n.navigator.userAgent,s={ios:!1,android:!1},o=n.screen.width,c=n.screen.height,d=a.match(/(Android);?[\s\/]+([\d.]+)?/),u=a.match(/(iPad).*OS\s([\d_]+)/),h=a.match(/(iPod)(.*OS\s([\d_]+))?/),p=!u&&a.match(/(iPhone\sOS|iOS)\s([\d_]+)/),f="Win32"===r,m="MacIntel"===r;return!u&&m&&i.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(o+"x"+c)>=0&&((u=a.match(/(Version)\/([\d.]+)/))||(u=[0,1,"13_0_0"]),m=!1),d&&!f&&(s.os="android",s.android=!0),(u||p||h)&&(s.os="ios",s.ios=!0),s}(e)),y}function M(){return w||(w=function(){var e,t=l();return{isEdge:!!t.navigator.userAgent.match(/Edge/g),isSafari:(e=t.navigator.userAgent.toLowerCase(),e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0),isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent)}}()),w}Object.keys(E).forEach((function(e){g.fn[e]=E[e]}));var A={name:"resize",create:function(){var e=this;C(e,{resize:{resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init:function(e){var t=l();t.addEventListener("resize",e.resize.resizeHandler),t.addEventListener("orientationchange",e.resize.orientationChangeHandler)},destroy:function(e){var t=l();t.removeEventListener("resize",e.resize.resizeHandler),t.removeEventListener("orientationchange",e.resize.orientationChangeHandler)}}},I={attach:function(e,t){void 0===t&&(t={});var i=l(),n=this,r=new(i.MutationObserver||i.WebkitMutationObserver)((function(e){if(1!==e.length){var t=function(){n.emit("observerUpdate",e[0])};i.requestAnimationFrame?i.requestAnimationFrame(t):i.setTimeout(t,0)}else n.emit("observerUpdate",e[0])}));r.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),n.observer.observers.push(r)},init:function(){var e=this;if(e.support.observer&&e.params.observer){if(e.params.observeParents)for(var t=e.$el.parents(),i=0;i<t.length;i+=1)e.observer.attach(t[i]);e.observer.attach(e.$el[0],{childList:e.params.observeSlideChildren}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach((function(e){e.disconnect()})),this.observer.observers=[]}},P={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create:function(){L(this,{observer:i({},I,{observers:[]})})},on:{init:function(e){e.observer.init()},destroy:function(e){e.observer.destroy()}}};function D(e){var t=this,i=s(),n=l(),r=t.touchEventsData,a=t.params,o=t.touches;if(!t.animating||!a.preventInteractionOnTransition){var c=e;c.originalEvent&&(c=c.originalEvent);var d=g(c.target);if(("wrapper"!==a.touchEventsTarget||d.closest(t.wrapperEl).length)&&(r.isTouchEvent="touchstart"===c.type,(r.isTouchEvent||!("which"in c)||3!==c.which)&&!(!r.isTouchEvent&&"button"in c&&c.button>0||r.isTouched&&r.isMoved)))if(!!a.noSwipingClass&&""!==a.noSwipingClass&&c.target&&c.target.shadowRoot&&e.path&&e.path[0]&&(d=g(e.path[0])),a.noSwiping&&d.closest(a.noSwipingSelector?a.noSwipingSelector:"."+a.noSwipingClass)[0])t.allowClick=!0;else if(!a.swipeHandler||d.closest(a.swipeHandler)[0]){o.currentX="touchstart"===c.type?c.targetTouches[0].pageX:c.pageX,o.currentY="touchstart"===c.type?c.targetTouches[0].pageY:c.pageY;var u=o.currentX,h=o.currentY,p=a.edgeSwipeDetection||a.iOSEdgeSwipeDetection,f=a.edgeSwipeThreshold||a.iOSEdgeSwipeThreshold;if(!p||!(u<=f||u>=n.innerWidth-f)){if(C(r,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),o.startX=u,o.startY=h,r.touchStartTime=x(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,a.threshold>0&&(r.allowThresholdMove=!1),"touchstart"!==c.type){var m=!0;d.is(r.formElements)&&(m=!1),i.activeElement&&g(i.activeElement).is(r.formElements)&&i.activeElement!==d[0]&&i.activeElement.blur();var v=m&&t.allowTouchMove&&a.touchStartPreventDefault;!a.touchStartForcePreventDefault&&!v||d[0].isContentEditable||c.preventDefault()}t.emit("touchStart",c)}}}}function z(e){var t=s(),i=this,n=i.touchEventsData,r=i.params,a=i.touches,o=i.rtlTranslate,l=e;if(l.originalEvent&&(l=l.originalEvent),n.isTouched){if(!n.isTouchEvent||"touchmove"===l.type){var c="touchmove"===l.type&&l.targetTouches&&(l.targetTouches[0]||l.changedTouches[0]),d="touchmove"===l.type?c.pageX:l.pageX,u="touchmove"===l.type?c.pageY:l.pageY;if(l.preventedByNestedSwiper)return a.startX=d,void(a.startY=u);if(!i.allowTouchMove)return i.allowClick=!1,void(n.isTouched&&(C(a,{startX:d,startY:u,currentX:d,currentY:u}),n.touchStartTime=x()));if(n.isTouchEvent&&r.touchReleaseOnEdges&&!r.loop)if(i.isVertical()){if(u<a.startY&&i.translate<=i.maxTranslate()||u>a.startY&&i.translate>=i.minTranslate())return n.isTouched=!1,void(n.isMoved=!1)}else if(d<a.startX&&i.translate<=i.maxTranslate()||d>a.startX&&i.translate>=i.minTranslate())return;if(n.isTouchEvent&&t.activeElement&&l.target===t.activeElement&&g(l.target).is(n.formElements))return n.isMoved=!0,void(i.allowClick=!1);if(n.allowTouchCallbacks&&i.emit("touchMove",l),!(l.targetTouches&&l.targetTouches.length>1)){a.currentX=d,a.currentY=u;var h,p=a.currentX-a.startX,f=a.currentY-a.startY;if(!(i.params.threshold&&Math.sqrt(Math.pow(p,2)+Math.pow(f,2))<i.params.threshold))if(void 0===n.isScrolling&&(i.isHorizontal()&&a.currentY===a.startY||i.isVertical()&&a.currentX===a.startX?n.isScrolling=!1:p*p+f*f>=25&&(h=180*Math.atan2(Math.abs(f),Math.abs(p))/Math.PI,n.isScrolling=i.isHorizontal()?h>r.touchAngle:90-h>r.touchAngle)),n.isScrolling&&i.emit("touchMoveOpposite",l),void 0===n.startMoving&&(a.currentX===a.startX&&a.currentY===a.startY||(n.startMoving=!0)),n.isScrolling)n.isTouched=!1;else if(n.startMoving){i.allowClick=!1,!r.cssMode&&l.cancelable&&l.preventDefault(),r.touchMoveStopPropagation&&!r.nested&&l.stopPropagation(),n.isMoved||(r.loop&&i.loopFix(),n.startTranslate=i.getTranslate(),i.setTransition(0),i.animating&&i.$wrapperEl.trigger("webkitTransitionEnd transitionend"),n.allowMomentumBounce=!1,!r.grabCursor||!0!==i.allowSlideNext&&!0!==i.allowSlidePrev||i.setGrabCursor(!0),i.emit("sliderFirstMove",l)),i.emit("sliderMove",l),n.isMoved=!0;var m=i.isHorizontal()?p:f;a.diff=m,m*=r.touchRatio,o&&(m=-m),i.swipeDirection=m>0?"prev":"next",n.currentTranslate=m+n.startTranslate;var v=!0,b=r.resistanceRatio;if(r.touchReleaseOnEdges&&(b=0),m>0&&n.currentTranslate>i.minTranslate()?(v=!1,r.resistance&&(n.currentTranslate=i.minTranslate()-1+Math.pow(-i.minTranslate()+n.startTranslate+m,b))):m<0&&n.currentTranslate<i.maxTranslate()&&(v=!1,r.resistance&&(n.currentTranslate=i.maxTranslate()+1-Math.pow(i.maxTranslate()-n.startTranslate-m,b))),v&&(l.preventedByNestedSwiper=!0),!i.allowSlideNext&&"next"===i.swipeDirection&&n.currentTranslate<n.startTranslate&&(n.currentTranslate=n.startTranslate),!i.allowSlidePrev&&"prev"===i.swipeDirection&&n.currentTranslate>n.startTranslate&&(n.currentTranslate=n.startTranslate),r.threshold>0){if(!(Math.abs(m)>r.threshold||n.allowThresholdMove))return void(n.currentTranslate=n.startTranslate);if(!n.allowThresholdMove)return n.allowThresholdMove=!0,a.startX=a.currentX,a.startY=a.currentY,n.currentTranslate=n.startTranslate,void(a.diff=i.isHorizontal()?a.currentX-a.startX:a.currentY-a.startY)}r.followFinger&&!r.cssMode&&((r.freeMode||r.watchSlidesProgress||r.watchSlidesVisibility)&&(i.updateActiveIndex(),i.updateSlidesClasses()),r.freeMode&&(0===n.velocities.length&&n.velocities.push({position:a[i.isHorizontal()?"startX":"startY"],time:n.touchStartTime}),n.velocities.push({position:a[i.isHorizontal()?"currentX":"currentY"],time:x()})),i.updateProgress(n.currentTranslate),i.setTranslate(n.currentTranslate))}}}}else n.startMoving&&n.isScrolling&&i.emit("touchMoveOpposite",l)}function j(e){var t=this,i=t.touchEventsData,n=t.params,r=t.touches,a=t.rtlTranslate,s=t.$wrapperEl,o=t.slidesGrid,l=t.snapGrid,c=e;if(c.originalEvent&&(c=c.originalEvent),i.allowTouchCallbacks&&t.emit("touchEnd",c),i.allowTouchCallbacks=!1,!i.isTouched)return i.isMoved&&n.grabCursor&&t.setGrabCursor(!1),i.isMoved=!1,void(i.startMoving=!1);n.grabCursor&&i.isMoved&&i.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var d,u=x(),h=u-i.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(c),t.emit("tap click",c),h<300&&u-i.lastClickTime<300&&t.emit("doubleTap doubleClick",c)),i.lastClickTime=x(),_((function(){t.destroyed||(t.allowClick=!0)})),!i.isTouched||!i.isMoved||!t.swipeDirection||0===r.diff||i.currentTranslate===i.startTranslate)return i.isTouched=!1,i.isMoved=!1,void(i.startMoving=!1);if(i.isTouched=!1,i.isMoved=!1,i.startMoving=!1,d=n.followFinger?a?t.translate:-t.translate:-i.currentTranslate,!n.cssMode)if(n.freeMode){if(d<-t.minTranslate())return void t.slideTo(t.activeIndex);if(d>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(n.freeModeMomentum){if(i.velocities.length>1){var p=i.velocities.pop(),f=i.velocities.pop(),m=p.position-f.position,v=p.time-f.time;t.velocity=m/v,t.velocity/=2,Math.abs(t.velocity)<n.freeModeMinimumVelocity&&(t.velocity=0),(v>150||x()-p.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=n.freeModeMomentumVelocityRatio,i.velocities.length=0;var g=1e3*n.freeModeMomentumRatio,b=t.velocity*g,y=t.translate+b;a&&(y=-y);var w,E,S=!1,T=20*Math.abs(t.velocity)*n.freeModeMomentumBounceRatio;if(y<t.maxTranslate())n.freeModeMomentumBounce?(y+t.maxTranslate()<-T&&(y=t.maxTranslate()-T),w=t.maxTranslate(),S=!0,i.allowMomentumBounce=!0):y=t.maxTranslate(),n.loop&&n.centeredSlides&&(E=!0);else if(y>t.minTranslate())n.freeModeMomentumBounce?(y-t.minTranslate()>T&&(y=t.minTranslate()+T),w=t.minTranslate(),S=!0,i.allowMomentumBounce=!0):y=t.minTranslate(),n.loop&&n.centeredSlides&&(E=!0);else if(n.freeModeSticky){for(var C,L=0;L<l.length;L+=1)if(l[L]>-y){C=L;break}y=-(y=Math.abs(l[C]-y)<Math.abs(l[C-1]-y)||"next"===t.swipeDirection?l[C]:l[C-1])}if(E&&t.once("transitionEnd",(function(){t.loopFix()})),0!==t.velocity){if(g=a?Math.abs((-y-t.translate)/t.velocity):Math.abs((y-t.translate)/t.velocity),n.freeModeSticky){var k=Math.abs((a?-y:y)-t.translate),O=t.slidesSizesGrid[t.activeIndex];g=k<O?n.speed:k<2*O?1.5*n.speed:2.5*n.speed}}else if(n.freeModeSticky)return void t.slideToClosest();n.freeModeMomentumBounce&&S?(t.updateProgress(w),t.setTransition(g),t.setTranslate(y),t.transitionStart(!0,t.swipeDirection),t.animating=!0,s.transitionEnd((function(){t&&!t.destroyed&&i.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(n.speed),setTimeout((function(){t.setTranslate(w),s.transitionEnd((function(){t&&!t.destroyed&&t.transitionEnd()}))}),0))}))):t.velocity?(t.updateProgress(y),t.setTransition(g),t.setTranslate(y),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,s.transitionEnd((function(){t&&!t.destroyed&&t.transitionEnd()})))):t.updateProgress(y),t.updateActiveIndex(),t.updateSlidesClasses()}else if(n.freeModeSticky)return void t.slideToClosest();(!n.freeModeMomentum||h>=n.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}else{for(var M=0,A=t.slidesSizesGrid[0],I=0;I<o.length;I+=I<n.slidesPerGroupSkip?1:n.slidesPerGroup){var P=I<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;void 0!==o[I+P]?d>=o[I]&&d<o[I+P]&&(M=I,A=o[I+P]-o[I]):d>=o[I]&&(M=I,A=o[o.length-1]-o[o.length-2])}var D=(d-o[M])/A,z=M<n.slidesPerGroupSkip-1?1:n.slidesPerGroup;if(h>n.longSwipesMs){if(!n.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(D>=n.longSwipesRatio?t.slideTo(M+z):t.slideTo(M)),"prev"===t.swipeDirection&&(D>1-n.longSwipesRatio?t.slideTo(M+z):t.slideTo(M))}else{if(!n.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||c.target!==t.navigation.nextEl&&c.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo(M+z),"prev"===t.swipeDirection&&t.slideTo(M)):c.target===t.navigation.nextEl?t.slideTo(M+z):t.slideTo(M)}}}function N(){var e=this,t=e.params,i=e.el;if(!i||0!==i.offsetWidth){t.breakpoints&&e.setBreakpoint();var n=e.allowSlideNext,r=e.allowSlidePrev,a=e.snapGrid;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses(),("auto"===t.slidesPerView||t.slidesPerView>1)&&e.isEnd&&!e.isBeginning&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.run(),e.allowSlidePrev=r,e.allowSlideNext=n,e.params.watchOverflow&&a!==e.snapGrid&&e.checkOverflow()}}function $(e){var t=this;t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}function R(){var e=this,t=e.wrapperEl,i=e.rtlTranslate;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=i?t.scrollWidth-t.offsetWidth-t.scrollLeft:-t.scrollLeft:e.translate=-t.scrollTop,-0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();var n=e.maxTranslate()-e.minTranslate();(0===n?0:(e.translate-e.minTranslate())/n)!==e.progress&&e.updateProgress(i?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}var q=!1;function H(){}var B={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,nested:!1,width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,slidesPerGroupSkip:0,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,loopPreventsSlide:!0,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0,_emitClasses:!1},F={modular:{useParams:function(e){var t=this;t.modules&&Object.keys(t.modules).forEach((function(i){var n=t.modules[i];n.params&&C(e,n.params)}))},useModules:function(e){void 0===e&&(e={});var t=this;t.modules&&Object.keys(t.modules).forEach((function(i){var n=t.modules[i],r=e[i]||{};n.on&&t.on&&Object.keys(n.on).forEach((function(e){t.on(e,n.on[e])})),n.create&&n.create.bind(t)(r)}))}},eventsEmitter:{on:function(e,t,i){var n=this;if("function"!=typeof t)return n;var r=i?"unshift":"push";return e.split(" ").forEach((function(e){n.eventsListeners[e]||(n.eventsListeners[e]=[]),n.eventsListeners[e][r](t)})),n},once:function(e,t,i){var n=this;if("function"!=typeof t)return n;function r(){n.off(e,r),r.__emitterProxy&&delete r.__emitterProxy;for(var i=arguments.length,a=new Array(i),s=0;s<i;s++)a[s]=arguments[s];t.apply(n,a)}return r.__emitterProxy=t,n.on(e,r,i)},onAny:function(e,t){var i=this;if("function"!=typeof e)return i;var n=t?"unshift":"push";return i.eventsAnyListeners.indexOf(e)<0&&i.eventsAnyListeners[n](e),i},offAny:function(e){var t=this;if(!t.eventsAnyListeners)return t;var i=t.eventsAnyListeners.indexOf(e);return i>=0&&t.eventsAnyListeners.splice(i,1),t},off:function(e,t){var i=this;return i.eventsListeners?(e.split(" ").forEach((function(e){void 0===t?i.eventsListeners[e]=[]:i.eventsListeners[e]&&i.eventsListeners[e].forEach((function(n,r){(n===t||n.__emitterProxy&&n.__emitterProxy===t)&&i.eventsListeners[e].splice(r,1)}))})),i):i},emit:function(){var e,t,i,n=this;if(!n.eventsListeners)return n;for(var r=arguments.length,a=new Array(r),s=0;s<r;s++)a[s]=arguments[s];"string"==typeof a[0]||Array.isArray(a[0])?(e=a[0],t=a.slice(1,a.length),i=n):(e=a[0].events,t=a[0].data,i=a[0].context||n),t.unshift(i);var o=Array.isArray(e)?e:e.split(" ");return o.forEach((function(e){n.eventsAnyListeners&&n.eventsAnyListeners.length&&n.eventsAnyListeners.forEach((function(n){n.apply(i,[e].concat(t))})),n.eventsListeners&&n.eventsListeners[e]&&n.eventsListeners[e].forEach((function(e){e.apply(i,t)}))})),n}},update:{updateSize:function(){var e,t,i=this,n=i.$el;e=void 0!==i.params.width&&null!==i.params.width?i.params.width:n[0].clientWidth,t=void 0!==i.params.height&&null!==i.params.height?i.params.height:n[0].clientHeight,0===e&&i.isHorizontal()||0===t&&i.isVertical()||(e=e-parseInt(n.css("padding-left")||0,10)-parseInt(n.css("padding-right")||0,10),t=t-parseInt(n.css("padding-top")||0,10)-parseInt(n.css("padding-bottom")||0,10),Number.isNaN(e)&&(e=0),Number.isNaN(t)&&(t=0),C(i,{width:e,height:t,size:i.isHorizontal()?e:t}))},updateSlides:function(){var e=this,t=l(),i=e.params,n=e.$wrapperEl,r=e.size,a=e.rtlTranslate,s=e.wrongRTL,o=e.virtual&&i.virtual.enabled,c=o?e.virtual.slides.length:e.slides.length,d=n.children("."+e.params.slideClass),u=o?e.virtual.slides.length:d.length,h=[],p=[],f=[];function m(e,t){return!i.cssMode||t!==d.length-1}var v=i.slidesOffsetBefore;"function"==typeof v&&(v=i.slidesOffsetBefore.call(e));var g=i.slidesOffsetAfter;"function"==typeof g&&(g=i.slidesOffsetAfter.call(e));var b=e.snapGrid.length,y=e.slidesGrid.length,w=i.spaceBetween,E=-v,_=0,x=0;if(void 0!==r){var S,T;"string"==typeof w&&w.indexOf("%")>=0&&(w=parseFloat(w.replace("%",""))/100*r),e.virtualSize=-w,a?d.css({marginLeft:"",marginTop:""}):d.css({marginRight:"",marginBottom:""}),i.slidesPerColumn>1&&(S=Math.floor(u/i.slidesPerColumn)===u/e.params.slidesPerColumn?u:Math.ceil(u/i.slidesPerColumn)*i.slidesPerColumn,"auto"!==i.slidesPerView&&"row"===i.slidesPerColumnFill&&(S=Math.max(S,i.slidesPerView*i.slidesPerColumn)));for(var L,k=i.slidesPerColumn,O=S/k,M=Math.floor(u/i.slidesPerColumn),A=0;A<u;A+=1){T=0;var I=d.eq(A);if(i.slidesPerColumn>1){var P=void 0,D=void 0,z=void 0;if("row"===i.slidesPerColumnFill&&i.slidesPerGroup>1){var j=Math.floor(A/(i.slidesPerGroup*i.slidesPerColumn)),N=A-i.slidesPerColumn*i.slidesPerGroup*j,$=0===j?i.slidesPerGroup:Math.min(Math.ceil((u-j*k*i.slidesPerGroup)/k),i.slidesPerGroup);P=(D=N-(z=Math.floor(N/$))*$+j*i.slidesPerGroup)+z*S/k,I.css({"-webkit-box-ordinal-group":P,"-moz-box-ordinal-group":P,"-ms-flex-order":P,"-webkit-order":P,order:P})}else"column"===i.slidesPerColumnFill?(z=A-(D=Math.floor(A/k))*k,(D>M||D===M&&z===k-1)&&(z+=1)>=k&&(z=0,D+=1)):D=A-(z=Math.floor(A/O))*O;I.css("margin-"+(e.isHorizontal()?"top":"left"),0!==z&&i.spaceBetween&&i.spaceBetween+"px")}if("none"!==I.css("display")){if("auto"===i.slidesPerView){var R=t.getComputedStyle(I[0],null),q=I[0].style.transform,H=I[0].style.webkitTransform;if(q&&(I[0].style.transform="none"),H&&(I[0].style.webkitTransform="none"),i.roundLengths)T=e.isHorizontal()?I.outerWidth(!0):I.outerHeight(!0);else if(e.isHorizontal()){var B=parseFloat(R.getPropertyValue("width")||0),F=parseFloat(R.getPropertyValue("padding-left")||0),W=parseFloat(R.getPropertyValue("padding-right")||0),V=parseFloat(R.getPropertyValue("margin-left")||0),G=parseFloat(R.getPropertyValue("margin-right")||0),X=R.getPropertyValue("box-sizing");if(X&&"border-box"===X)T=B+V+G;else{var Y=I[0],K=Y.clientWidth;T=B+F+W+V+G+(Y.offsetWidth-K)}}else{var U=parseFloat(R.getPropertyValue("height")||0),Q=parseFloat(R.getPropertyValue("padding-top")||0),J=parseFloat(R.getPropertyValue("padding-bottom")||0),Z=parseFloat(R.getPropertyValue("margin-top")||0),ee=parseFloat(R.getPropertyValue("margin-bottom")||0),te=R.getPropertyValue("box-sizing");if(te&&"border-box"===te)T=U+Z+ee;else{var ie=I[0],ne=ie.clientHeight;T=U+Q+J+Z+ee+(ie.offsetHeight-ne)}}q&&(I[0].style.transform=q),H&&(I[0].style.webkitTransform=H),i.roundLengths&&(T=Math.floor(T))}else T=(r-(i.slidesPerView-1)*w)/i.slidesPerView,i.roundLengths&&(T=Math.floor(T)),d[A]&&(e.isHorizontal()?d[A].style.width=T+"px":d[A].style.height=T+"px");d[A]&&(d[A].swiperSlideSize=T),f.push(T),i.centeredSlides?(E=E+T/2+_/2+w,0===_&&0!==A&&(E=E-r/2-w),0===A&&(E=E-r/2-w),Math.abs(E)<.001&&(E=0),i.roundLengths&&(E=Math.floor(E)),x%i.slidesPerGroup==0&&h.push(E),p.push(E)):(i.roundLengths&&(E=Math.floor(E)),(x-Math.min(e.params.slidesPerGroupSkip,x))%e.params.slidesPerGroup==0&&h.push(E),p.push(E),E=E+T+w),e.virtualSize+=T+w,_=T,x+=1}}if(e.virtualSize=Math.max(e.virtualSize,r)+g,a&&s&&("slide"===i.effect||"coverflow"===i.effect)&&n.css({width:e.virtualSize+i.spaceBetween+"px"}),i.setWrapperSize&&(e.isHorizontal()?n.css({width:e.virtualSize+i.spaceBetween+"px"}):n.css({height:e.virtualSize+i.spaceBetween+"px"})),i.slidesPerColumn>1&&(e.virtualSize=(T+i.spaceBetween)*S,e.virtualSize=Math.ceil(e.virtualSize/i.slidesPerColumn)-i.spaceBetween,e.isHorizontal()?n.css({width:e.virtualSize+i.spaceBetween+"px"}):n.css({height:e.virtualSize+i.spaceBetween+"px"}),i.centeredSlides)){L=[];for(var re=0;re<h.length;re+=1){var ae=h[re];i.roundLengths&&(ae=Math.floor(ae)),h[re]<e.virtualSize+h[0]&&L.push(ae)}h=L}if(!i.centeredSlides){L=[];for(var se=0;se<h.length;se+=1){var oe=h[se];i.roundLengths&&(oe=Math.floor(oe)),h[se]<=e.virtualSize-r&&L.push(oe)}h=L,Math.floor(e.virtualSize-r)-Math.floor(h[h.length-1])>1&&h.push(e.virtualSize-r)}if(0===h.length&&(h=[0]),0!==i.spaceBetween&&(e.isHorizontal()?a?d.filter(m).css({marginLeft:w+"px"}):d.filter(m).css({marginRight:w+"px"}):d.filter(m).css({marginBottom:w+"px"})),i.centeredSlides&&i.centeredSlidesBounds){var le=0;f.forEach((function(e){le+=e+(i.spaceBetween?i.spaceBetween:0)}));var ce=(le-=i.spaceBetween)-r;h=h.map((function(e){return e<0?-v:e>ce?ce+g:e}))}if(i.centerInsufficientSlides){var de=0;if(f.forEach((function(e){de+=e+(i.spaceBetween?i.spaceBetween:0)})),(de-=i.spaceBetween)<r){var ue=(r-de)/2;h.forEach((function(e,t){h[t]=e-ue})),p.forEach((function(e,t){p[t]=e+ue}))}}C(e,{slides:d,snapGrid:h,slidesGrid:p,slidesSizesGrid:f}),u!==c&&e.emit("slidesLengthChange"),h.length!==b&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),p.length!==y&&e.emit("slidesGridLengthChange"),(i.watchSlidesProgress||i.watchSlidesVisibility)&&e.updateSlidesOffset()}},updateAutoHeight:function(e){var t,i=this,n=[],r=0;if("number"==typeof e?i.setTransition(e):!0===e&&i.setTransition(i.params.speed),"auto"!==i.params.slidesPerView&&i.params.slidesPerView>1)if(i.params.centeredSlides)i.visibleSlides.each((function(e){n.push(e)}));else for(t=0;t<Math.ceil(i.params.slidesPerView);t+=1){var a=i.activeIndex+t;if(a>i.slides.length)break;n.push(i.slides.eq(a)[0])}else n.push(i.slides.eq(i.activeIndex)[0]);for(t=0;t<n.length;t+=1)if(void 0!==n[t]){var s=n[t].offsetHeight;r=s>r?s:r}r&&i.$wrapperEl.css("height",r+"px")},updateSlidesOffset:function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this,i=t.params,n=t.slides,r=t.rtlTranslate;if(0!==n.length){void 0===n[0].swiperSlideOffset&&t.updateSlidesOffset();var a=-e;r&&(a=e),n.removeClass(i.slideVisibleClass),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(var s=0;s<n.length;s+=1){var o=n[s],l=(a+(i.centeredSlides?t.minTranslate():0)-o.swiperSlideOffset)/(o.swiperSlideSize+i.spaceBetween);if(i.watchSlidesVisibility||i.centeredSlides&&i.autoHeight){var c=-(a-o.swiperSlideOffset),d=c+t.slidesSizesGrid[s];(c>=0&&c<t.size-1||d>1&&d<=t.size||c<=0&&d>=t.size)&&(t.visibleSlides.push(o),t.visibleSlidesIndexes.push(s),n.eq(s).addClass(i.slideVisibleClass))}o.progress=r?-l:l}t.visibleSlides=g(t.visibleSlides)}},updateProgress:function(e){var t=this;if(void 0===e){var i=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*i||0}var n=t.params,r=t.maxTranslate()-t.minTranslate(),a=t.progress,s=t.isBeginning,o=t.isEnd,l=s,c=o;0===r?(a=0,s=!0,o=!0):(s=(a=(e-t.minTranslate())/r)<=0,o=a>=1),C(t,{progress:a,isBeginning:s,isEnd:o}),(n.watchSlidesProgress||n.watchSlidesVisibility||n.centeredSlides&&n.autoHeight)&&t.updateSlidesProgress(e),s&&!l&&t.emit("reachBeginning toEdge"),o&&!c&&t.emit("reachEnd toEdge"),(l&&!s||c&&!o)&&t.emit("fromEdge"),t.emit("progress",a)},updateSlidesClasses:function(){var e,t=this,i=t.slides,n=t.params,r=t.$wrapperEl,a=t.activeIndex,s=t.realIndex,o=t.virtual&&n.virtual.enabled;i.removeClass(n.slideActiveClass+" "+n.slideNextClass+" "+n.slidePrevClass+" "+n.slideDuplicateActiveClass+" "+n.slideDuplicateNextClass+" "+n.slideDuplicatePrevClass),(e=o?t.$wrapperEl.find("."+n.slideClass+'[data-swiper-slide-index="'+a+'"]'):i.eq(a)).addClass(n.slideActiveClass),n.loop&&(e.hasClass(n.slideDuplicateClass)?r.children("."+n.slideClass+":not(."+n.slideDuplicateClass+')[data-swiper-slide-index="'+s+'"]').addClass(n.slideDuplicateActiveClass):r.children("."+n.slideClass+"."+n.slideDuplicateClass+'[data-swiper-slide-index="'+s+'"]').addClass(n.slideDuplicateActiveClass));var l=e.nextAll("."+n.slideClass).eq(0).addClass(n.slideNextClass);n.loop&&0===l.length&&(l=i.eq(0)).addClass(n.slideNextClass);var c=e.prevAll("."+n.slideClass).eq(0).addClass(n.slidePrevClass);n.loop&&0===c.length&&(c=i.eq(-1)).addClass(n.slidePrevClass),n.loop&&(l.hasClass(n.slideDuplicateClass)?r.children("."+n.slideClass+":not(."+n.slideDuplicateClass+')[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(n.slideDuplicateNextClass):r.children("."+n.slideClass+"."+n.slideDuplicateClass+'[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(n.slideDuplicateNextClass),c.hasClass(n.slideDuplicateClass)?r.children("."+n.slideClass+":not(."+n.slideDuplicateClass+')[data-swiper-slide-index="'+c.attr("data-swiper-slide-index")+'"]').addClass(n.slideDuplicatePrevClass):r.children("."+n.slideClass+"."+n.slideDuplicateClass+'[data-swiper-slide-index="'+c.attr("data-swiper-slide-index")+'"]').addClass(n.slideDuplicatePrevClass)),t.emitSlidesClasses()},updateActiveIndex:function(e){var t,i=this,n=i.rtlTranslate?i.translate:-i.translate,r=i.slidesGrid,a=i.snapGrid,s=i.params,o=i.activeIndex,l=i.realIndex,c=i.snapIndex,d=e;if(void 0===d){for(var u=0;u<r.length;u+=1)void 0!==r[u+1]?n>=r[u]&&n<r[u+1]-(r[u+1]-r[u])/2?d=u:n>=r[u]&&n<r[u+1]&&(d=u+1):n>=r[u]&&(d=u);s.normalizeSlideIndex&&(d<0||void 0===d)&&(d=0)}if(a.indexOf(n)>=0)t=a.indexOf(n);else{var h=Math.min(s.slidesPerGroupSkip,d);t=h+Math.floor((d-h)/s.slidesPerGroup)}if(t>=a.length&&(t=a.length-1),d!==o){var p=parseInt(i.slides.eq(d).attr("data-swiper-slide-index")||d,10);C(i,{snapIndex:t,realIndex:p,previousIndex:o,activeIndex:d}),i.emit("activeIndexChange"),i.emit("snapIndexChange"),l!==p&&i.emit("realIndexChange"),(i.initialized||i.params.runCallbacksOnInit)&&i.emit("slideChange")}else t!==c&&(i.snapIndex=t,i.emit("snapIndexChange"))},updateClickedSlide:function(e){var t=this,i=t.params,n=g(e.target).closest("."+i.slideClass)[0],r=!1;if(n)for(var a=0;a<t.slides.length;a+=1)t.slides[a]===n&&(r=!0);if(!n||!r)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=n,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(g(n).attr("data-swiper-slide-index"),10):t.clickedIndex=g(n).index(),i.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}},translate:{getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");var t=this,i=t.params,n=t.rtlTranslate,r=t.translate,a=t.$wrapperEl;if(i.virtualTranslate)return n?-r:r;if(i.cssMode)return r;var s=S(a[0],e);return n&&(s=-s),s||0},setTranslate:function(e,t){var i=this,n=i.rtlTranslate,r=i.params,a=i.$wrapperEl,s=i.wrapperEl,o=i.progress,l=0,c=0;i.isHorizontal()?l=n?-e:e:c=e,r.roundLengths&&(l=Math.floor(l),c=Math.floor(c)),r.cssMode?s[i.isHorizontal()?"scrollLeft":"scrollTop"]=i.isHorizontal()?-l:-c:r.virtualTranslate||a.transform("translate3d("+l+"px, "+c+"px, 0px)"),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?l:c;var d=i.maxTranslate()-i.minTranslate();(0===d?0:(e-i.minTranslate())/d)!==o&&i.updateProgress(e),i.emit("setTranslate",i.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,i,n,r){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0),void 0===n&&(n=!0);var a=this,s=a.params,o=a.wrapperEl;if(a.animating&&s.preventInteractionOnTransition)return!1;var l,c=a.minTranslate(),d=a.maxTranslate();if(l=n&&e>c?c:n&&e<d?d:e,a.updateProgress(l),s.cssMode){var u,h=a.isHorizontal();return 0===t?o[h?"scrollLeft":"scrollTop"]=-l:o.scrollTo?o.scrollTo(((u={})[h?"left":"top"]=-l,u.behavior="smooth",u)):o[h?"scrollLeft":"scrollTop"]=-l,!0}return 0===t?(a.setTransition(0),a.setTranslate(l),i&&(a.emit("beforeTransitionStart",t,r),a.emit("transitionEnd"))):(a.setTransition(t),a.setTranslate(l),i&&(a.emit("beforeTransitionStart",t,r),a.emit("transitionStart")),a.animating||(a.animating=!0,a.onTranslateToWrapperTransitionEnd||(a.onTranslateToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.$wrapperEl[0].removeEventListener("transitionend",a.onTranslateToWrapperTransitionEnd),a.$wrapperEl[0].removeEventListener("webkitTransitionEnd",a.onTranslateToWrapperTransitionEnd),a.onTranslateToWrapperTransitionEnd=null,delete a.onTranslateToWrapperTransitionEnd,i&&a.emit("transitionEnd"))}),a.$wrapperEl[0].addEventListener("transitionend",a.onTranslateToWrapperTransitionEnd),a.$wrapperEl[0].addEventListener("webkitTransitionEnd",a.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){var i=this;i.params.cssMode||i.$wrapperEl.transition(e),i.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);var i=this,n=i.activeIndex,r=i.params,a=i.previousIndex;if(!r.cssMode){r.autoHeight&&i.updateAutoHeight();var s=t;if(s||(s=n>a?"next":n<a?"prev":"reset"),i.emit("transitionStart"),e&&n!==a){if("reset"===s)return void i.emit("slideResetTransitionStart");i.emit("slideChangeTransitionStart"),"next"===s?i.emit("slideNextTransitionStart"):i.emit("slidePrevTransitionStart")}}},transitionEnd:function(e,t){void 0===e&&(e=!0);var i=this,n=i.activeIndex,r=i.previousIndex,a=i.params;if(i.animating=!1,!a.cssMode){i.setTransition(0);var s=t;if(s||(s=n>r?"next":n<r?"prev":"reset"),i.emit("transitionEnd"),e&&n!==r){if("reset"===s)return void i.emit("slideResetTransitionEnd");i.emit("slideChangeTransitionEnd"),"next"===s?i.emit("slideNextTransitionEnd"):i.emit("slidePrevTransitionEnd")}}}},slide:{slideTo:function(t,i,n,r){if(void 0===t&&(t=0),void 0===i&&(i=this.params.speed),void 0===n&&(n=!0),"number"!=typeof t&&"string"!=typeof t)throw new Error("The 'index' argument cannot have type other than 'number' or 'string'. ["+e(t)+"] given.");if("string"==typeof t){var a=parseInt(t,10);if(!isFinite(a))throw new Error("The passed-in 'index' (string) couldn't be converted to 'number'. ["+t+"] given.");t=a}var s=this,o=t;o<0&&(o=0);var l=s.params,c=s.snapGrid,d=s.slidesGrid,u=s.previousIndex,h=s.activeIndex,p=s.rtlTranslate,f=s.wrapperEl;if(s.animating&&l.preventInteractionOnTransition)return!1;var m=Math.min(s.params.slidesPerGroupSkip,o),v=m+Math.floor((o-m)/s.params.slidesPerGroup);v>=c.length&&(v=c.length-1),(h||l.initialSlide||0)===(u||0)&&n&&s.emit("beforeSlideChangeStart");var g,b=-c[v];if(s.updateProgress(b),l.normalizeSlideIndex)for(var y=0;y<d.length;y+=1)-Math.floor(100*b)>=Math.floor(100*d[y])&&(o=y);if(s.initialized&&o!==h){if(!s.allowSlideNext&&b<s.translate&&b<s.minTranslate())return!1;if(!s.allowSlidePrev&&b>s.translate&&b>s.maxTranslate()&&(h||0)!==o)return!1}if(g=o>h?"next":o<h?"prev":"reset",p&&-b===s.translate||!p&&b===s.translate)return s.updateActiveIndex(o),l.autoHeight&&s.updateAutoHeight(),s.updateSlidesClasses(),"slide"!==l.effect&&s.setTranslate(b),"reset"!==g&&(s.transitionStart(n,g),s.transitionEnd(n,g)),!1;if(l.cssMode){var w,E=s.isHorizontal(),_=-b;return p&&(_=f.scrollWidth-f.offsetWidth-_),0===i?f[E?"scrollLeft":"scrollTop"]=_:f.scrollTo?f.scrollTo(((w={})[E?"left":"top"]=_,w.behavior="smooth",w)):f[E?"scrollLeft":"scrollTop"]=_,!0}return 0===i?(s.setTransition(0),s.setTranslate(b),s.updateActiveIndex(o),s.updateSlidesClasses(),s.emit("beforeTransitionStart",i,r),s.transitionStart(n,g),s.transitionEnd(n,g)):(s.setTransition(i),s.setTranslate(b),s.updateActiveIndex(o),s.updateSlidesClasses(),s.emit("beforeTransitionStart",i,r),s.transitionStart(n,g),s.animating||(s.animating=!0,s.onSlideToWrapperTransitionEnd||(s.onSlideToWrapperTransitionEnd=function(e){s&&!s.destroyed&&e.target===this&&(s.$wrapperEl[0].removeEventListener("transitionend",s.onSlideToWrapperTransitionEnd),s.$wrapperEl[0].removeEventListener("webkitTransitionEnd",s.onSlideToWrapperTransitionEnd),s.onSlideToWrapperTransitionEnd=null,delete s.onSlideToWrapperTransitionEnd,s.transitionEnd(n,g))}),s.$wrapperEl[0].addEventListener("transitionend",s.onSlideToWrapperTransitionEnd),s.$wrapperEl[0].addEventListener("webkitTransitionEnd",s.onSlideToWrapperTransitionEnd))),!0},slideToLoop:function(e,t,i,n){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===i&&(i=!0);var r=this,a=e;return r.params.loop&&(a+=r.loopedSlides),r.slideTo(a,t,i,n)},slideNext:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var n=this,r=n.params,a=n.animating,s=n.activeIndex<r.slidesPerGroupSkip?1:r.slidesPerGroup;if(r.loop){if(a&&r.loopPreventsSlide)return!1;n.loopFix(),n._clientLeft=n.$wrapperEl[0].clientLeft}return n.slideTo(n.activeIndex+s,e,t,i)},slidePrev:function(e,t,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var n=this,r=n.params,a=n.animating,s=n.snapGrid,o=n.slidesGrid,l=n.rtlTranslate;if(r.loop){if(a&&r.loopPreventsSlide)return!1;n.loopFix(),n._clientLeft=n.$wrapperEl[0].clientLeft}function c(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}var d,u=c(l?n.translate:-n.translate),h=s.map((function(e){return c(e)})),p=(s[h.indexOf(u)],s[h.indexOf(u)-1]);return void 0===p&&r.cssMode&&s.forEach((function(e){!p&&u>=e&&(p=e)})),void 0!==p&&(d=o.indexOf(p))<0&&(d=n.activeIndex-1),n.slideTo(d,e,t,i)},slideReset:function(e,t,i){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,i)},slideToClosest:function(e,t,i,n){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===n&&(n=.5);var r=this,a=r.activeIndex,s=Math.min(r.params.slidesPerGroupSkip,a),o=s+Math.floor((a-s)/r.params.slidesPerGroup),l=r.rtlTranslate?r.translate:-r.translate;if(l>=r.snapGrid[o]){var c=r.snapGrid[o];l-c>(r.snapGrid[o+1]-c)*n&&(a+=r.params.slidesPerGroup)}else{var d=r.snapGrid[o-1];l-d<=(r.snapGrid[o]-d)*n&&(a-=r.params.slidesPerGroup)}return a=Math.max(a,0),a=Math.min(a,r.slidesGrid.length-1),r.slideTo(a,e,t,i)},slideToClickedSlide:function(){var e,t=this,i=t.params,n=t.$wrapperEl,r="auto"===i.slidesPerView?t.slidesPerViewDynamic():i.slidesPerView,a=t.clickedIndex;if(i.loop){if(t.animating)return;e=parseInt(g(t.clickedSlide).attr("data-swiper-slide-index"),10),i.centeredSlides?a<t.loopedSlides-r/2||a>t.slides.length-t.loopedSlides+r/2?(t.loopFix(),a=n.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),_((function(){t.slideTo(a)}))):t.slideTo(a):a>t.slides.length-r?(t.loopFix(),a=n.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+i.slideDuplicateClass+")").eq(0).index(),_((function(){t.slideTo(a)}))):t.slideTo(a)}else t.slideTo(a)}},loop:{loopCreate:function(){var e=this,t=s(),i=e.params,n=e.$wrapperEl;n.children("."+i.slideClass+"."+i.slideDuplicateClass).remove();var r=n.children("."+i.slideClass);if(i.loopFillGroupWithBlank){var a=i.slidesPerGroup-r.length%i.slidesPerGroup;if(a!==i.slidesPerGroup){for(var o=0;o<a;o+=1){var l=g(t.createElement("div")).addClass(i.slideClass+" "+i.slideBlankClass);n.append(l)}r=n.children("."+i.slideClass)}}"auto"!==i.slidesPerView||i.loopedSlides||(i.loopedSlides=r.length),e.loopedSlides=Math.ceil(parseFloat(i.loopedSlides||i.slidesPerView,10)),e.loopedSlides+=i.loopAdditionalSlides,e.loopedSlides>r.length&&(e.loopedSlides=r.length);var c=[],d=[];r.each((function(t,i){var n=g(t);i<e.loopedSlides&&d.push(t),i<r.length&&i>=r.length-e.loopedSlides&&c.push(t),n.attr("data-swiper-slide-index",i)}));for(var u=0;u<d.length;u+=1)n.append(g(d[u].cloneNode(!0)).addClass(i.slideDuplicateClass));for(var h=c.length-1;h>=0;h-=1)n.prepend(g(c[h].cloneNode(!0)).addClass(i.slideDuplicateClass))},loopFix:function(){var e=this;e.emit("beforeLoopFix");var t,i=e.activeIndex,n=e.slides,r=e.loopedSlides,a=e.allowSlidePrev,s=e.allowSlideNext,o=e.snapGrid,l=e.rtlTranslate;e.allowSlidePrev=!0,e.allowSlideNext=!0;var c=-o[i]-e.getTranslate();i<r?(t=n.length-3*r+i,t+=r,e.slideTo(t,0,!1,!0)&&0!==c&&e.setTranslate((l?-e.translate:e.translate)-c)):i>=n.length-r&&(t=-n.length+i+r,t+=r,e.slideTo(t,0,!1,!0)&&0!==c&&e.setTranslate((l?-e.translate:e.translate)-c)),e.allowSlidePrev=a,e.allowSlideNext=s,e.emit("loopFix")},loopDestroy:function(){var e=this,t=e.$wrapperEl,i=e.params,n=e.slides;t.children("."+i.slideClass+"."+i.slideDuplicateClass+",."+i.slideClass+"."+i.slideBlankClass).remove(),n.removeAttr("data-swiper-slide-index")}},grabCursor:{setGrabCursor:function(e){var t=this;if(!(t.support.touch||!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)){var i=t.el;i.style.cursor="move",i.style.cursor=e?"-webkit-grabbing":"-webkit-grab",i.style.cursor=e?"-moz-grabbin":"-moz-grab",i.style.cursor=e?"grabbing":"grab"}},unsetGrabCursor:function(){var e=this;e.support.touch||e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.el.style.cursor="")}},manipulation:{appendSlide:function(t){var i=this,n=i.$wrapperEl,r=i.params;if(r.loop&&i.loopDestroy(),"object"==e(t)&&"length"in t)for(var a=0;a<t.length;a+=1)t[a]&&n.append(t[a]);else n.append(t);r.loop&&i.loopCreate(),r.observer&&i.support.observer||i.update()},prependSlide:function(t){var i=this,n=i.params,r=i.$wrapperEl,a=i.activeIndex;n.loop&&i.loopDestroy();var s=a+1;if("object"==e(t)&&"length"in t){for(var o=0;o<t.length;o+=1)t[o]&&r.prepend(t[o]);s=a+t.length}else r.prepend(t);n.loop&&i.loopCreate(),n.observer&&i.support.observer||i.update(),i.slideTo(s,0,!1)},addSlide:function(t,i){var n=this,r=n.$wrapperEl,a=n.params,s=n.activeIndex;a.loop&&(s-=n.loopedSlides,n.loopDestroy(),n.slides=r.children("."+a.slideClass));var o=n.slides.length;if(t<=0)n.prependSlide(i);else if(t>=o)n.appendSlide(i);else{for(var l=s>t?s+1:s,c=[],d=o-1;d>=t;d-=1){var u=n.slides.eq(d);u.remove(),c.unshift(u)}if("object"==e(i)&&"length"in i){for(var h=0;h<i.length;h+=1)i[h]&&r.append(i[h]);l=s>t?s+i.length:s}else r.append(i);for(var p=0;p<c.length;p+=1)r.append(c[p]);a.loop&&n.loopCreate(),a.observer&&n.support.observer||n.update(),a.loop?n.slideTo(l+n.loopedSlides,0,!1):n.slideTo(l,0,!1)}},removeSlide:function(t){var i=this,n=i.params,r=i.$wrapperEl,a=i.activeIndex;n.loop&&(a-=i.loopedSlides,i.loopDestroy(),i.slides=r.children("."+n.slideClass));var s,o=a;if("object"==e(t)&&"length"in t){for(var l=0;l<t.length;l+=1)s=t[l],i.slides[s]&&i.slides.eq(s).remove(),s<o&&(o-=1);o=Math.max(o,0)}else s=t,i.slides[s]&&i.slides.eq(s).remove(),s<o&&(o-=1),o=Math.max(o,0);n.loop&&i.loopCreate(),n.observer&&i.support.observer||i.update(),n.loop?i.slideTo(o+i.loopedSlides,0,!1):i.slideTo(o,0,!1)},removeAllSlides:function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}},events:{attachEvents:function(){var e=this,t=s(),i=e.params,n=e.touchEvents,r=e.el,a=e.wrapperEl,o=e.device,l=e.support;e.onTouchStart=D.bind(e),e.onTouchMove=z.bind(e),e.onTouchEnd=j.bind(e),i.cssMode&&(e.onScroll=R.bind(e)),e.onClick=$.bind(e);var c=!!i.nested;if(!l.touch&&l.pointerEvents)r.addEventListener(n.start,e.onTouchStart,!1),t.addEventListener(n.move,e.onTouchMove,c),t.addEventListener(n.end,e.onTouchEnd,!1);else{if(l.touch){var d=!("touchstart"!==n.start||!l.passiveListener||!i.passiveListeners)&&{passive:!0,capture:!1};r.addEventListener(n.start,e.onTouchStart,d),r.addEventListener(n.move,e.onTouchMove,l.passiveListener?{passive:!1,capture:c}:c),r.addEventListener(n.end,e.onTouchEnd,d),n.cancel&&r.addEventListener(n.cancel,e.onTouchEnd,d),q||(t.addEventListener("touchstart",H),q=!0)}(i.simulateTouch&&!o.ios&&!o.android||i.simulateTouch&&!l.touch&&o.ios)&&(r.addEventListener("mousedown",e.onTouchStart,!1),t.addEventListener("mousemove",e.onTouchMove,c),t.addEventListener("mouseup",e.onTouchEnd,!1))}(i.preventClicks||i.preventClicksPropagation)&&r.addEventListener("click",e.onClick,!0),i.cssMode&&a.addEventListener("scroll",e.onScroll),i.updateOnWindowResize?e.on(o.ios||o.android?"resize orientationchange observerUpdate":"resize observerUpdate",N,!0):e.on("observerUpdate",N,!0)},detachEvents:function(){var e=this,t=s(),i=e.params,n=e.touchEvents,r=e.el,a=e.wrapperEl,o=e.device,l=e.support,c=!!i.nested;if(!l.touch&&l.pointerEvents)r.removeEventListener(n.start,e.onTouchStart,!1),t.removeEventListener(n.move,e.onTouchMove,c),t.removeEventListener(n.end,e.onTouchEnd,!1);else{if(l.touch){var d=!("onTouchStart"!==n.start||!l.passiveListener||!i.passiveListeners)&&{passive:!0,capture:!1};r.removeEventListener(n.start,e.onTouchStart,d),r.removeEventListener(n.move,e.onTouchMove,c),r.removeEventListener(n.end,e.onTouchEnd,d),n.cancel&&r.removeEventListener(n.cancel,e.onTouchEnd,d)}(i.simulateTouch&&!o.ios&&!o.android||i.simulateTouch&&!l.touch&&o.ios)&&(r.removeEventListener("mousedown",e.onTouchStart,!1),t.removeEventListener("mousemove",e.onTouchMove,c),t.removeEventListener("mouseup",e.onTouchEnd,!1))}(i.preventClicks||i.preventClicksPropagation)&&r.removeEventListener("click",e.onClick,!0),i.cssMode&&a.removeEventListener("scroll",e.onScroll),e.off(o.ios||o.android?"resize orientationchange observerUpdate":"resize observerUpdate",N)}},breakpoints:{setBreakpoint:function(){var e=this,t=e.activeIndex,i=e.initialized,n=e.loopedSlides,r=void 0===n?0:n,a=e.params,s=e.$el,o=a.breakpoints;if(o&&(!o||0!==Object.keys(o).length)){var l=e.getBreakpoint(o);if(l&&e.currentBreakpoint!==l){var c=l in o?o[l]:void 0;c&&["slidesPerView","spaceBetween","slidesPerGroup","slidesPerGroupSkip","slidesPerColumn"].forEach((function(e){var t=c[e];void 0!==t&&(c[e]="slidesPerView"!==e||"AUTO"!==t&&"auto"!==t?"slidesPerView"===e?parseFloat(t):parseInt(t,10):"auto")}));var d=c||e.originalParams,u=a.slidesPerColumn>1,h=d.slidesPerColumn>1;u&&!h?(s.removeClass(a.containerModifierClass+"multirow "+a.containerModifierClass+"multirow-column"),e.emitContainerClasses()):!u&&h&&(s.addClass(a.containerModifierClass+"multirow"),"column"===d.slidesPerColumnFill&&s.addClass(a.containerModifierClass+"multirow-column"),e.emitContainerClasses());var p=d.direction&&d.direction!==a.direction,f=a.loop&&(d.slidesPerView!==a.slidesPerView||p);p&&i&&e.changeDirection(),C(e.params,d),C(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),e.currentBreakpoint=l,e.emit("_beforeBreakpoint",d),f&&i&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-r+e.loopedSlides,0,!1)),e.emit("breakpoint",d)}}},getBreakpoint:function(e){var t=l();if(e){var i=!1,n=Object.keys(e).map((function(e){if("string"==typeof e&&0===e.indexOf("@")){var i=parseFloat(e.substr(1));return{value:t.innerHeight*i,point:e}}return{value:e,point:e}}));n.sort((function(e,t){return parseInt(e.value,10)-parseInt(t.value,10)}));for(var r=0;r<n.length;r+=1){var a=n[r],s=a.point;a.value<=t.innerWidth&&(i=s)}return i||"max"}}},checkOverflow:{checkOverflow:function(){var e=this,t=e.params,i=e.isLocked,n=e.slides.length>0&&t.slidesOffsetBefore+t.spaceBetween*(e.slides.length-1)+e.slides[0].offsetWidth*e.slides.length;t.slidesOffsetBefore&&t.slidesOffsetAfter&&n?e.isLocked=n<=e.size:e.isLocked=1===e.snapGrid.length,e.allowSlideNext=!e.isLocked,e.allowSlidePrev=!e.isLocked,i!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock"),i&&i!==e.isLocked&&(e.isEnd=!1,e.navigation&&e.navigation.update())}},classes:{addClasses:function(){var e=this,t=e.classNames,i=e.params,n=e.rtl,r=e.$el,a=e.device,s=[];s.push("initialized"),s.push(i.direction),i.freeMode&&s.push("free-mode"),i.autoHeight&&s.push("autoheight"),n&&s.push("rtl"),i.slidesPerColumn>1&&(s.push("multirow"),"column"===i.slidesPerColumnFill&&s.push("multirow-column")),a.android&&s.push("android"),a.ios&&s.push("ios"),i.cssMode&&s.push("css-mode"),s.forEach((function(e){t.push(i.containerModifierClass+e)})),r.addClass(t.join(" ")),e.emitContainerClasses()},removeClasses:function(){var e=this,t=e.$el,i=e.classNames;t.removeClass(i.join(" ")),e.emitContainerClasses()}},images:{loadImage:function(e,t,i,n,r,a){var s,o=l();function c(){a&&a()}g(e).parent("picture")[0]||e.complete&&r?c():t?((s=new o.Image).onload=c,s.onerror=c,n&&(s.sizes=n),i&&(s.srcset=i),t&&(s.src=t)):c()},preloadImages:function(){var e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(var i=0;i<e.imagesToLoad.length;i+=1){var n=e.imagesToLoad[i];e.loadImage(n,n.currentSrc||n.getAttribute("src"),n.srcset||n.getAttribute("srcset"),n.sizes||n.getAttribute("sizes"),!0,t)}}}},W={},V=function(){function i(){for(var t,n,r=arguments.length,a=new Array(r),s=0;s<r;s++)a[s]=arguments[s];1===a.length&&a[0].constructor&&a[0].constructor===Object?n=a[0]:(t=a[0],n=a[1]),n||(n={}),n=C({},n),t&&!n.el&&(n.el=t);var o=this;o.support=k(),o.device=O({userAgent:n.userAgent}),o.browser=M(),o.eventsListeners={},o.eventsAnyListeners=[],void 0===o.modules&&(o.modules={}),Object.keys(o.modules).forEach((function(t){var i=o.modules[t];if(i.params){var r=Object.keys(i.params)[0],a=i.params[r];if("object"!=e(a)||null===a)return;if(!(r in n)||!("enabled"in a))return;!0===n[r]&&(n[r]={enabled:!0}),"object"!=e(n[r])||"enabled"in n[r]||(n[r].enabled=!0),n[r]||(n[r]={enabled:!1})}}));var l=C({},B);o.useParams(l),o.params=C({},l,W,n),o.originalParams=C({},o.params),o.passedParams=C({},n),o.params&&o.params.on&&Object.keys(o.params.on).forEach((function(e){o.on(e,o.params.on[e])})),o.params&&o.params.onAny&&o.onAny(o.params.onAny),o.$=g;var c=g(o.params.el);if(t=c[0]){if(c.length>1){var d=[];return c.each((function(e){var t=C({},n,{el:e});d.push(new i(t))})),d}var u,h,p;return t.swiper=o,t&&t.shadowRoot&&t.shadowRoot.querySelector?(u=g(t.shadowRoot.querySelector("."+o.params.wrapperClass))).children=function(e){return c.children(e)}:u=c.children("."+o.params.wrapperClass),C(o,{$el:c,el:t,$wrapperEl:u,wrapperEl:u[0],classNames:[],slides:g(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===o.params.direction},isVertical:function(){return"vertical"===o.params.direction},rtl:"rtl"===t.dir.toLowerCase()||"rtl"===c.css("direction"),rtlTranslate:"horizontal"===o.params.direction&&("rtl"===t.dir.toLowerCase()||"rtl"===c.css("direction")),wrongRTL:"-webkit-box"===u.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:o.params.allowSlideNext,allowSlidePrev:o.params.allowSlidePrev,touchEvents:(h=["touchstart","touchmove","touchend","touchcancel"],p=["mousedown","mousemove","mouseup"],o.support.pointerEvents&&(p=["pointerdown","pointermove","pointerup"]),o.touchEventsTouch={start:h[0],move:h[1],end:h[2],cancel:h[3]},o.touchEventsDesktop={start:p[0],move:p[1],end:p[2]},o.support.touch||!o.params.simulateTouch?o.touchEventsTouch:o.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video, label",lastClickTime:x(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:o.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),o.useModules(),o.emit("_swiper"),o.params.init&&o.init(),o}}var n,r,a=i.prototype;return a.emitContainerClasses=function(){var e=this;if(e.params._emitClasses&&e.el){var t=e.el.className.split(" ").filter((function(t){return 0===t.indexOf("swiper-container")||0===t.indexOf(e.params.containerModifierClass)}));e.emit("_containerClasses",t.join(" "))}},a.getSlideClasses=function(e){var t=this;return e.className.split(" ").filter((function(e){return 0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass)})).join(" ")},a.emitSlidesClasses=function(){var e=this;e.params._emitClasses&&e.el&&e.slides.each((function(t){var i=e.getSlideClasses(t);e.emit("_slideClass",t,i)}))},a.slidesPerViewDynamic=function(){var e=this,t=e.params,i=e.slides,n=e.slidesGrid,r=e.size,a=e.activeIndex,s=1;if(t.centeredSlides){for(var o,l=i[a].swiperSlideSize,c=a+1;c<i.length;c+=1)i[c]&&!o&&(s+=1,(l+=i[c].swiperSlideSize)>r&&(o=!0));for(var d=a-1;d>=0;d-=1)i[d]&&!o&&(s+=1,(l+=i[d].swiperSlideSize)>r&&(o=!0))}else for(var u=a+1;u<i.length;u+=1)n[u]-n[a]<r&&(s+=1);return s},a.update=function(){var e=this;if(e&&!e.destroyed){var t=e.snapGrid,i=e.params;i.breakpoints&&e.setBreakpoint(),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.params.freeMode?(n(),e.params.autoHeight&&e.updateAutoHeight()):(("auto"===e.params.slidesPerView||e.params.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0))||n(),i.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}function n(){var t=e.rtlTranslate?-1*e.translate:e.translate,i=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(i),e.updateActiveIndex(),e.updateSlidesClasses()}},a.changeDirection=function(e,t){void 0===t&&(t=!0);var i=this,n=i.params.direction;return e||(e="horizontal"===n?"vertical":"horizontal"),e===n||"horizontal"!==e&&"vertical"!==e||(i.$el.removeClass(""+i.params.containerModifierClass+n).addClass(""+i.params.containerModifierClass+e),i.emitContainerClasses(),i.params.direction=e,i.slides.each((function(t){"vertical"===e?t.style.width="":t.style.height=""})),i.emit("changeDirection"),t&&i.update()),i},a.init=function(){var e=this;e.initialized||(e.emit("beforeInit"),e.params.breakpoints&&e.setBreakpoint(),e.addClasses(),e.params.loop&&e.loopCreate(),e.updateSize(),e.updateSlides(),e.params.watchOverflow&&e.checkOverflow(),e.params.grabCursor&&e.setGrabCursor(),e.params.preloadImages&&e.preloadImages(),e.params.loop?e.slideTo(e.params.initialSlide+e.loopedSlides,0,e.params.runCallbacksOnInit):e.slideTo(e.params.initialSlide,0,e.params.runCallbacksOnInit),e.attachEvents(),e.initialized=!0,e.emit("init"),e.emit("afterInit"))},a.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var i,n=this,r=n.params,a=n.$el,s=n.$wrapperEl,o=n.slides;return void 0===n.params||n.destroyed||(n.emit("beforeDestroy"),n.initialized=!1,n.detachEvents(),r.loop&&n.loopDestroy(),t&&(n.removeClasses(),a.removeAttr("style"),s.removeAttr("style"),o&&o.length&&o.removeClass([r.slideVisibleClass,r.slideActiveClass,r.slideNextClass,r.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")),n.emit("destroy"),Object.keys(n.eventsListeners).forEach((function(e){n.off(e)})),!1!==e&&(n.$el[0].swiper=null,i=n,Object.keys(i).forEach((function(e){try{i[e]=null}catch(e){}try{delete i[e]}catch(e){}}))),n.destroyed=!0),null},i.extendDefaults=function(e){C(W,e)},i.installModule=function(e){i.prototype.modules||(i.prototype.modules={});var t=e.name||Object.keys(i.prototype.modules).length+"_"+x();i.prototype.modules[t]=e},i.use=function(e){return Array.isArray(e)?(e.forEach((function(e){return i.installModule(e)})),i):(i.installModule(e),i)},n=i,r=[{key:"extendedDefaults",get:function(){return W}},{key:"defaults",get:function(){return B}}],null&&t(n.prototype,null),r&&t(n,r),i}();Object.keys(F).forEach((function(e){Object.keys(F[e]).forEach((function(t){V.prototype[t]=F[e][t]}))})),V.use([A,P]);var G={update:function(e){var t=this,i=t.params,n=i.slidesPerView,r=i.slidesPerGroup,a=i.centeredSlides,s=t.params.virtual,o=s.addSlidesBefore,l=s.addSlidesAfter,c=t.virtual,d=c.from,u=c.to,h=c.slides,p=c.slidesGrid,f=c.renderSlide,m=c.offset;t.updateActiveIndex();var v,g,b,y=t.activeIndex||0;v=t.rtlTranslate?"right":t.isHorizontal()?"left":"top",a?(g=Math.floor(n/2)+r+l,b=Math.floor(n/2)+r+o):(g=n+(r-1)+l,b=r+o);var w=Math.max((y||0)-b,0),E=Math.min((y||0)+g,h.length-1),_=(t.slidesGrid[w]||0)-(t.slidesGrid[0]||0);function x(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(C(t.virtual,{from:w,to:E,offset:_,slidesGrid:t.slidesGrid}),d===w&&u===E&&!e)return t.slidesGrid!==p&&_!==m&&t.slides.css(v,_+"px"),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:_,from:w,to:E,slides:function(){for(var e=[],t=w;t<=E;t+=1)e.push(h[t]);return e}()}),void(t.params.virtual.renderExternalUpdate&&x());var S=[],T=[];if(e)t.$wrapperEl.find("."+t.params.slideClass).remove();else for(var L=d;L<=u;L+=1)(L<w||L>E)&&t.$wrapperEl.find("."+t.params.slideClass+'[data-swiper-slide-index="'+L+'"]').remove();for(var k=0;k<h.length;k+=1)k>=w&&k<=E&&(void 0===u||e?T.push(k):(k>u&&T.push(k),k<d&&S.push(k)));T.forEach((function(e){t.$wrapperEl.append(f(h[e],e))})),S.sort((function(e,t){return t-e})).forEach((function(e){t.$wrapperEl.prepend(f(h[e],e))})),t.$wrapperEl.children(".swiper-slide").css(v,_+"px"),x()},renderSlide:function(e,t){var i=this,n=i.params.virtual;if(n.cache&&i.virtual.cache[t])return i.virtual.cache[t];var r=n.renderSlide?g(n.renderSlide.call(i,e,t)):g('<div class="'+i.params.slideClass+'" data-swiper-slide-index="'+t+'">'+e+"</div>");return r.attr("data-swiper-slide-index")||r.attr("data-swiper-slide-index",t),n.cache&&(i.virtual.cache[t]=r),r},appendSlide:function(t){var i=this;if("object"==e(t)&&"length"in t)for(var n=0;n<t.length;n+=1)t[n]&&i.virtual.slides.push(t[n]);else i.virtual.slides.push(t);i.virtual.update(!0)},prependSlide:function(e){var t=this,i=t.activeIndex,n=i+1,r=1;if(Array.isArray(e)){for(var a=0;a<e.length;a+=1)e[a]&&t.virtual.slides.unshift(e[a]);n=i+e.length,r=e.length}else t.virtual.slides.unshift(e);if(t.params.virtual.cache){var s=t.virtual.cache,o={};Object.keys(s).forEach((function(e){var t=s[e],i=t.attr("data-swiper-slide-index");i&&t.attr("data-swiper-slide-index",parseInt(i,10)+1),o[parseInt(e,10)+r]=t})),t.virtual.cache=o}t.virtual.update(!0),t.slideTo(n,0)},removeSlide:function(e){var t=this;if(null!=e){var i=t.activeIndex;if(Array.isArray(e))for(var n=e.length-1;n>=0;n-=1)t.virtual.slides.splice(e[n],1),t.params.virtual.cache&&delete t.virtual.cache[e[n]],e[n]<i&&(i-=1),i=Math.max(i,0);else t.virtual.slides.splice(e,1),t.params.virtual.cache&&delete t.virtual.cache[e],e<i&&(i-=1),i=Math.max(i,0);t.virtual.update(!0),t.slideTo(i,0)}},removeAllSlides:function(){var e=this;e.virtual.slides=[],e.params.virtual.cache&&(e.virtual.cache={}),e.virtual.update(!0),e.slideTo(0,0)}},X={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}},create:function(){L(this,{virtual:i({},G,{slides:this.params.virtual.slides,cache:{}})})},on:{beforeInit:function(e){if(e.params.virtual.enabled){e.classNames.push(e.params.containerModifierClass+"virtual");var t={watchSlidesProgress:!0};C(e.params,t),C(e.originalParams,t),e.params.initialSlide||e.virtual.update()}},setTranslate:function(e){e.params.virtual.enabled&&e.virtual.update()}}},Y={handle:function(e){var t=this,i=l(),n=s(),r=t.rtlTranslate,a=e;a.originalEvent&&(a=a.originalEvent);var o=a.keyCode||a.charCode,c=t.params.keyboard.pageUpDown,d=c&&33===o,u=c&&34===o,h=37===o,p=39===o,f=38===o,m=40===o;if(!t.allowSlideNext&&(t.isHorizontal()&&p||t.isVertical()&&m||u))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&h||t.isVertical()&&f||d))return!1;if(!(a.shiftKey||a.altKey||a.ctrlKey||a.metaKey||n.activeElement&&n.activeElement.nodeName&&("input"===n.activeElement.nodeName.toLowerCase()||"textarea"===n.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(d||u||h||p||f||m)){var v=!1;if(t.$el.parents("."+t.params.slideClass).length>0&&0===t.$el.parents("."+t.params.slideActiveClass).length)return;var g=i.innerWidth,b=i.innerHeight,y=t.$el.offset();r&&(y.left-=t.$el[0].scrollLeft);for(var w=[[y.left,y.top],[y.left+t.width,y.top],[y.left,y.top+t.height],[y.left+t.width,y.top+t.height]],E=0;E<w.length;E+=1){var _=w[E];if(_[0]>=0&&_[0]<=g&&_[1]>=0&&_[1]<=b){if(0===_[0]&&0===_[1])continue;v=!0}}if(!v)return}t.isHorizontal()?((d||u||h||p)&&(a.preventDefault?a.preventDefault():a.returnValue=!1),((u||p)&&!r||(d||h)&&r)&&t.slideNext(),((d||h)&&!r||(u||p)&&r)&&t.slidePrev()):((d||u||f||m)&&(a.preventDefault?a.preventDefault():a.returnValue=!1),(u||m)&&t.slideNext(),(d||f)&&t.slidePrev()),t.emit("keyPress",o)}},enable:function(){var e=this,t=s();e.keyboard.enabled||(g(t).on("keydown",e.keyboard.handle),e.keyboard.enabled=!0)},disable:function(){var e=this,t=s();e.keyboard.enabled&&(g(t).off("keydown",e.keyboard.handle),e.keyboard.enabled=!1)}},K={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}},create:function(){L(this,{keyboard:i({enabled:!1},Y)})},on:{init:function(e){e.params.keyboard.enabled&&e.keyboard.enable()},destroy:function(e){e.keyboard.enabled&&e.keyboard.disable()}}},U={lastScrollTime:x(),lastEventBeforeSnap:void 0,recentWheelEvents:[],event:function(){return l().navigator.userAgent.indexOf("firefox")>-1?"DOMMouseScroll":function(){var e=s(),t="onwheel",i=t in e;if(!i){var n=e.createElement("div");n.setAttribute(t,"return;"),i="function"==typeof n.onwheel}return!i&&e.implementation&&e.implementation.hasFeature&&!0!==e.implementation.hasFeature("","")&&(i=e.implementation.hasFeature("Events.wheel","3.0")),i}()?"wheel":"mousewheel"},normalize:function(e){var t=0,i=0,n=0,r=0;return"detail"in e&&(i=e.detail),"wheelDelta"in e&&(i=-e.wheelDelta/120),"wheelDeltaY"in e&&(i=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=i,i=0),n=10*t,r=10*i,"deltaY"in e&&(r=e.deltaY),"deltaX"in e&&(n=e.deltaX),e.shiftKey&&!n&&(n=r,r=0),(n||r)&&e.deltaMode&&(1===e.deltaMode?(n*=40,r*=40):(n*=800,r*=800)),n&&!t&&(t=n<1?-1:1),r&&!i&&(i=r<1?-1:1),{spinX:t,spinY:i,pixelX:n,pixelY:r}},handleMouseEnter:function(){this.mouseEntered=!0},handleMouseLeave:function(){this.mouseEntered=!1},handle:function(e){var t=e,i=this,n=i.params.mousewheel;i.params.cssMode&&t.preventDefault();var r=i.$el;if("container"!==i.params.mousewheel.eventsTarget&&(r=g(i.params.mousewheel.eventsTarget)),!i.mouseEntered&&!r[0].contains(t.target)&&!n.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);var a=0,s=i.rtlTranslate?-1:1,o=U.normalize(t);if(n.forceToAxis)if(i.isHorizontal()){if(!(Math.abs(o.pixelX)>Math.abs(o.pixelY)))return!0;a=-o.pixelX*s}else{if(!(Math.abs(o.pixelY)>Math.abs(o.pixelX)))return!0;a=-o.pixelY}else a=Math.abs(o.pixelX)>Math.abs(o.pixelY)?-o.pixelX*s:-o.pixelY;if(0===a)return!0;n.invert&&(a=-a);var l=i.getTranslate()+a*n.sensitivity;if(l>=i.minTranslate()&&(l=i.minTranslate()),l<=i.maxTranslate()&&(l=i.maxTranslate()),(!!i.params.loop||!(l===i.minTranslate()||l===i.maxTranslate()))&&i.params.nested&&t.stopPropagation(),i.params.freeMode){var c={time:x(),delta:Math.abs(a),direction:Math.sign(a)},d=i.mousewheel.lastEventBeforeSnap,u=d&&c.time<d.time+500&&c.delta<=d.delta&&c.direction===d.direction;if(!u){i.mousewheel.lastEventBeforeSnap=void 0,i.params.loop&&i.loopFix();var h=i.getTranslate()+a*n.sensitivity,p=i.isBeginning,f=i.isEnd;if(h>=i.minTranslate()&&(h=i.minTranslate()),h<=i.maxTranslate()&&(h=i.maxTranslate()),i.setTransition(0),i.setTranslate(h),i.updateProgress(),i.updateActiveIndex(),i.updateSlidesClasses(),(!p&&i.isBeginning||!f&&i.isEnd)&&i.updateSlidesClasses(),i.params.freeModeSticky){clearTimeout(i.mousewheel.timeout),i.mousewheel.timeout=void 0;var m=i.mousewheel.recentWheelEvents;m.length>=15&&m.shift();var v=m.length?m[m.length-1]:void 0,b=m[0];if(m.push(c),v&&(c.delta>v.delta||c.direction!==v.direction))m.splice(0);else if(m.length>=15&&c.time-b.time<500&&b.delta-c.delta>=1&&c.delta<=6){var y=a>0?.8:.2;i.mousewheel.lastEventBeforeSnap=c,m.splice(0),i.mousewheel.timeout=_((function(){i.slideToClosest(i.params.speed,!0,void 0,y)}),0)}i.mousewheel.timeout||(i.mousewheel.timeout=_((function(){i.mousewheel.lastEventBeforeSnap=c,m.splice(0),i.slideToClosest(i.params.speed,!0,void 0,.5)}),500))}if(u||i.emit("scroll",t),i.params.autoplay&&i.params.autoplayDisableOnInteraction&&i.autoplay.stop(),h===i.minTranslate()||h===i.maxTranslate())return!0}}else{var w={time:x(),delta:Math.abs(a),direction:Math.sign(a),raw:e},E=i.mousewheel.recentWheelEvents;E.length>=2&&E.shift();var S=E.length?E[E.length-1]:void 0;if(E.push(w),S?(w.direction!==S.direction||w.delta>S.delta||w.time>S.time+150)&&i.mousewheel.animateSlider(w):i.mousewheel.animateSlider(w),i.mousewheel.releaseScroll(w))return!0}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},animateSlider:function(e){var t=this,i=l();return!(this.params.mousewheel.thresholdDelta&&e.delta<this.params.mousewheel.thresholdDelta||this.params.mousewheel.thresholdTime&&x()-t.mousewheel.lastScrollTime<this.params.mousewheel.thresholdTime||!(e.delta>=6&&x()-t.mousewheel.lastScrollTime<60)&&(e.direction<0?t.isEnd&&!t.params.loop||t.animating||(t.slideNext(),t.emit("scroll",e.raw)):t.isBeginning&&!t.params.loop||t.animating||(t.slidePrev(),t.emit("scroll",e.raw)),t.mousewheel.lastScrollTime=(new i.Date).getTime(),1))},releaseScroll:function(e){var t=this,i=t.params.mousewheel;if(e.direction<0){if(t.isEnd&&!t.params.loop&&i.releaseOnEdges)return!0}else if(t.isBeginning&&!t.params.loop&&i.releaseOnEdges)return!0;return!1},enable:function(){var e=this,t=U.event();if(e.params.cssMode)return e.wrapperEl.removeEventListener(t,e.mousewheel.handle),!0;if(!t)return!1;if(e.mousewheel.enabled)return!1;var i=e.$el;return"container"!==e.params.mousewheel.eventsTarget&&(i=g(e.params.mousewheel.eventsTarget)),i.on("mouseenter",e.mousewheel.handleMouseEnter),i.on("mouseleave",e.mousewheel.handleMouseLeave),i.on(t,e.mousewheel.handle),e.mousewheel.enabled=!0,!0},disable:function(){var e=this,t=U.event();if(e.params.cssMode)return e.wrapperEl.addEventListener(t,e.mousewheel.handle),!0;if(!t)return!1;if(!e.mousewheel.enabled)return!1;var i=e.$el;return"container"!==e.params.mousewheel.eventsTarget&&(i=g(e.params.mousewheel.eventsTarget)),i.off(t,e.mousewheel.handle),e.mousewheel.enabled=!1,!0}},Q={update:function(){var e=this,t=e.params.navigation;if(!e.params.loop){var i=e.navigation,n=i.$nextEl,r=i.$prevEl;r&&r.length>0&&(e.isBeginning?r.addClass(t.disabledClass):r.removeClass(t.disabledClass),r[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass)),n&&n.length>0&&(e.isEnd?n.addClass(t.disabledClass):n.removeClass(t.disabledClass),n[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass))}},onPrevClick:function(e){var t=this;e.preventDefault(),t.isBeginning&&!t.params.loop||t.slidePrev()},onNextClick:function(e){var t=this;e.preventDefault(),t.isEnd&&!t.params.loop||t.slideNext()},init:function(){var e,t,i=this,n=i.params.navigation;(n.nextEl||n.prevEl)&&(n.nextEl&&(e=g(n.nextEl),i.params.uniqueNavElements&&"string"==typeof n.nextEl&&e.length>1&&1===i.$el.find(n.nextEl).length&&(e=i.$el.find(n.nextEl))),n.prevEl&&(t=g(n.prevEl),i.params.uniqueNavElements&&"string"==typeof n.prevEl&&t.length>1&&1===i.$el.find(n.prevEl).length&&(t=i.$el.find(n.prevEl))),e&&e.length>0&&e.on("click",i.navigation.onNextClick),t&&t.length>0&&t.on("click",i.navigation.onPrevClick),C(i.navigation,{$nextEl:e,nextEl:e&&e[0],$prevEl:t,prevEl:t&&t[0]}))},destroy:function(){var e=this,t=e.navigation,i=t.$nextEl,n=t.$prevEl;i&&i.length&&(i.off("click",e.navigation.onNextClick),i.removeClass(e.params.navigation.disabledClass)),n&&n.length&&(n.off("click",e.navigation.onPrevClick),n.removeClass(e.params.navigation.disabledClass))}},J={update:function(){var e=this,t=e.rtl,i=e.params.pagination;if(i.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var n,r=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,a=e.pagination.$el,s=e.params.loop?Math.ceil((r-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?((n=Math.ceil((e.activeIndex-e.loopedSlides)/e.params.slidesPerGroup))>r-1-2*e.loopedSlides&&(n-=r-2*e.loopedSlides),n>s-1&&(n-=s),n<0&&"bullets"!==e.params.paginationType&&(n=s+n)):n=void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,"bullets"===i.type&&e.pagination.bullets&&e.pagination.bullets.length>0){var o,l,c,d=e.pagination.bullets;if(i.dynamicBullets&&(e.pagination.bulletSize=d.eq(0)[e.isHorizontal()?"outerWidth":"outerHeight"](!0),a.css(e.isHorizontal()?"width":"height",e.pagination.bulletSize*(i.dynamicMainBullets+4)+"px"),i.dynamicMainBullets>1&&void 0!==e.previousIndex&&(e.pagination.dynamicBulletIndex+=n-e.previousIndex,e.pagination.dynamicBulletIndex>i.dynamicMainBullets-1?e.pagination.dynamicBulletIndex=i.dynamicMainBullets-1:e.pagination.dynamicBulletIndex<0&&(e.pagination.dynamicBulletIndex=0)),o=n-e.pagination.dynamicBulletIndex,c=((l=o+(Math.min(d.length,i.dynamicMainBullets)-1))+o)/2),d.removeClass(i.bulletActiveClass+" "+i.bulletActiveClass+"-next "+i.bulletActiveClass+"-next-next "+i.bulletActiveClass+"-prev "+i.bulletActiveClass+"-prev-prev "+i.bulletActiveClass+"-main"),a.length>1)d.each((function(e){var t=g(e),r=t.index();r===n&&t.addClass(i.bulletActiveClass),i.dynamicBullets&&(r>=o&&r<=l&&t.addClass(i.bulletActiveClass+"-main"),r===o&&t.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),r===l&&t.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next"))}));else{var u=d.eq(n),h=u.index();if(u.addClass(i.bulletActiveClass),i.dynamicBullets){for(var p=d.eq(o),f=d.eq(l),m=o;m<=l;m+=1)d.eq(m).addClass(i.bulletActiveClass+"-main");if(e.params.loop)if(h>=d.length-i.dynamicMainBullets){for(var v=i.dynamicMainBullets;v>=0;v-=1)d.eq(d.length-v).addClass(i.bulletActiveClass+"-main");d.eq(d.length-i.dynamicMainBullets-1).addClass(i.bulletActiveClass+"-prev")}else p.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),f.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next");else p.prev().addClass(i.bulletActiveClass+"-prev").prev().addClass(i.bulletActiveClass+"-prev-prev"),f.next().addClass(i.bulletActiveClass+"-next").next().addClass(i.bulletActiveClass+"-next-next")}}if(i.dynamicBullets){var b=Math.min(d.length,i.dynamicMainBullets+4),y=(e.pagination.bulletSize*b-e.pagination.bulletSize)/2-c*e.pagination.bulletSize,w=t?"right":"left";d.css(e.isHorizontal()?w:"top",y+"px")}}if("fraction"===i.type&&(a.find("."+i.currentClass).text(i.formatFractionCurrent(n+1)),a.find("."+i.totalClass).text(i.formatFractionTotal(s))),"progressbar"===i.type){var E;E=i.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical";var _=(n+1)/s,x=1,S=1;"horizontal"===E?x=_:S=_,a.find("."+i.progressbarFillClass).transform("translate3d(0,0,0) scaleX("+x+") scaleY("+S+")").transition(e.params.speed)}"custom"===i.type&&i.renderCustom?(a.html(i.renderCustom(e,n+1,s)),e.emit("paginationRender",a[0])):e.emit("paginationUpdate",a[0]),a[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](i.lockClass)}},render:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var i=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,n=e.pagination.$el,r="";if("bullets"===t.type){for(var a=e.params.loop?Math.ceil((i-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length,s=0;s<a;s+=1)t.renderBullet?r+=t.renderBullet.call(e,s,t.bulletClass):r+="<"+t.bulletElement+' class="'+t.bulletClass+'"></'+t.bulletElement+">";n.html(r),e.pagination.bullets=n.find("."+t.bulletClass.replace(/ /g,"."))}"fraction"===t.type&&(r=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):'<span class="'+t.currentClass+'"></span> / <span class="'+t.totalClass+'"></span>',n.html(r)),"progressbar"===t.type&&(r=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):'<span class="'+t.progressbarFillClass+'"></span>',n.html(r)),"custom"!==t.type&&e.emit("paginationRender",e.pagination.$el[0])}},init:function(){var e=this,t=e.params.pagination;if(t.el){var i=g(t.el);0!==i.length&&(e.params.uniqueNavElements&&"string"==typeof t.el&&i.length>1&&(i=e.$el.find(t.el)),"bullets"===t.type&&t.clickable&&i.addClass(t.clickableClass),i.addClass(t.modifierClass+t.type),"bullets"===t.type&&t.dynamicBullets&&(i.addClass(""+t.modifierClass+t.type+"-dynamic"),e.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&i.addClass(t.progressbarOppositeClass),t.clickable&&i.on("click","."+t.bulletClass.replace(/ /g,"."),(function(t){t.preventDefault();var i=g(this).index()*e.params.slidesPerGroup;e.params.loop&&(i+=e.loopedSlides),e.slideTo(i)})),C(e.pagination,{$el:i,el:i[0]}))}},destroy:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var i=e.pagination.$el;i.removeClass(t.hiddenClass),i.removeClass(t.modifierClass+t.type),e.pagination.bullets&&e.pagination.bullets.removeClass(t.bulletActiveClass),t.clickable&&i.off("click","."+t.bulletClass.replace(/ /g,"."))}}},Z={setTranslate:function(){var e=this;if(e.params.scrollbar.el&&e.scrollbar.el){var t=e.scrollbar,i=e.rtlTranslate,n=e.progress,r=t.dragSize,a=t.trackSize,s=t.$dragEl,o=t.$el,l=e.params.scrollbar,c=r,d=(a-r)*n;i?(d=-d)>0?(c=r-d,d=0):-d+r>a&&(c=a+d):d<0?(c=r+d,d=0):d+r>a&&(c=a-d),e.isHorizontal()?(s.transform("translate3d("+d+"px, 0, 0)"),s[0].style.width=c+"px"):(s.transform("translate3d(0px, "+d+"px, 0)"),s[0].style.height=c+"px"),l.hide&&(clearTimeout(e.scrollbar.timeout),o[0].style.opacity=1,e.scrollbar.timeout=setTimeout((function(){o[0].style.opacity=0,o.transition(400)}),1e3))}},setTransition:function(e){var t=this;t.params.scrollbar.el&&t.scrollbar.el&&t.scrollbar.$dragEl.transition(e)},updateSize:function(){var e=this;if(e.params.scrollbar.el&&e.scrollbar.el){var t=e.scrollbar,i=t.$dragEl,n=t.$el;i[0].style.width="",i[0].style.height="";var r,a=e.isHorizontal()?n[0].offsetWidth:n[0].offsetHeight,s=e.size/e.virtualSize,o=s*(a/e.size);r="auto"===e.params.scrollbar.dragSize?a*s:parseInt(e.params.scrollbar.dragSize,10),e.isHorizontal()?i[0].style.width=r+"px":i[0].style.height=r+"px",n[0].style.display=s>=1?"none":"",e.params.scrollbar.hide&&(n[0].style.opacity=0),C(t,{trackSize:a,divider:s,moveDivider:o,dragSize:r}),t.$el[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](e.params.scrollbar.lockClass)}},getPointerPosition:function(e){return this.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientX:e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientY:e.clientY},setDragPosition:function(e){var t,i=this,n=i.scrollbar,r=i.rtlTranslate,a=n.$el,s=n.dragSize,o=n.trackSize,l=n.dragStartPos;t=(n.getPointerPosition(e)-a.offset()[i.isHorizontal()?"left":"top"]-(null!==l?l:s/2))/(o-s),t=Math.max(Math.min(t,1),0),r&&(t=1-t);var c=i.minTranslate()+(i.maxTranslate()-i.minTranslate())*t;i.updateProgress(c),i.setTranslate(c),i.updateActiveIndex(),i.updateSlidesClasses()},onDragStart:function(e){var t=this,i=t.params.scrollbar,n=t.scrollbar,r=t.$wrapperEl,a=n.$el,s=n.$dragEl;t.scrollbar.isTouched=!0,t.scrollbar.dragStartPos=e.target===s[0]||e.target===s?n.getPointerPosition(e)-e.target.getBoundingClientRect()[t.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),r.transition(100),s.transition(100),n.setDragPosition(e),clearTimeout(t.scrollbar.dragTimeout),a.transition(0),i.hide&&a.css("opacity",1),t.params.cssMode&&t.$wrapperEl.css("scroll-snap-type","none"),t.emit("scrollbarDragStart",e)},onDragMove:function(e){var t=this,i=t.scrollbar,n=t.$wrapperEl,r=i.$el,a=i.$dragEl;t.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,i.setDragPosition(e),n.transition(0),r.transition(0),a.transition(0),t.emit("scrollbarDragMove",e))},onDragEnd:function(e){var t=this,i=t.params.scrollbar,n=t.scrollbar,r=t.$wrapperEl,a=n.$el;t.scrollbar.isTouched&&(t.scrollbar.isTouched=!1,t.params.cssMode&&(t.$wrapperEl.css("scroll-snap-type",""),r.transition("")),i.hide&&(clearTimeout(t.scrollbar.dragTimeout),t.scrollbar.dragTimeout=_((function(){a.css("opacity",0),a.transition(400)}),1e3)),t.emit("scrollbarDragEnd",e),i.snapOnRelease&&t.slideToClosest())},enableDraggable:function(){var e=this;if(e.params.scrollbar.el){var t=s(),i=e.scrollbar,n=e.touchEventsTouch,r=e.touchEventsDesktop,a=e.params,o=e.support,l=i.$el[0],c=!(!o.passiveListener||!a.passiveListeners)&&{passive:!1,capture:!1},d=!(!o.passiveListener||!a.passiveListeners)&&{passive:!0,capture:!1};o.touch?(l.addEventListener(n.start,e.scrollbar.onDragStart,c),l.addEventListener(n.move,e.scrollbar.onDragMove,c),l.addEventListener(n.end,e.scrollbar.onDragEnd,d)):(l.addEventListener(r.start,e.scrollbar.onDragStart,c),t.addEventListener(r.move,e.scrollbar.onDragMove,c),t.addEventListener(r.end,e.scrollbar.onDragEnd,d))}},disableDraggable:function(){var e=this;if(e.params.scrollbar.el){var t=s(),i=e.scrollbar,n=e.touchEventsTouch,r=e.touchEventsDesktop,a=e.params,o=e.support,l=i.$el[0],c=!(!o.passiveListener||!a.passiveListeners)&&{passive:!1,capture:!1},d=!(!o.passiveListener||!a.passiveListeners)&&{passive:!0,capture:!1};o.touch?(l.removeEventListener(n.start,e.scrollbar.onDragStart,c),l.removeEventListener(n.move,e.scrollbar.onDragMove,c),l.removeEventListener(n.end,e.scrollbar.onDragEnd,d)):(l.removeEventListener(r.start,e.scrollbar.onDragStart,c),t.removeEventListener(r.move,e.scrollbar.onDragMove,c),t.removeEventListener(r.end,e.scrollbar.onDragEnd,d))}},init:function(){var e=this;if(e.params.scrollbar.el){var t=e.scrollbar,i=e.$el,n=e.params.scrollbar,r=g(n.el);e.params.uniqueNavElements&&"string"==typeof n.el&&r.length>1&&1===i.find(n.el).length&&(r=i.find(n.el));var a=r.find("."+e.params.scrollbar.dragClass);0===a.length&&(a=g('<div class="'+e.params.scrollbar.dragClass+'"></div>'),r.append(a)),C(t,{$el:r,el:r[0],$dragEl:a,dragEl:a[0]}),n.draggable&&t.enableDraggable()}},destroy:function(){this.scrollbar.disableDraggable()}},ee={setTransform:function(e,t){var i=this.rtl,n=g(e),r=i?-1:1,a=n.attr("data-swiper-parallax")||"0",s=n.attr("data-swiper-parallax-x"),o=n.attr("data-swiper-parallax-y"),l=n.attr("data-swiper-parallax-scale"),c=n.attr("data-swiper-parallax-opacity");if(s||o?(s=s||"0",o=o||"0"):this.isHorizontal()?(s=a,o="0"):(o=a,s="0"),s=s.indexOf("%")>=0?parseInt(s,10)*t*r+"%":s*t*r+"px",o=o.indexOf("%")>=0?parseInt(o,10)*t+"%":o*t+"px",null!=c){var d=c-(c-1)*(1-Math.abs(t));n[0].style.opacity=d}if(null==l)n.transform("translate3d("+s+", "+o+", 0px)");else{var u=l-(l-1)*(1-Math.abs(t));n.transform("translate3d("+s+", "+o+", 0px) scale("+u+")")}},setTranslate:function(){var e=this,t=e.$el,i=e.slides,n=e.progress,r=e.snapGrid;t.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((function(t){e.parallax.setTransform(t,n)})),i.each((function(t,i){var a=t.progress;e.params.slidesPerGroup>1&&"auto"!==e.params.slidesPerView&&(a+=Math.ceil(i/2)-n*(r.length-1)),a=Math.min(Math.max(a,-1),1),g(t).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((function(t){e.parallax.setTransform(t,a)}))}))},setTransition:function(e){void 0===e&&(e=this.params.speed),this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((function(t){var i=g(t),n=parseInt(i.attr("data-swiper-parallax-duration"),10)||e;0===e&&(n=0),i.transition(n)}))}},te={getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,i=e.targetTouches[0].pageY,n=e.targetTouches[1].pageX,r=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(n-t,2)+Math.pow(r-i,2))},onGestureStart:function(e){var t=this,i=t.support,n=t.params.zoom,r=t.zoom,a=r.gesture;if(r.fakeGestureTouched=!1,r.fakeGestureMoved=!1,!i.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;r.fakeGestureTouched=!0,a.scaleStart=te.getDistanceBetweenTouches(e)}a.$slideEl&&a.$slideEl.length||(a.$slideEl=g(e.target).closest("."+t.params.slideClass),0===a.$slideEl.length&&(a.$slideEl=t.slides.eq(t.activeIndex)),a.$imageEl=a.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),a.$imageWrapEl=a.$imageEl.parent("."+n.containerClass),a.maxRatio=a.$imageWrapEl.attr("data-swiper-zoom")||n.maxRatio,0!==a.$imageWrapEl.length)?(a.$imageEl&&a.$imageEl.transition(0),t.zoom.isScaling=!0):a.$imageEl=void 0},onGestureChange:function(e){var t=this,i=t.support,n=t.params.zoom,r=t.zoom,a=r.gesture;if(!i.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;r.fakeGestureMoved=!0,a.scaleMove=te.getDistanceBetweenTouches(e)}a.$imageEl&&0!==a.$imageEl.length?(i.gestures?r.scale=e.scale*r.currentScale:r.scale=a.scaleMove/a.scaleStart*r.currentScale,r.scale>a.maxRatio&&(r.scale=a.maxRatio-1+Math.pow(r.scale-a.maxRatio+1,.5)),r.scale<n.minRatio&&(r.scale=n.minRatio+1-Math.pow(n.minRatio-r.scale+1,.5)),a.$imageEl.transform("translate3d(0,0,0) scale("+r.scale+")")):"gesturechange"===e.type&&r.onGestureStart(e)},onGestureEnd:function(e){var t=this,i=t.device,n=t.support,r=t.params.zoom,a=t.zoom,s=a.gesture;if(!n.gestures){if(!a.fakeGestureTouched||!a.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!i.android)return;a.fakeGestureTouched=!1,a.fakeGestureMoved=!1}s.$imageEl&&0!==s.$imageEl.length&&(a.scale=Math.max(Math.min(a.scale,s.maxRatio),r.minRatio),s.$imageEl.transition(t.params.speed).transform("translate3d(0,0,0) scale("+a.scale+")"),a.currentScale=a.scale,a.isScaling=!1,1===a.scale&&(s.$slideEl=void 0))},onTouchStart:function(e){var t=this.device,i=this.zoom,n=i.gesture,r=i.image;n.$imageEl&&0!==n.$imageEl.length&&(r.isTouched||(t.android&&e.cancelable&&e.preventDefault(),r.isTouched=!0,r.touchesStart.x="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,r.touchesStart.y="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove:function(e){var t=this,i=t.zoom,n=i.gesture,r=i.image,a=i.velocity;if(n.$imageEl&&0!==n.$imageEl.length&&(t.allowClick=!1,r.isTouched&&n.$slideEl)){r.isMoved||(r.width=n.$imageEl[0].offsetWidth,r.height=n.$imageEl[0].offsetHeight,r.startX=S(n.$imageWrapEl[0],"x")||0,r.startY=S(n.$imageWrapEl[0],"y")||0,n.slideWidth=n.$slideEl[0].offsetWidth,n.slideHeight=n.$slideEl[0].offsetHeight,n.$imageWrapEl.transition(0),t.rtl&&(r.startX=-r.startX,r.startY=-r.startY));var s=r.width*i.scale,o=r.height*i.scale;if(!(s<n.slideWidth&&o<n.slideHeight)){if(r.minX=Math.min(n.slideWidth/2-s/2,0),r.maxX=-r.minX,r.minY=Math.min(n.slideHeight/2-o/2,0),r.maxY=-r.minY,r.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,r.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!r.isMoved&&!i.isScaling){if(t.isHorizontal()&&(Math.floor(r.minX)===Math.floor(r.startX)&&r.touchesCurrent.x<r.touchesStart.x||Math.floor(r.maxX)===Math.floor(r.startX)&&r.touchesCurrent.x>r.touchesStart.x))return void(r.isTouched=!1);if(!t.isHorizontal()&&(Math.floor(r.minY)===Math.floor(r.startY)&&r.touchesCurrent.y<r.touchesStart.y||Math.floor(r.maxY)===Math.floor(r.startY)&&r.touchesCurrent.y>r.touchesStart.y))return void(r.isTouched=!1)}e.cancelable&&e.preventDefault(),e.stopPropagation(),r.isMoved=!0,r.currentX=r.touchesCurrent.x-r.touchesStart.x+r.startX,r.currentY=r.touchesCurrent.y-r.touchesStart.y+r.startY,r.currentX<r.minX&&(r.currentX=r.minX+1-Math.pow(r.minX-r.currentX+1,.8)),r.currentX>r.maxX&&(r.currentX=r.maxX-1+Math.pow(r.currentX-r.maxX+1,.8)),r.currentY<r.minY&&(r.currentY=r.minY+1-Math.pow(r.minY-r.currentY+1,.8)),r.currentY>r.maxY&&(r.currentY=r.maxY-1+Math.pow(r.currentY-r.maxY+1,.8)),a.prevPositionX||(a.prevPositionX=r.touchesCurrent.x),a.prevPositionY||(a.prevPositionY=r.touchesCurrent.y),a.prevTime||(a.prevTime=Date.now()),a.x=(r.touchesCurrent.x-a.prevPositionX)/(Date.now()-a.prevTime)/2,a.y=(r.touchesCurrent.y-a.prevPositionY)/(Date.now()-a.prevTime)/2,Math.abs(r.touchesCurrent.x-a.prevPositionX)<2&&(a.x=0),Math.abs(r.touchesCurrent.y-a.prevPositionY)<2&&(a.y=0),a.prevPositionX=r.touchesCurrent.x,a.prevPositionY=r.touchesCurrent.y,a.prevTime=Date.now(),n.$imageWrapEl.transform("translate3d("+r.currentX+"px, "+r.currentY+"px,0)")}}},onTouchEnd:function(){var e=this.zoom,t=e.gesture,i=e.image,n=e.velocity;if(t.$imageEl&&0!==t.$imageEl.length){if(!i.isTouched||!i.isMoved)return i.isTouched=!1,void(i.isMoved=!1);i.isTouched=!1,i.isMoved=!1;var r=300,a=300,s=n.x*r,o=i.currentX+s,l=n.y*a,c=i.currentY+l;0!==n.x&&(r=Math.abs((o-i.currentX)/n.x)),0!==n.y&&(a=Math.abs((c-i.currentY)/n.y));var d=Math.max(r,a);i.currentX=o,i.currentY=c;var u=i.width*e.scale,h=i.height*e.scale;i.minX=Math.min(t.slideWidth/2-u/2,0),i.maxX=-i.minX,i.minY=Math.min(t.slideHeight/2-h/2,0),i.maxY=-i.minY,i.currentX=Math.max(Math.min(i.currentX,i.maxX),i.minX),i.currentY=Math.max(Math.min(i.currentY,i.maxY),i.minY),t.$imageWrapEl.transition(d).transform("translate3d("+i.currentX+"px, "+i.currentY+"px,0)")}},onTransitionEnd:function(){var e=this,t=e.zoom,i=t.gesture;i.$slideEl&&e.previousIndex!==e.activeIndex&&(i.$imageEl&&i.$imageEl.transform("translate3d(0,0,0) scale(1)"),i.$imageWrapEl&&i.$imageWrapEl.transform("translate3d(0,0,0)"),t.scale=1,t.currentScale=1,i.$slideEl=void 0,i.$imageEl=void 0,i.$imageWrapEl=void 0)},toggle:function(e){var t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in:function(e){var t,i,n,r,a,s,o,l,c,d,u,h,p,f,m,v,g=this,b=g.zoom,y=g.params.zoom,w=b.gesture,E=b.image;w.$slideEl||(g.params.virtual&&g.params.virtual.enabled&&g.virtual?w.$slideEl=g.$wrapperEl.children("."+g.params.slideActiveClass):w.$slideEl=g.slides.eq(g.activeIndex),w.$imageEl=w.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),w.$imageWrapEl=w.$imageEl.parent("."+y.containerClass)),w.$imageEl&&0!==w.$imageEl.length&&(w.$slideEl.addClass(""+y.zoomedSlideClass),void 0===E.touchesStart.x&&e?(t="touchend"===e.type?e.changedTouches[0].pageX:e.pageX,i="touchend"===e.type?e.changedTouches[0].pageY:e.pageY):(t=E.touchesStart.x,i=E.touchesStart.y),b.scale=w.$imageWrapEl.attr("data-swiper-zoom")||y.maxRatio,b.currentScale=w.$imageWrapEl.attr("data-swiper-zoom")||y.maxRatio,e?(m=w.$slideEl[0].offsetWidth,v=w.$slideEl[0].offsetHeight,n=w.$slideEl.offset().left+m/2-t,r=w.$slideEl.offset().top+v/2-i,o=w.$imageEl[0].offsetWidth,l=w.$imageEl[0].offsetHeight,c=o*b.scale,d=l*b.scale,p=-(u=Math.min(m/2-c/2,0)),f=-(h=Math.min(v/2-d/2,0)),(a=n*b.scale)<u&&(a=u),a>p&&(a=p),(s=r*b.scale)<h&&(s=h),s>f&&(s=f)):(a=0,s=0),w.$imageWrapEl.transition(300).transform("translate3d("+a+"px, "+s+"px,0)"),w.$imageEl.transition(300).transform("translate3d(0,0,0) scale("+b.scale+")"))},out:function(){var e=this,t=e.zoom,i=e.params.zoom,n=t.gesture;n.$slideEl||(e.params.virtual&&e.params.virtual.enabled&&e.virtual?n.$slideEl=e.$wrapperEl.children("."+e.params.slideActiveClass):n.$slideEl=e.slides.eq(e.activeIndex),n.$imageEl=n.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),n.$imageWrapEl=n.$imageEl.parent("."+i.containerClass)),n.$imageEl&&0!==n.$imageEl.length&&(t.scale=1,t.currentScale=1,n.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),n.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),n.$slideEl.removeClass(""+i.zoomedSlideClass),n.$slideEl=void 0)},toggleGestures:function(e){var t=this,i=t.zoom,n=i.slideSelector,r=i.passiveListener;t.$wrapperEl[e]("gesturestart",n,i.onGestureStart,r),t.$wrapperEl[e]("gesturechange",n,i.onGestureChange,r),t.$wrapperEl[e]("gestureend",n,i.onGestureEnd,r)},enableGestures:function(){this.zoom.gesturesEnabled||(this.zoom.gesturesEnabled=!0,this.zoom.toggleGestures("on"))},disableGestures:function(){this.zoom.gesturesEnabled&&(this.zoom.gesturesEnabled=!1,this.zoom.toggleGestures("off"))},enable:function(){var e=this,t=e.support,i=e.zoom;if(!i.enabled){i.enabled=!0;var n=!("touchstart"!==e.touchEvents.start||!t.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1},r=!t.passiveListener||{passive:!1,capture:!0},a="."+e.params.slideClass;e.zoom.passiveListener=n,e.zoom.slideSelector=a,t.gestures?(e.$wrapperEl.on(e.touchEvents.start,e.zoom.enableGestures,n),e.$wrapperEl.on(e.touchEvents.end,e.zoom.disableGestures,n)):"touchstart"===e.touchEvents.start&&(e.$wrapperEl.on(e.touchEvents.start,a,i.onGestureStart,n),e.$wrapperEl.on(e.touchEvents.move,a,i.onGestureChange,r),e.$wrapperEl.on(e.touchEvents.end,a,i.onGestureEnd,n),e.touchEvents.cancel&&e.$wrapperEl.on(e.touchEvents.cancel,a,i.onGestureEnd,n)),e.$wrapperEl.on(e.touchEvents.move,"."+e.params.zoom.containerClass,i.onTouchMove,r)}},disable:function(){var e=this,t=e.zoom;if(t.enabled){var i=e.support;e.zoom.enabled=!1;var n=!("touchstart"!==e.touchEvents.start||!i.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1},r=!i.passiveListener||{passive:!1,capture:!0},a="."+e.params.slideClass;i.gestures?(e.$wrapperEl.off(e.touchEvents.start,e.zoom.enableGestures,n),e.$wrapperEl.off(e.touchEvents.end,e.zoom.disableGestures,n)):"touchstart"===e.touchEvents.start&&(e.$wrapperEl.off(e.touchEvents.start,a,t.onGestureStart,n),e.$wrapperEl.off(e.touchEvents.move,a,t.onGestureChange,r),e.$wrapperEl.off(e.touchEvents.end,a,t.onGestureEnd,n),e.touchEvents.cancel&&e.$wrapperEl.off(e.touchEvents.cancel,a,t.onGestureEnd,n)),e.$wrapperEl.off(e.touchEvents.move,"."+e.params.zoom.containerClass,t.onTouchMove,r)}}},ie={loadInSlide:function(e,t){void 0===t&&(t=!0);var i=this,n=i.params.lazy;if(void 0!==e&&0!==i.slides.length){var r=i.virtual&&i.params.virtual.enabled?i.$wrapperEl.children("."+i.params.slideClass+'[data-swiper-slide-index="'+e+'"]'):i.slides.eq(e),a=r.find("."+n.elementClass+":not(."+n.loadedClass+"):not(."+n.loadingClass+")");!r.hasClass(n.elementClass)||r.hasClass(n.loadedClass)||r.hasClass(n.loadingClass)||a.push(r[0]),0!==a.length&&a.each((function(e){var a=g(e);a.addClass(n.loadingClass);var s=a.attr("data-background"),o=a.attr("data-src"),l=a.attr("data-srcset"),c=a.attr("data-sizes"),d=a.parent("picture");i.loadImage(a[0],o||s,l,c,!1,(function(){if(null!=i&&i&&(!i||i.params)&&!i.destroyed){if(s?(a.css("background-image",'url("'+s+'")'),a.removeAttr("data-background")):(l&&(a.attr("srcset",l),a.removeAttr("data-srcset")),c&&(a.attr("sizes",c),a.removeAttr("data-sizes")),d.length&&d.children("source").each((function(e){var t=g(e);t.attr("data-srcset")&&(t.attr("srcset",t.attr("data-srcset")),t.removeAttr("data-srcset"))})),o&&(a.attr("src",o),a.removeAttr("data-src"))),a.addClass(n.loadedClass).removeClass(n.loadingClass),r.find("."+n.preloaderClass).remove(),i.params.loop&&t){var e=r.attr("data-swiper-slide-index");if(r.hasClass(i.params.slideDuplicateClass)){var u=i.$wrapperEl.children('[data-swiper-slide-index="'+e+'"]:not(.'+i.params.slideDuplicateClass+")");i.lazy.loadInSlide(u.index(),!1)}else{var h=i.$wrapperEl.children("."+i.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]');i.lazy.loadInSlide(h.index(),!1)}}i.emit("lazyImageReady",r[0],a[0]),i.params.autoHeight&&i.updateAutoHeight()}})),i.emit("lazyImageLoad",r[0],a[0])}))}},load:function(){var e=this,t=e.$wrapperEl,i=e.params,n=e.slides,r=e.activeIndex,a=e.virtual&&i.virtual.enabled,s=i.lazy,o=i.slidesPerView;function l(e){if(a){if(t.children("."+i.slideClass+'[data-swiper-slide-index="'+e+'"]').length)return!0}else if(n[e])return!0;return!1}function c(e){return a?g(e).attr("data-swiper-slide-index"):g(e).index()}if("auto"===o&&(o=0),e.lazy.initialImageLoaded||(e.lazy.initialImageLoaded=!0),e.params.watchSlidesVisibility)t.children("."+i.slideVisibleClass).each((function(t){var i=a?g(t).attr("data-swiper-slide-index"):g(t).index();e.lazy.loadInSlide(i)}));else if(o>1)for(var d=r;d<r+o;d+=1)l(d)&&e.lazy.loadInSlide(d);else e.lazy.loadInSlide(r);if(s.loadPrevNext)if(o>1||s.loadPrevNextAmount&&s.loadPrevNextAmount>1){for(var u=s.loadPrevNextAmount,h=o,p=Math.min(r+h+Math.max(u,h),n.length),f=Math.max(r-Math.max(h,u),0),m=r+o;m<p;m+=1)l(m)&&e.lazy.loadInSlide(m);for(var v=f;v<r;v+=1)l(v)&&e.lazy.loadInSlide(v)}else{var b=t.children("."+i.slideNextClass);b.length>0&&e.lazy.loadInSlide(c(b));var y=t.children("."+i.slidePrevClass);y.length>0&&e.lazy.loadInSlide(c(y))}},checkInViewOnLoad:function(){var e=l(),t=this;if(t&&!t.destroyed){var i=t.params.lazy.scrollingElement?g(t.params.lazy.scrollingElement):g(e),n=i[0]===e,r=n?e.innerWidth:i[0].offsetWidth,a=n?e.innerHeight:i[0].offsetHeight,s=t.$el.offset(),o=!1;t.rtlTranslate&&(s.left-=t.$el[0].scrollLeft);for(var c=[[s.left,s.top],[s.left+t.width,s.top],[s.left,s.top+t.height],[s.left+t.width,s.top+t.height]],d=0;d<c.length;d+=1){var u=c[d];if(u[0]>=0&&u[0]<=r&&u[1]>=0&&u[1]<=a){if(0===u[0]&&0===u[1])continue;o=!0}}o?(t.lazy.load(),i.off("scroll",t.lazy.checkInViewOnLoad)):t.lazy.scrollHandlerAttached||(t.lazy.scrollHandlerAttached=!0,i.on("scroll",t.lazy.checkInViewOnLoad))}}},ne={LinearSpline:function(e,t){var i,n,r,a,s;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(s=function(e,t){for(n=-1,i=e.length;i-n>1;)e[r=i+n>>1]<=t?n=r:i=r;return i}(this.x,e),a=s-1,(e-this.x[a])*(this.y[s]-this.y[a])/(this.x[s]-this.x[a])+this.y[a]):0},this},getInterpolateFunction:function(e){var t=this;t.controller.spline||(t.controller.spline=t.params.loop?new ne.LinearSpline(t.slidesGrid,e.slidesGrid):new ne.LinearSpline(t.snapGrid,e.snapGrid))},setTranslate:function(e,t){var i,n,r=this,a=r.controller.control,s=r.constructor;function o(e){var t=r.rtlTranslate?-r.translate:r.translate;"slide"===r.params.controller.by&&(r.controller.getInterpolateFunction(e),n=-r.controller.spline.interpolate(-t)),n&&"container"!==r.params.controller.by||(i=(e.maxTranslate()-e.minTranslate())/(r.maxTranslate()-r.minTranslate()),n=(t-r.minTranslate())*i+e.minTranslate()),r.params.controller.inverse&&(n=e.maxTranslate()-n),e.updateProgress(n),e.setTranslate(n,r),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(a))for(var l=0;l<a.length;l+=1)a[l]!==t&&a[l]instanceof s&&o(a[l]);else a instanceof s&&t!==a&&o(a)},setTransition:function(e,t){var i,n=this,r=n.constructor,a=n.controller.control;function s(t){t.setTransition(e,n),0!==e&&(t.transitionStart(),t.params.autoHeight&&_((function(){t.updateAutoHeight()})),t.$wrapperEl.transitionEnd((function(){a&&(t.params.loop&&"slide"===n.params.controller.by&&t.loopFix(),t.transitionEnd())})))}if(Array.isArray(a))for(i=0;i<a.length;i+=1)a[i]!==t&&a[i]instanceof r&&s(a[i]);else a instanceof r&&t!==a&&s(a)}},re={getRandomNumber:function(e){return void 0===e&&(e=16),"x".repeat(e).replace(/x/g,(function(){return Math.round(16*Math.random()).toString(16)}))},makeElFocusable:function(e){return e.attr("tabIndex","0"),e},makeElNotFocusable:function(e){return e.attr("tabIndex","-1"),e},addElRole:function(e,t){return e.attr("role",t),e},addElRoleDescription:function(e,t){return e.attr("aria-role-description",t),e},addElControls:function(e,t){return e.attr("aria-controls",t),e},addElLabel:function(e,t){return e.attr("aria-label",t),e},addElId:function(e,t){return e.attr("id",t),e},addElLive:function(e,t){return e.attr("aria-live",t),e},disableEl:function(e){return e.attr("aria-disabled",!0),e},enableEl:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(e){var t=this,i=t.params.a11y;if(13===e.keyCode){var n=g(e.target);t.navigation&&t.navigation.$nextEl&&n.is(t.navigation.$nextEl)&&(t.isEnd&&!t.params.loop||t.slideNext(),t.isEnd?t.a11y.notify(i.lastSlideMessage):t.a11y.notify(i.nextSlideMessage)),t.navigation&&t.navigation.$prevEl&&n.is(t.navigation.$prevEl)&&(t.isBeginning&&!t.params.loop||t.slidePrev(),t.isBeginning?t.a11y.notify(i.firstSlideMessage):t.a11y.notify(i.prevSlideMessage)),t.pagination&&n.is("."+t.params.pagination.bulletClass.replace(/ /g,"."))&&n[0].click()}},notify:function(e){var t=this.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},updateNavigation:function(){var e=this;if(!e.params.loop&&e.navigation){var t=e.navigation,i=t.$nextEl,n=t.$prevEl;n&&n.length>0&&(e.isBeginning?(e.a11y.disableEl(n),e.a11y.makeElNotFocusable(n)):(e.a11y.enableEl(n),e.a11y.makeElFocusable(n))),i&&i.length>0&&(e.isEnd?(e.a11y.disableEl(i),e.a11y.makeElNotFocusable(i)):(e.a11y.enableEl(i),e.a11y.makeElFocusable(i)))}},updatePagination:function(){var e=this,t=e.params.a11y;e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.bullets.each((function(i){var n=g(i);e.a11y.makeElFocusable(n),e.params.pagination.renderBullet||(e.a11y.addElRole(n,"button"),e.a11y.addElLabel(n,t.paginationBulletMessage.replace(/\{\{index\}\}/,n.index()+1)))}))},init:function(){var e=this,t=e.params.a11y;e.$el.append(e.a11y.liveRegion);var i=e.$el;t.containerRoleDescriptionMessage&&e.a11y.addElRoleDescription(i,t.containerRoleDescriptionMessage),t.containerMessage&&e.a11y.addElLabel(i,t.containerMessage);var n,r,a,s=e.$wrapperEl,o=s.attr("id")||"swiper-wrapper-"+e.a11y.getRandomNumber(16);e.a11y.addElId(s,o),n=e.params.autoplay&&e.params.autoplay.enabled?"off":"polite",e.a11y.addElLive(s,n),t.itemRoleDescriptionMessage&&e.a11y.addElRoleDescription(g(e.slides),t.itemRoleDescriptionMessage),e.a11y.addElRole(g(e.slides),"group"),e.slides.each((function(t){var i=g(t);e.a11y.addElLabel(i,i.index()+1+" / "+e.slides.length)})),e.navigation&&e.navigation.$nextEl&&(r=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(a=e.navigation.$prevEl),r&&r.length&&(e.a11y.makeElFocusable(r),"BUTTON"!==r[0].tagName&&(e.a11y.addElRole(r,"button"),r.on("keydown",e.a11y.onEnterKey)),e.a11y.addElLabel(r,t.nextSlideMessage),e.a11y.addElControls(r,o)),a&&a.length&&(e.a11y.makeElFocusable(a),"BUTTON"!==a[0].tagName&&(e.a11y.addElRole(a,"button"),a.on("keydown",e.a11y.onEnterKey)),e.a11y.addElLabel(a,t.prevSlideMessage),e.a11y.addElControls(a,o)),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.on("keydown","."+e.params.pagination.bulletClass.replace(/ /g,"."),e.a11y.onEnterKey)},destroy:function(){var e,t,i=this;i.a11y.liveRegion&&i.a11y.liveRegion.length>0&&i.a11y.liveRegion.remove(),i.navigation&&i.navigation.$nextEl&&(e=i.navigation.$nextEl),i.navigation&&i.navigation.$prevEl&&(t=i.navigation.$prevEl),e&&e.off("keydown",i.a11y.onEnterKey),t&&t.off("keydown",i.a11y.onEnterKey),i.pagination&&i.params.pagination.clickable&&i.pagination.bullets&&i.pagination.bullets.length&&i.pagination.$el.off("keydown","."+i.params.pagination.bulletClass.replace(/ /g,"."),i.a11y.onEnterKey)}},ae={init:function(){var e=this,t=l();if(e.params.history){if(!t.history||!t.history.pushState)return e.params.history.enabled=!1,void(e.params.hashNavigation.enabled=!0);var i=e.history;i.initialized=!0,i.paths=ae.getPathValues(e.params.url),(i.paths.key||i.paths.value)&&(i.scrollToSlide(0,i.paths.value,e.params.runCallbacksOnInit),e.params.history.replaceState||t.addEventListener("popstate",e.history.setHistoryPopState))}},destroy:function(){var e=l();this.params.history.replaceState||e.removeEventListener("popstate",this.history.setHistoryPopState)},setHistoryPopState:function(){var e=this;e.history.paths=ae.getPathValues(e.params.url),e.history.scrollToSlide(e.params.speed,e.history.paths.value,!1)},getPathValues:function(e){var t=l(),i=(e?new URL(e):t.location).pathname.slice(1).split("/").filter((function(e){return""!==e})),n=i.length;return{key:i[n-2],value:i[n-1]}},setHistory:function(e,t){var i=this,n=l();if(i.history.initialized&&i.params.history.enabled){var r;r=i.params.url?new URL(i.params.url):n.location;var a=i.slides.eq(t),s=ae.slugify(a.attr("data-history"));r.pathname.includes(e)||(s=e+"/"+s);var o=n.history.state;o&&o.value===s||(i.params.history.replaceState?n.history.replaceState({value:s},null,s):n.history.pushState({value:s},null,s))}},slugify:function(e){return e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,i){var n=this;if(t)for(var r=0,a=n.slides.length;r<a;r+=1){var s=n.slides.eq(r);if(ae.slugify(s.attr("data-history"))===t&&!s.hasClass(n.params.slideDuplicateClass)){var o=s.index();n.slideTo(o,e,i)}}else n.slideTo(0,e,i)}},se={onHashCange:function(){var e=this,t=s();e.emit("hashChange");var i=t.location.hash.replace("#","");if(i!==e.slides.eq(e.activeIndex).attr("data-hash")){var n=e.$wrapperEl.children("."+e.params.slideClass+'[data-hash="'+i+'"]').index();if(void 0===n)return;e.slideTo(n)}},setHash:function(){var e=this,t=l(),i=s();if(e.hashNavigation.initialized&&e.params.hashNavigation.enabled)if(e.params.hashNavigation.replaceState&&t.history&&t.history.replaceState)t.history.replaceState(null,null,"#"+e.slides.eq(e.activeIndex).attr("data-hash")||""),e.emit("hashSet");else{var n=e.slides.eq(e.activeIndex),r=n.attr("data-hash")||n.attr("data-history");i.location.hash=r||"",e.emit("hashSet")}},init:function(){var e=this,t=s(),i=l();if(!(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)){e.hashNavigation.initialized=!0;var n=t.location.hash.replace("#","");if(n)for(var r=0,a=e.slides.length;r<a;r+=1){var o=e.slides.eq(r);if((o.attr("data-hash")||o.attr("data-history"))===n&&!o.hasClass(e.params.slideDuplicateClass)){var c=o.index();e.slideTo(c,0,e.params.runCallbacksOnInit,!0)}}e.params.hashNavigation.watchState&&g(i).on("hashchange",e.hashNavigation.onHashCange)}},destroy:function(){var e=l();this.params.hashNavigation.watchState&&g(e).off("hashchange",this.hashNavigation.onHashCange)}},oe={run:function(){var e=this,t=e.slides.eq(e.activeIndex),i=e.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(i=t.attr("data-swiper-autoplay")||e.params.autoplay.delay),clearTimeout(e.autoplay.timeout),e.autoplay.timeout=_((function(){var t;e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),t=e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(t=e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit("autoplay")):(t=e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.params.loop?(e.loopFix(),t=e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(t=e.slideTo(0,e.params.speed,!0,!0),e.emit("autoplay")):(t=e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")),(e.params.cssMode&&e.autoplay.running||!1===t)&&e.autoplay.run()}),i)},start:function(){var e=this;return void 0===e.autoplay.timeout&&!e.autoplay.running&&(e.autoplay.running=!0,e.emit("autoplayStart"),e.autoplay.run(),!0)},stop:function(){var e=this;return!!e.autoplay.running&&void 0!==e.autoplay.timeout&&(e.autoplay.timeout&&(clearTimeout(e.autoplay.timeout),e.autoplay.timeout=void 0),e.autoplay.running=!1,e.emit("autoplayStop"),!0)},pause:function(e){var t=this;t.autoplay.running&&(t.autoplay.paused||(t.autoplay.timeout&&clearTimeout(t.autoplay.timeout),t.autoplay.paused=!0,0!==e&&t.params.autoplay.waitForTransition?(t.$wrapperEl[0].addEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].addEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd)):(t.autoplay.paused=!1,t.autoplay.run())))},onVisibilityChange:function(){var e=this,t=s();"hidden"===t.visibilityState&&e.autoplay.running&&e.autoplay.pause(),"visible"===t.visibilityState&&e.autoplay.paused&&(e.autoplay.run(),e.autoplay.paused=!1)},onTransitionEnd:function(e){var t=this;t&&!t.destroyed&&t.$wrapperEl&&e.target===t.$wrapperEl[0]&&(t.$wrapperEl[0].removeEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].removeEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd),t.autoplay.paused=!1,t.autoplay.running?t.autoplay.run():t.autoplay.stop())}},le={setTranslate:function(){for(var e=this,t=e.slides,i=0;i<t.length;i+=1){var n=e.slides.eq(i),r=-n[0].swiperSlideOffset;e.params.virtualTranslate||(r-=e.translate);var a=0;e.isHorizontal()||(a=r,r=0);var s=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(n[0].progress),0):1+Math.min(Math.max(n[0].progress,-1),0);n.css({opacity:s}).transform("translate3d("+r+"px, "+a+"px, 0px)")}},setTransition:function(e){var t=this,i=t.slides,n=t.$wrapperEl;if(i.transition(e),t.params.virtualTranslate&&0!==e){var r=!1;i.transitionEnd((function(){if(!r&&t&&!t.destroyed){r=!0,t.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],i=0;i<e.length;i+=1)n.trigger(e[i])}}))}}},ce={setTranslate:function(){var e,t=this,i=t.$el,n=t.$wrapperEl,r=t.slides,a=t.width,s=t.height,o=t.rtlTranslate,l=t.size,c=t.browser,d=t.params.cubeEffect,u=t.isHorizontal(),h=t.virtual&&t.params.virtual.enabled,p=0;d.shadow&&(u?(0===(e=n.find(".swiper-cube-shadow")).length&&(e=g('<div class="swiper-cube-shadow"></div>'),n.append(e)),e.css({height:a+"px"})):0===(e=i.find(".swiper-cube-shadow")).length&&(e=g('<div class="swiper-cube-shadow"></div>'),i.append(e)));for(var f=0;f<r.length;f+=1){var m=r.eq(f),v=f;h&&(v=parseInt(m.attr("data-swiper-slide-index"),10));var b=90*v,y=Math.floor(b/360);o&&(b=-b,y=Math.floor(-b/360));var w=Math.max(Math.min(m[0].progress,1),-1),E=0,_=0,x=0;v%4==0?(E=4*-y*l,x=0):(v-1)%4==0?(E=0,x=4*-y*l):(v-2)%4==0?(E=l+4*y*l,x=l):(v-3)%4==0&&(E=-l,x=3*l+4*l*y),o&&(E=-E),u||(_=E,E=0);var S="rotateX("+(u?0:-b)+"deg) rotateY("+(u?b:0)+"deg) translate3d("+E+"px, "+_+"px, "+x+"px)";if(w<=1&&w>-1&&(p=90*v+90*w,o&&(p=90*-v-90*w)),m.transform(S),d.slideShadows){var T=u?m.find(".swiper-slide-shadow-left"):m.find(".swiper-slide-shadow-top"),C=u?m.find(".swiper-slide-shadow-right"):m.find(".swiper-slide-shadow-bottom");0===T.length&&(T=g('<div class="swiper-slide-shadow-'+(u?"left":"top")+'"></div>'),m.append(T)),0===C.length&&(C=g('<div class="swiper-slide-shadow-'+(u?"right":"bottom")+'"></div>'),m.append(C)),T.length&&(T[0].style.opacity=Math.max(-w,0)),C.length&&(C[0].style.opacity=Math.max(w,0))}}if(n.css({"-webkit-transform-origin":"50% 50% -"+l/2+"px","-moz-transform-origin":"50% 50% -"+l/2+"px","-ms-transform-origin":"50% 50% -"+l/2+"px","transform-origin":"50% 50% -"+l/2+"px"}),d.shadow)if(u)e.transform("translate3d(0px, "+(a/2+d.shadowOffset)+"px, "+-a/2+"px) rotateX(90deg) rotateZ(0deg) scale("+d.shadowScale+")");else{var L=Math.abs(p)-90*Math.floor(Math.abs(p)/90),k=1.5-(Math.sin(2*L*Math.PI/360)/2+Math.cos(2*L*Math.PI/360)/2),O=d.shadowScale,M=d.shadowScale/k,A=d.shadowOffset;e.transform("scale3d("+O+", 1, "+M+") translate3d(0px, "+(s/2+A)+"px, "+-s/2/M+"px) rotateX(-90deg)")}var I=c.isSafari||c.isWebView?-l/2:0;n.transform("translate3d(0px,0,"+I+"px) rotateX("+(t.isHorizontal()?0:p)+"deg) rotateY("+(t.isHorizontal()?-p:0)+"deg)")},setTransition:function(e){var t=this,i=t.$el;t.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),t.params.cubeEffect.shadow&&!t.isHorizontal()&&i.find(".swiper-cube-shadow").transition(e)}},de={setTranslate:function(){for(var e=this,t=e.slides,i=e.rtlTranslate,n=0;n<t.length;n+=1){var r=t.eq(n),a=r[0].progress;e.params.flipEffect.limitRotation&&(a=Math.max(Math.min(r[0].progress,1),-1));var s=-180*a,o=0,l=-r[0].swiperSlideOffset,c=0;if(e.isHorizontal()?i&&(s=-s):(c=l,l=0,o=-s,s=0),r[0].style.zIndex=-Math.abs(Math.round(a))+t.length,e.params.flipEffect.slideShadows){var d=e.isHorizontal()?r.find(".swiper-slide-shadow-left"):r.find(".swiper-slide-shadow-top"),u=e.isHorizontal()?r.find(".swiper-slide-shadow-right"):r.find(".swiper-slide-shadow-bottom");0===d.length&&(d=g('<div class="swiper-slide-shadow-'+(e.isHorizontal()?"left":"top")+'"></div>'),r.append(d)),0===u.length&&(u=g('<div class="swiper-slide-shadow-'+(e.isHorizontal()?"right":"bottom")+'"></div>'),r.append(u)),d.length&&(d[0].style.opacity=Math.max(-a,0)),u.length&&(u[0].style.opacity=Math.max(a,0))}r.transform("translate3d("+l+"px, "+c+"px, 0px) rotateX("+o+"deg) rotateY("+s+"deg)")}},setTransition:function(e){var t=this,i=t.slides,n=t.activeIndex,r=t.$wrapperEl;if(i.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),t.params.virtualTranslate&&0!==e){var a=!1;i.eq(n).transitionEnd((function(){if(!a&&t&&!t.destroyed){a=!0,t.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],i=0;i<e.length;i+=1)r.trigger(e[i])}}))}}},ue={setTranslate:function(){for(var e=this,t=e.width,i=e.height,n=e.slides,r=e.slidesSizesGrid,a=e.params.coverflowEffect,s=e.isHorizontal(),o=e.translate,l=s?t/2-o:i/2-o,c=s?a.rotate:-a.rotate,d=a.depth,u=0,h=n.length;u<h;u+=1){var p=n.eq(u),f=r[u],m=(l-p[0].swiperSlideOffset-f/2)/f*a.modifier,v=s?c*m:0,b=s?0:c*m,y=-d*Math.abs(m),w=a.stretch;"string"==typeof w&&-1!==w.indexOf("%")&&(w=parseFloat(a.stretch)/100*f);var E=s?0:w*m,_=s?w*m:0,x=1-(1-a.scale)*Math.abs(m);Math.abs(_)<.001&&(_=0),Math.abs(E)<.001&&(E=0),Math.abs(y)<.001&&(y=0),Math.abs(v)<.001&&(v=0),Math.abs(b)<.001&&(b=0),Math.abs(x)<.001&&(x=0);var S="translate3d("+_+"px,"+E+"px,"+y+"px)  rotateX("+b+"deg) rotateY("+v+"deg) scale("+x+")";if(p.transform(S),p[0].style.zIndex=1-Math.abs(Math.round(m)),a.slideShadows){var T=s?p.find(".swiper-slide-shadow-left"):p.find(".swiper-slide-shadow-top"),C=s?p.find(".swiper-slide-shadow-right"):p.find(".swiper-slide-shadow-bottom");0===T.length&&(T=g('<div class="swiper-slide-shadow-'+(s?"left":"top")+'"></div>'),p.append(T)),0===C.length&&(C=g('<div class="swiper-slide-shadow-'+(s?"right":"bottom")+'"></div>'),p.append(C)),T.length&&(T[0].style.opacity=m>0?m:0),C.length&&(C[0].style.opacity=-m>0?-m:0)}}},setTransition:function(e){this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}},he={init:function(){var e=this,t=e.params.thumbs;if(e.thumbs.initialized)return!1;e.thumbs.initialized=!0;var i=e.constructor;return t.swiper instanceof i?(e.thumbs.swiper=t.swiper,C(e.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),C(e.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):T(t.swiper)&&(e.thumbs.swiper=new i(C({},t.swiper,{watchSlidesVisibility:!0,watchSlidesProgress:!0,slideToClickedSlide:!1})),e.thumbs.swiperCreated=!0),e.thumbs.swiper.$el.addClass(e.params.thumbs.thumbsContainerClass),e.thumbs.swiper.on("tap",e.thumbs.onThumbClick),!0},onThumbClick:function(){var e=this,t=e.thumbs.swiper;if(t){var i=t.clickedIndex,n=t.clickedSlide;if(!(n&&g(n).hasClass(e.params.thumbs.slideThumbActiveClass)||null==i)){var r;if(r=t.params.loop?parseInt(g(t.clickedSlide).attr("data-swiper-slide-index"),10):i,e.params.loop){var a=e.activeIndex;e.slides.eq(a).hasClass(e.params.slideDuplicateClass)&&(e.loopFix(),e._clientLeft=e.$wrapperEl[0].clientLeft,a=e.activeIndex);var s=e.slides.eq(a).prevAll('[data-swiper-slide-index="'+r+'"]').eq(0).index(),o=e.slides.eq(a).nextAll('[data-swiper-slide-index="'+r+'"]').eq(0).index();r=void 0===s?o:void 0===o?s:o-a<a-s?o:s}e.slideTo(r)}}},update:function(e){var t=this,i=t.thumbs.swiper;if(i){var n="auto"===i.params.slidesPerView?i.slidesPerViewDynamic():i.params.slidesPerView,r=t.params.thumbs.autoScrollOffset,a=r&&!i.params.loop;if(t.realIndex!==i.realIndex||a){var s,o,l=i.activeIndex;if(i.params.loop){i.slides.eq(l).hasClass(i.params.slideDuplicateClass)&&(i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft,l=i.activeIndex);var c=i.slides.eq(l).prevAll('[data-swiper-slide-index="'+t.realIndex+'"]').eq(0).index(),d=i.slides.eq(l).nextAll('[data-swiper-slide-index="'+t.realIndex+'"]').eq(0).index();s=void 0===c?d:void 0===d?c:d-l==l-c?l:d-l<l-c?d:c,o=t.activeIndex>t.previousIndex?"next":"prev"}else o=(s=t.realIndex)>t.previousIndex?"next":"prev";a&&(s+="next"===o?r:-1*r),i.visibleSlidesIndexes&&i.visibleSlidesIndexes.indexOf(s)<0&&(i.params.centeredSlides?s=s>l?s-Math.floor(n/2)+1:s+Math.floor(n/2)-1:s>l&&(s=s-n+1),i.slideTo(s,e?0:void 0))}var u=1,h=t.params.thumbs.slideThumbActiveClass;if(t.params.slidesPerView>1&&!t.params.centeredSlides&&(u=t.params.slidesPerView),t.params.thumbs.multipleActiveThumbs||(u=1),u=Math.floor(u),i.slides.removeClass(h),i.params.loop||i.params.virtual&&i.params.virtual.enabled)for(var p=0;p<u;p+=1)i.$wrapperEl.children('[data-swiper-slide-index="'+(t.realIndex+p)+'"]').addClass(h);else for(var f=0;f<u;f+=1)i.slides.eq(t.realIndex+f).addClass(h)}}},pe=[X,K,{name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:"container",thresholdDelta:null,thresholdTime:null}},create:function(){L(this,{mousewheel:{enabled:!1,lastScrollTime:x(),lastEventBeforeSnap:void 0,recentWheelEvents:[],enable:U.enable,disable:U.disable,handle:U.handle,handleMouseEnter:U.handleMouseEnter,handleMouseLeave:U.handleMouseLeave,animateSlider:U.animateSlider,releaseScroll:U.releaseScroll}})},on:{init:function(e){!e.params.mousewheel.enabled&&e.params.cssMode&&e.mousewheel.disable(),e.params.mousewheel.enabled&&e.mousewheel.enable()},destroy:function(e){e.params.cssMode&&e.mousewheel.enable(),e.mousewheel.enabled&&e.mousewheel.disable()}}},{name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create:function(){L(this,{navigation:i({},Q)})},on:{init:function(e){e.navigation.init(),e.navigation.update()},toEdge:function(e){e.navigation.update()},fromEdge:function(e){e.navigation.update()},destroy:function(e){e.navigation.destroy()},click:function(e,t){var i,n=e.navigation,r=n.$nextEl,a=n.$prevEl;!e.params.navigation.hideOnClick||g(t.target).is(a)||g(t.target).is(r)||(r?i=r.hasClass(e.params.navigation.hiddenClass):a&&(i=a.hasClass(e.params.navigation.hiddenClass)),!0===i?e.emit("navigationShow"):e.emit("navigationHide"),r&&r.toggleClass(e.params.navigation.hiddenClass),a&&a.toggleClass(e.params.navigation.hiddenClass))}}},{name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(e){return e},formatFractionTotal:function(e){return e},bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create:function(){L(this,{pagination:i({dynamicBulletIndex:0},J)})},on:{init:function(e){e.pagination.init(),e.pagination.render(),e.pagination.update()},activeIndexChange:function(e){(e.params.loop||void 0===e.snapIndex)&&e.pagination.update()},snapIndexChange:function(e){e.params.loop||e.pagination.update()},slidesLengthChange:function(e){e.params.loop&&(e.pagination.render(),e.pagination.update())},snapGridLengthChange:function(e){e.params.loop||(e.pagination.render(),e.pagination.update())},destroy:function(e){e.pagination.destroy()},click:function(e,t){e.params.pagination.el&&e.params.pagination.hideOnClick&&e.pagination.$el.length>0&&!g(t.target).hasClass(e.params.pagination.bulletClass)&&(!0===e.pagination.$el.hasClass(e.params.pagination.hiddenClass)?e.emit("paginationShow"):e.emit("paginationHide"),e.pagination.$el.toggleClass(e.params.pagination.hiddenClass))}}},{name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create:function(){L(this,{scrollbar:i({isTouched:!1,timeout:null,dragTimeout:null},Z)})},on:{init:function(e){e.scrollbar.init(),e.scrollbar.updateSize(),e.scrollbar.setTranslate()},update:function(e){e.scrollbar.updateSize()},resize:function(e){e.scrollbar.updateSize()},observerUpdate:function(e){e.scrollbar.updateSize()},setTranslate:function(e){e.scrollbar.setTranslate()},setTransition:function(e,t){e.scrollbar.setTransition(t)},destroy:function(e){e.scrollbar.destroy()}}},{name:"parallax",params:{parallax:{enabled:!1}},create:function(){L(this,{parallax:i({},ee)})},on:{beforeInit:function(e){e.params.parallax.enabled&&(e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},init:function(e){e.params.parallax.enabled&&e.parallax.setTranslate()},setTranslate:function(e){e.params.parallax.enabled&&e.parallax.setTranslate()},setTransition:function(e,t){e.params.parallax.enabled&&e.parallax.setTransition(t)}}},{name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create:function(){var e=this;L(e,{zoom:i({enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}},te)});var t=1;Object.defineProperty(e.zoom,"scale",{get:function(){return t},set:function(i){if(t!==i){var n=e.zoom.gesture.$imageEl?e.zoom.gesture.$imageEl[0]:void 0,r=e.zoom.gesture.$slideEl?e.zoom.gesture.$slideEl[0]:void 0;e.emit("zoomChange",i,n,r)}t=i}})},on:{init:function(e){e.params.zoom.enabled&&e.zoom.enable()},destroy:function(e){e.zoom.disable()},touchStart:function(e,t){e.zoom.enabled&&e.zoom.onTouchStart(t)},touchEnd:function(e,t){e.zoom.enabled&&e.zoom.onTouchEnd(t)},doubleTap:function(e,t){e.params.zoom.enabled&&e.zoom.enabled&&e.params.zoom.toggle&&e.zoom.toggle(t)},transitionEnd:function(e){e.zoom.enabled&&e.params.zoom.enabled&&e.zoom.onTransitionEnd()},slideChange:function(e){e.zoom.enabled&&e.params.zoom.enabled&&e.params.cssMode&&e.zoom.onTransitionEnd()}}},{name:"lazy",params:{lazy:{checkInView:!1,enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,scrollingElement:"",elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create:function(){L(this,{lazy:i({initialImageLoaded:!1},ie)})},on:{beforeInit:function(e){e.params.lazy.enabled&&e.params.preloadImages&&(e.params.preloadImages=!1)},init:function(e){e.params.lazy.enabled&&!e.params.loop&&0===e.params.initialSlide&&(e.params.lazy.checkInView?e.lazy.checkInViewOnLoad():e.lazy.load())},scroll:function(e){e.params.freeMode&&!e.params.freeModeSticky&&e.lazy.load()},resize:function(e){e.params.lazy.enabled&&e.lazy.load()},scrollbarDragMove:function(e){e.params.lazy.enabled&&e.lazy.load()},transitionStart:function(e){e.params.lazy.enabled&&(e.params.lazy.loadOnTransitionStart||!e.params.lazy.loadOnTransitionStart&&!e.lazy.initialImageLoaded)&&e.lazy.load()},transitionEnd:function(e){e.params.lazy.enabled&&!e.params.lazy.loadOnTransitionStart&&e.lazy.load()},slideChange:function(e){e.params.lazy.enabled&&e.params.cssMode&&e.lazy.load()}}},{name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create:function(){L(this,{controller:i({control:this.params.controller.control},ne)})},on:{update:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},resize:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},observerUpdate:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},setTranslate:function(e,t,i){e.controller.control&&e.controller.setTranslate(t,i)},setTransition:function(e,t,i){e.controller.control&&e.controller.setTransition(t,i)}}},{name:"a11y",params:{a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",containerMessage:null,containerRoleDescriptionMessage:null,itemRoleDescriptionMessage:null}},create:function(){L(this,{a11y:i({},re,{liveRegion:g('<span class="'+this.params.a11y.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>')})})},on:{afterInit:function(e){e.params.a11y.enabled&&(e.a11y.init(),e.a11y.updateNavigation())},toEdge:function(e){e.params.a11y.enabled&&e.a11y.updateNavigation()},fromEdge:function(e){e.params.a11y.enabled&&e.a11y.updateNavigation()},paginationUpdate:function(e){e.params.a11y.enabled&&e.a11y.updatePagination()},destroy:function(e){e.params.a11y.enabled&&e.a11y.destroy()}}},{name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create:function(){L(this,{history:i({},ae)})},on:{init:function(e){e.params.history.enabled&&e.history.init()},destroy:function(e){e.params.history.enabled&&e.history.destroy()},transitionEnd:function(e){e.history.initialized&&e.history.setHistory(e.params.history.key,e.activeIndex)},slideChange:function(e){e.history.initialized&&e.params.cssMode&&e.history.setHistory(e.params.history.key,e.activeIndex)}}},{name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create:function(){L(this,{hashNavigation:i({initialized:!1},se)})},on:{init:function(e){e.params.hashNavigation.enabled&&e.hashNavigation.init()},destroy:function(e){e.params.hashNavigation.enabled&&e.hashNavigation.destroy()},transitionEnd:function(e){e.hashNavigation.initialized&&e.hashNavigation.setHash()},slideChange:function(e){e.hashNavigation.initialized&&e.params.cssMode&&e.hashNavigation.setHash()}}},{name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create:function(){L(this,{autoplay:i({},oe,{running:!1,paused:!1})})},on:{init:function(e){e.params.autoplay.enabled&&(e.autoplay.start(),s().addEventListener("visibilitychange",e.autoplay.onVisibilityChange))},beforeTransitionStart:function(e,t,i){e.autoplay.running&&(i||!e.params.autoplay.disableOnInteraction?e.autoplay.pause(t):e.autoplay.stop())},sliderFirstMove:function(e){e.autoplay.running&&(e.params.autoplay.disableOnInteraction?e.autoplay.stop():e.autoplay.pause())},touchEnd:function(e){e.params.cssMode&&e.autoplay.paused&&!e.params.autoplay.disableOnInteraction&&e.autoplay.run()},destroy:function(e){e.autoplay.running&&e.autoplay.stop(),s().removeEventListener("visibilitychange",e.autoplay.onVisibilityChange)}}},{name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create:function(){L(this,{fadeEffect:i({},le)})},on:{beforeInit:function(e){if("fade"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"fade");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};C(e.params,t),C(e.originalParams,t)}},setTranslate:function(e){"fade"===e.params.effect&&e.fadeEffect.setTranslate()},setTransition:function(e,t){"fade"===e.params.effect&&e.fadeEffect.setTransition(t)}}},{name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create:function(){L(this,{cubeEffect:i({},ce)})},on:{beforeInit:function(e){if("cube"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"cube"),e.classNames.push(e.params.containerModifierClass+"3d");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0};C(e.params,t),C(e.originalParams,t)}},setTranslate:function(e){"cube"===e.params.effect&&e.cubeEffect.setTranslate()},setTransition:function(e,t){"cube"===e.params.effect&&e.cubeEffect.setTransition(t)}}},{name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create:function(){L(this,{flipEffect:i({},de)})},on:{beforeInit:function(e){if("flip"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"flip"),e.classNames.push(e.params.containerModifierClass+"3d");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};C(e.params,t),C(e.originalParams,t)}},setTranslate:function(e){"flip"===e.params.effect&&e.flipEffect.setTranslate()},setTransition:function(e,t){"flip"===e.params.effect&&e.flipEffect.setTransition(t)}}},{name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}},create:function(){L(this,{coverflowEffect:i({},ue)})},on:{beforeInit:function(e){"coverflow"===e.params.effect&&(e.classNames.push(e.params.containerModifierClass+"coverflow"),e.classNames.push(e.params.containerModifierClass+"3d"),e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},setTranslate:function(e){"coverflow"===e.params.effect&&e.coverflowEffect.setTranslate()},setTransition:function(e,t){"coverflow"===e.params.effect&&e.coverflowEffect.setTransition(t)}}},{name:"thumbs",params:{thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-container-thumbs"}},create:function(){L(this,{thumbs:i({swiper:null,initialized:!1},he)})},on:{beforeInit:function(e){var t=e.params.thumbs;t&&t.swiper&&(e.thumbs.init(),e.thumbs.update(!0))},slideChange:function(e){e.thumbs.swiper&&e.thumbs.update()},update:function(e){e.thumbs.swiper&&e.thumbs.update()},resize:function(e){e.thumbs.swiper&&e.thumbs.update()},observerUpdate:function(e){e.thumbs.swiper&&e.thumbs.update()},setTransition:function(e,t){var i=e.thumbs.swiper;i&&i.setTransition(t)},beforeDestroy:function(e){var t=e.thumbs.swiper;t&&e.thumbs.swiperCreated&&t&&t.destroy()}}}];return V.use(pe),V})),window.Choices=function(t){var i={};function n(e){if(i[e])return i[e].exports;var r=i[e]={i:e,l:!1,exports:{}};return t[e].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=i,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(t,i){if(1&i&&(t=n(t)),8&i)return t;if(4&i&&"object"==e(t)&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&i&&"string"!=typeof t)for(var a in t)n.d(r,a,function(e){return t[e]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/public/assets/scripts/",n(n.s=4)}([function(t,i,n){var r=function(t){return function(t){return!!t&&"object"==e(t)}(t)&&!function(e){var t=Object.prototype.toString.call(e);return"[object RegExp]"===t||"[object Date]"===t||function(e){return e.$$typeof===a}(e)}(t)},a="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function s(e,t){return!1!==t.clone&&t.isMergeableObject(e)?c((i=e,Array.isArray(i)?[]:{}),e,t):e;var i}function o(e,t,i){return e.concat(t).map((function(e){return s(e,i)}))}function l(e){return Object.keys(e).concat(function(e){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(e).filter((function(t){return e.propertyIsEnumerable(t)})):[]}(e))}function c(e,t,i){(i=i||{}).arrayMerge=i.arrayMerge||o,i.isMergeableObject=i.isMergeableObject||r,i.cloneUnlessOtherwiseSpecified=s;var n=Array.isArray(t);return n===Array.isArray(e)?n?i.arrayMerge(e,t,i):function(e,t,i){var n={};return i.isMergeableObject(e)&&l(e).forEach((function(t){n[t]=s(e[t],i)})),l(t).forEach((function(r){(function(e,t){try{return t in e&&!(Object.hasOwnProperty.call(e,t)&&Object.propertyIsEnumerable.call(e,t))}catch(e){return!1}})(e,r)||(i.isMergeableObject(t[r])&&e[r]?n[r]=function(e,t){if(!t.customMerge)return c;var i=t.customMerge(e);return"function"==typeof i?i:c}(r,i)(e[r],t[r],i):n[r]=s(t[r],i))})),n}(e,t,i):s(t,i)}c.all=function(e,t){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce((function(e,i){return c(e,i,t)}),{})};var d=c;t.exports=d},function(e,t,i){(function(e,n){var r,a=i(3);r="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:n;var s=Object(a.a)(r);t.a=s}).call(this,i(5),i(6)(e))},function(t,i,n){
/*!
   * Fuse.js v3.4.5 - Lightweight fuzzy-search (http://fusejs.io)
   * 
   * Copyright (c) 2012-2017 Kirollos Risk (http://kiro.me)
   * All Rights Reserved. Apache Software License 2.0
   * 
   * http://www.apache.org/licenses/LICENSE-2.0
   */
t.exports=function(t){var i={};function n(e){if(i[e])return i[e].exports;var r=i[e]={i:e,l:!1,exports:{}};return t[e].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=i,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(t,i){if(1&i&&(t=n(t)),8&i)return t;if(4&i&&"object"==e(t)&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&i&&"string"!=typeof t)for(var a in t)n.d(r,a,function(e){return t[e]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t){e.exports=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===Object.prototype.toString.call(e)}},function(t,i,n){function r(t){return(r="function"==typeof Symbol&&"symbol"==e(Symbol.iterator)?function(t){return e(t)}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":e(t)})(t)}var a=n(2),s=n(8),o=n(0),l=function(){function e(t,i){var n=i.location,r=void 0===n?0:n,a=i.distance,o=void 0===a?100:a,l=i.threshold,c=void 0===l?.6:l,d=i.maxPatternLength,u=void 0===d?32:d,h=i.caseSensitive,p=void 0!==h&&h,f=i.tokenSeparator,m=void 0===f?/ +/g:f,v=i.findAllMatches,g=void 0!==v&&v,b=i.minMatchCharLength,y=void 0===b?1:b,w=i.id,E=void 0===w?null:w,_=i.keys,x=void 0===_?[]:_,S=i.shouldSort,T=void 0===S||S,C=i.getFn,L=void 0===C?s:C,k=i.sortFn,O=void 0===k?function(e,t){return e.score-t.score}:k,M=i.tokenize,A=void 0!==M&&M,I=i.matchAllTokens,P=void 0!==I&&I,D=i.includeMatches,z=void 0!==D&&D,j=i.includeScore,N=void 0!==j&&j,$=i.verbose,R=void 0!==$&&$;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.options={location:r,distance:o,threshold:c,maxPatternLength:u,isCaseSensitive:p,tokenSeparator:m,findAllMatches:g,minMatchCharLength:y,id:E,keys:x,includeMatches:z,includeScore:N,shouldSort:T,getFn:L,sortFn:O,verbose:R,tokenize:A,matchAllTokens:P},this.setCollection(t)}var t;return(t=[{key:"setCollection",value:function(e){return this.list=e,e}},{key:"search",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{limit:!1};this._log('---------\nSearch pattern: "'.concat(e,'"'));var i=this._prepareSearchers(e),n=i.tokenSearchers,r=i.fullSearcher,a=this._search(n,r),s=a.weights,o=a.results;return this._computeScore(s,o),this.options.shouldSort&&this._sort(o),t.limit&&"number"==typeof t.limit&&(o=o.slice(0,t.limit)),this._format(o)}},{key:"_prepareSearchers",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=[];if(this.options.tokenize)for(var i=e.split(this.options.tokenSeparator),n=0,r=i.length;n<r;n+=1)t.push(new a(i[n],this.options));return{tokenSearchers:t,fullSearcher:new a(e,this.options)}}},{key:"_search",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1?arguments[1]:void 0,i=this.list,n={},r=[];if("string"==typeof i[0]){for(var a=0,s=i.length;a<s;a+=1)this._analyze({key:"",value:i[a],record:a,index:a},{resultMap:n,results:r,tokenSearchers:e,fullSearcher:t});return{weights:null,results:r}}for(var o={},l=0,c=i.length;l<c;l+=1)for(var d=i[l],u=0,h=this.options.keys.length;u<h;u+=1){var p=this.options.keys[u];if("string"!=typeof p){if(o[p.name]={weight:1-p.weight||1},p.weight<=0||p.weight>1)throw new Error("Key weight has to be > 0 and <= 1");p=p.name}else o[p]={weight:1};this._analyze({key:p,value:this.options.getFn(d,p),record:d,index:l},{resultMap:n,results:r,tokenSearchers:e,fullSearcher:t})}return{weights:o,results:r}}},{key:"_analyze",value:function(e,t){var i=e.key,n=e.arrayIndex,r=void 0===n?-1:n,a=e.value,s=e.record,l=e.index,c=t.tokenSearchers,d=void 0===c?[]:c,u=t.fullSearcher,h=void 0===u?[]:u,p=t.resultMap,f=void 0===p?{}:p,m=t.results,v=void 0===m?[]:m;if(null!=a){var g=!1,b=-1,y=0;if("string"==typeof a){this._log("\nKey: ".concat(""===i?"-":i));var w=h.search(a);if(this._log('Full text: "'.concat(a,'", score: ').concat(w.score)),this.options.tokenize){for(var E=a.split(this.options.tokenSeparator),_=[],x=0;x<d.length;x+=1){var S=d[x];this._log('\nPattern: "'.concat(S.pattern,'"'));for(var T=!1,C=0;C<E.length;C+=1){var L=E[C],k=S.search(L),O={};k.isMatch?(O[L]=k.score,g=!0,T=!0,_.push(k.score)):(O[L]=1,this.options.matchAllTokens||_.push(1)),this._log('Token: "'.concat(L,'", score: ').concat(O[L]))}T&&(y+=1)}b=_[0];for(var M=_.length,A=1;A<M;A+=1)b+=_[A];b/=M,this._log("Token score average:",b)}var I=w.score;b>-1&&(I=(I+b)/2),this._log("Score average:",I);var P=!this.options.tokenize||!this.options.matchAllTokens||y>=d.length;if(this._log("\nCheck Matches: ".concat(P)),(g||w.isMatch)&&P){var D=f[l];D?D.output.push({key:i,arrayIndex:r,value:a,score:I,matchedIndices:w.matchedIndices}):(f[l]={item:s,output:[{key:i,arrayIndex:r,value:a,score:I,matchedIndices:w.matchedIndices}]},v.push(f[l]))}}else if(o(a))for(var z=0,j=a.length;z<j;z+=1)this._analyze({key:i,arrayIndex:z,value:a[z],record:s,index:l},{resultMap:f,results:v,tokenSearchers:d,fullSearcher:h})}}},{key:"_computeScore",value:function(e,t){this._log("\n\nComputing score:\n");for(var i=0,n=t.length;i<n;i+=1){for(var r=t[i].output,a=r.length,s=1,o=1,l=0;l<a;l+=1){var c=e?e[r[l].key].weight:1,d=(1===c?r[l].score:r[l].score||.001)*c;1!==c?o=Math.min(o,d):(r[l].nScore=d,s*=d)}t[i].score=1===o?s:o,this._log(t[i])}}},{key:"_sort",value:function(e){this._log("\n\nSorting...."),e.sort(this.options.sortFn)}},{key:"_format",value:function(e){var t=[];if(this.options.verbose){var i=[];this._log("\n\nOutput:\n\n",JSON.stringify(e,(function(e,t){if("object"===r(t)&&null!==t){if(-1!==i.indexOf(t))return;i.push(t)}return t}))),i=null}var n=[];this.options.includeMatches&&n.push((function(e,t){var i=e.output;t.matches=[];for(var n=0,r=i.length;n<r;n+=1){var a=i[n];if(0!==a.matchedIndices.length){var s={indices:a.matchedIndices,value:a.value};a.key&&(s.key=a.key),a.hasOwnProperty("arrayIndex")&&a.arrayIndex>-1&&(s.arrayIndex=a.arrayIndex),t.matches.push(s)}}})),this.options.includeScore&&n.push((function(e,t){t.score=e.score}));for(var a=0,s=e.length;a<s;a+=1){var o=e[a];if(this.options.id&&(o.item=this.options.getFn(o.item,this.options.id)[0]),n.length){for(var l={item:o.item},c=0,d=n.length;c<d;c+=1)n[c](o,l);t.push(l)}else t.push(o.item)}return t}},{key:"_log",value:function(){var e;this.options.verbose&&(e=console).log.apply(e,arguments)}}])&&function(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}(e.prototype,t),e}();t.exports=l},function(e,t,i){var n=i(3),r=i(4),a=i(7),s=function(){function e(t,i){var n=i.location,r=void 0===n?0:n,s=i.distance,o=void 0===s?100:s,l=i.threshold,c=void 0===l?.6:l,d=i.maxPatternLength,u=void 0===d?32:d,h=i.isCaseSensitive,p=void 0!==h&&h,f=i.tokenSeparator,m=void 0===f?/ +/g:f,v=i.findAllMatches,g=void 0!==v&&v,b=i.minMatchCharLength,y=void 0===b?1:b;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.options={location:r,distance:o,threshold:c,maxPatternLength:u,isCaseSensitive:p,tokenSeparator:m,findAllMatches:g,minMatchCharLength:y},this.pattern=this.options.isCaseSensitive?t:t.toLowerCase(),this.pattern.length<=u&&(this.patternAlphabet=a(this.pattern))}var t;return(t=[{key:"search",value:function(e){if(this.options.isCaseSensitive||(e=e.toLowerCase()),this.pattern===e)return{isMatch:!0,score:0,matchedIndices:[[0,e.length-1]]};var t=this.options,i=t.maxPatternLength,a=t.tokenSeparator;if(this.pattern.length>i)return n(e,this.pattern,a);var s=this.options,o=s.location,l=s.distance,c=s.threshold,d=s.findAllMatches,u=s.minMatchCharLength;return r(e,this.pattern,this.patternAlphabet,{location:o,distance:l,threshold:c,findAllMatches:d,minMatchCharLength:u})}}])&&function(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}(e.prototype,t),e}();e.exports=s},function(e,t){var i=/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g;e.exports=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:/ +/g,r=new RegExp(t.replace(i,"\\$&").replace(n,"|")),a=e.match(r),s=!!a,o=[];if(s)for(var l=0,c=a.length;l<c;l+=1){var d=a[l];o.push([e.indexOf(d),d.length-1])}return{score:s?.5:1,isMatch:s,matchedIndices:o}}},function(e,t,i){var n=i(5),r=i(6);e.exports=function(e,t,i,a){for(var s=a.location,o=void 0===s?0:s,l=a.distance,c=void 0===l?100:l,d=a.threshold,u=void 0===d?.6:d,h=a.findAllMatches,p=void 0!==h&&h,f=a.minMatchCharLength,m=void 0===f?1:f,v=o,g=e.length,b=u,y=e.indexOf(t,v),w=t.length,E=[],_=0;_<g;_+=1)E[_]=0;if(-1!==y){var x=n(t,{errors:0,currentLocation:y,expectedLocation:v,distance:c});if(b=Math.min(x,b),-1!==(y=e.lastIndexOf(t,v+w))){var S=n(t,{errors:0,currentLocation:y,expectedLocation:v,distance:c});b=Math.min(S,b)}}y=-1;for(var T=[],C=1,L=w+g,k=1<<w-1,O=0;O<w;O+=1){for(var M=0,A=L;M<A;)n(t,{errors:O,currentLocation:v+A,expectedLocation:v,distance:c})<=b?M=A:L=A,A=Math.floor((L-M)/2+M);L=A;var I=Math.max(1,v-A+1),P=p?g:Math.min(v+A,g)+w,D=Array(P+2);D[P+1]=(1<<O)-1;for(var z=P;z>=I;z-=1){var j=z-1,N=i[e.charAt(j)];if(N&&(E[j]=1),D[z]=(D[z+1]<<1|1)&N,0!==O&&(D[z]|=(T[z+1]|T[z])<<1|1|T[z+1]),D[z]&k&&(C=n(t,{errors:O,currentLocation:j,expectedLocation:v,distance:c}))<=b){if(b=C,(y=j)<=v)break;I=Math.max(1,2*v-y)}}if(n(t,{errors:O+1,currentLocation:v,expectedLocation:v,distance:c})>b)break;T=D}return{isMatch:y>=0,score:0===C?.001:C,matchedIndices:r(E,m)}}},function(e,t){e.exports=function(e,t){var i=t.errors,n=void 0===i?0:i,r=t.currentLocation,a=void 0===r?0:r,s=t.expectedLocation,o=void 0===s?0:s,l=t.distance,c=void 0===l?100:l,d=n/e.length,u=Math.abs(o-a);return c?d+u/c:u?1:d}},function(e,t){e.exports=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,i=[],n=-1,r=-1,a=0,s=e.length;a<s;a+=1){var o=e[a];o&&-1===n?n=a:o||-1===n||((r=a-1)-n+1>=t&&i.push([n,r]),n=-1)}return e[a-1]&&a-n>=t&&i.push([n,a-1]),i}},function(e,t){e.exports=function(e){for(var t={},i=e.length,n=0;n<i;n+=1)t[e.charAt(n)]=0;for(var r=0;r<i;r+=1)t[e.charAt(r)]|=1<<i-r-1;return t}},function(e,t,i){var n=i(0);e.exports=function(e,t){return function e(t,i,r){if(i){var a=i.indexOf("."),s=i,o=null;-1!==a&&(s=i.slice(0,a),o=i.slice(a+1));var l=t[s];if(null!=l)if(o||"string"!=typeof l&&"number"!=typeof l)if(n(l))for(var c=0,d=l.length;c<d;c+=1)e(l[c],o,r);else o&&e(l,o,r);else r.push(l.toString())}else r.push(t);return r}(e,t,[])}}])},function(e,t,i){function n(e){var t,i=e.Symbol;return"function"==typeof i?i.observable?t=i.observable:(t=i("observable"),i.observable=t):t="@@observable",t}i.d(t,"a",(function(){return n}))},function(e,t,i){e.exports=i(7)},function(t,i){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==("undefined"==typeof window?"undefined":e(window))&&(n=window)}t.exports=n},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(t,i,n){n.r(i);var r=n(2),a=n.n(r),s=n(0),o=n.n(s),l=n(1),c=function(){return Math.random().toString(36).substring(7).split("").join(".")},d={INIT:"@@redux/INIT"+c(),REPLACE:"@@redux/REPLACE"+c(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+c()}};function u(t){if("object"!=e(t)||null===t)return!1;for(var i=t;null!==Object.getPrototypeOf(i);)i=Object.getPrototypeOf(i);return Object.getPrototypeOf(t)===i}function h(t,i,n){var r;if("function"==typeof i&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof i&&void 0===n&&(n=i,i=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(h)(t,i)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var a=t,s=i,o=[],c=o,p=!1;function f(){c===o&&(c=o.slice())}function m(){if(p)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return s}function v(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(p)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return f(),c.push(e),function(){if(t){if(p)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,f();var i=c.indexOf(e);c.splice(i,1)}}}function g(e){if(!u(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(p)throw new Error("Reducers may not dispatch actions.");try{p=!0,s=a(s,e)}finally{p=!1}for(var t=o=c,i=0;i<t.length;i++)(0,t[i])();return e}return g({type:d.INIT}),(r={dispatch:g,subscribe:v,getState:m,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");a=e,g({type:d.REPLACE})}})[l.a]=function(){var t,i=v;return(t={subscribe:function(t){if("object"!=e(t)||null===t)throw new TypeError("Expected the observer to be an object.");function n(){t.next&&t.next(m())}return n(),{unsubscribe:i(n)}}})[l.a]=function(){return this},t},r}function p(e,t){var i=t&&t.type;return"Given "+(i&&'action "'+String(i)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}var f,m=[],v=[],g=[],b={loading:!1},y=function(e){return Array.from({length:e},(function(){return(0,36,Math.floor(36*Math.random()+0)).toString(36)})).join("")},w=function(e){return Object.prototype.toString.call(e).slice(8,-1)},E=function(e,t){return null!=t&&w(t)===e},_=function(e){return"string"!=typeof e?e:e.replace(/&/g,"&amp;").replace(/>/g,"&rt;").replace(/</g,"&lt;").replace(/"/g,"&quot;")},x=(f=document.createElement("div"),function(e){var t=e.trim();f.innerHTML=t;for(var i=f.children[0];f.firstChild;)f.removeChild(f.firstChild);return i}),S=function(e,t){return e.score-t.score},T=function(e){return JSON.parse(JSON.stringify(e))},C=function(e){for(var t=Object.keys(e),i={},n=0;n<t.length;n++){var r=t[n];"function"==typeof e[r]&&(i[r]=e[r])}var a,s=Object.keys(i);try{!function(e){Object.keys(e).forEach((function(t){var i=e[t];if(void 0===i(void 0,{type:d.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===i(void 0,{type:d.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+d.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(i)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var n=!1,r={},o=0;o<s.length;o++){var l=s[o],c=i[l],d=e[l],u=c(d,t);if(void 0===u){var h=p(l,t);throw new Error(h)}r[l]=u,n=n||u!==d}return n?r:e}}({items:function(e,t){switch(void 0===e&&(e=m),t.type){case"ADD_ITEM":return[].concat(e,[{id:t.id,choiceId:t.choiceId,groupId:t.groupId,value:t.value,label:t.label,active:!0,highlighted:!1,customProperties:t.customProperties,placeholder:t.placeholder||!1,keyCode:null}]).map((function(e){var t=e;return t.highlighted=!1,t}));case"REMOVE_ITEM":return e.map((function(e){var i=e;return i.id===t.id&&(i.active=!1),i}));case"HIGHLIGHT_ITEM":return e.map((function(e){var i=e;return i.id===t.id&&(i.highlighted=t.highlighted),i}));default:return e}},groups:function(e,t){switch(void 0===e&&(e=v),t.type){case"ADD_GROUP":return[].concat(e,[{id:t.id,value:t.value,active:t.active,disabled:t.disabled}]);case"CLEAR_CHOICES":return[];default:return e}},choices:function(e,t){switch(void 0===e&&(e=g),t.type){case"ADD_CHOICE":return[].concat(e,[{id:t.id,elementId:t.elementId,groupId:t.groupId,value:t.value,label:t.label||t.value,disabled:t.disabled||!1,selected:!1,active:!0,score:9999,customProperties:t.customProperties,placeholder:t.placeholder||!1,keyCode:null}]);case"ADD_ITEM":return t.activateOptions?e.map((function(e){var i=e;return i.active=t.active,i})):t.choiceId>-1?e.map((function(e){var i=e;return i.id===parseInt(t.choiceId,10)&&(i.selected=!0),i})):e;case"REMOVE_ITEM":return t.choiceId>-1?e.map((function(e){var i=e;return i.id===parseInt(t.choiceId,10)&&(i.selected=!1),i})):e;case"FILTER_CHOICES":return e.map((function(e){var i=e;return i.active=t.results.some((function(e){var t=e.item,n=e.score;return t.id===i.id&&(i.score=n,!0)})),i}));case"ACTIVATE_CHOICES":return e.map((function(e){var i=e;return i.active=t.active,i}));case"CLEAR_CHOICES":return g;default:return e}},general:function(e,t){switch(void 0===e&&(e=b),t.type){case"SET_IS_LOADING":return{loading:t.isLoading};default:return e}}}),L=function(e,t){var i=e;if("CLEAR_ALL"===t.type)i=void 0;else if("RESET_TO"===t.type)return T(t.state);return C(i,t)};function k(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var O=function(){function e(){this._store=h(L,window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__())}var t,i,n=e.prototype;return n.subscribe=function(e){this._store.subscribe(e)},n.dispatch=function(e){this._store.dispatch(e)},n.isLoading=function(){return this.state.general.loading},n.getChoiceById=function(e){return this.activeChoices.find((function(t){return t.id===parseInt(e,10)}))},n.getGroupById=function(e){return this.groups.find((function(t){return t.id===e}))},t=e,(i=[{key:"state",get:function(){return this._store.getState()}},{key:"items",get:function(){return this.state.items}},{key:"activeItems",get:function(){return this.items.filter((function(e){return!0===e.active}))}},{key:"highlightedActiveItems",get:function(){return this.items.filter((function(e){return e.active&&e.highlighted}))}},{key:"choices",get:function(){return this.state.choices}},{key:"activeChoices",get:function(){return this.choices.filter((function(e){return!0===e.active}))}},{key:"selectableChoices",get:function(){return this.choices.filter((function(e){return!0!==e.disabled}))}},{key:"searchableChoices",get:function(){return this.selectableChoices.filter((function(e){return!0!==e.placeholder}))}},{key:"placeholderChoice",get:function(){return[].concat(this.choices).reverse().find((function(e){return!0===e.placeholder}))}},{key:"groups",get:function(){return this.state.groups}},{key:"activeGroups",get:function(){var e=this.groups,t=this.choices;return e.filter((function(e){var i=!0===e.active&&!1===e.disabled,n=t.some((function(e){return!0===e.active&&!1===e.disabled}));return i&&n}),[])}}])&&k(t.prototype,i),e}();function M(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var A=function(){function e(e){var t=e.element,i=e.type,n=e.classNames;this.element=t,this.classNames=n,this.type=i,this.isActive=!1}var t,i,n=e.prototype;return n.getChild=function(e){return this.element.querySelector(e)},n.show=function(){return this.element.classList.add(this.classNames.activeState),this.element.setAttribute("aria-expanded","true"),this.isActive=!0,this},n.hide=function(){return this.element.classList.remove(this.classNames.activeState),this.element.setAttribute("aria-expanded","false"),this.isActive=!1,this},t=e,(i=[{key:"distanceFromTopWindow",get:function(){return this.element.getBoundingClientRect().bottom}}])&&M(t.prototype,i),e}(),I={items:[],choices:[],silent:!1,renderChoiceLimit:-1,maxItemCount:-1,addItems:!0,addItemFilter:null,removeItems:!0,removeItemButton:!1,editItems:!1,duplicateItemsAllowed:!0,delimiter:",",paste:!0,searchEnabled:!0,searchChoices:!0,searchFloor:1,searchResultLimit:4,searchFields:["label","value"],position:"auto",resetScrollPosition:!0,shouldSort:!0,shouldSortItems:!1,sorter:function(e,t){var i=e.value,n=e.label,r=void 0===n?i:n,a=t.value,s=t.label,o=void 0===s?a:s;return r.localeCompare(o,[],{sensitivity:"base",ignorePunctuation:!0,numeric:!0})},placeholder:!0,placeholderValue:null,searchPlaceholderValue:null,prependValue:null,appendValue:null,renderSelectedChoices:"auto",loadingText:"Loading...",noResultsText:"No results found",noChoicesText:"No choices to choose from",itemSelectText:"Press to select",uniqueItemText:"Only unique values can be added",customAddItemText:"Only values matching specific conditions can be added",addItemText:function(e){return'Press Enter to add <b>"'+_(e)+'"</b>'},maxItemText:function(e){return"Only "+e+" values can be added"},valueComparer:function(e,t){return e===t},fuseOptions:{includeScore:!0},callbackOnInit:null,callbackOnCreateTemplates:null,classNames:{containerOuter:"choices",containerInner:"choices__inner",input:"choices__input",inputCloned:"choices__input--cloned",list:"choices__list",listItems:"choices__list--multiple",listSingle:"choices__list--single",listDropdown:"choices__list--dropdown",item:"choices__item",itemSelectable:"choices__item--selectable",itemDisabled:"choices__item--disabled",itemChoice:"choices__item--choice",placeholder:"choices__placeholder",group:"choices__group",groupHeading:"choices__heading",button:"choices__button",activeState:"is-active",focusState:"is-focused",openState:"is-open",disabledState:"is-disabled",highlightedState:"is-highlighted",selectedState:"is-selected",flippedState:"is-flipped",loadingState:"is-loading",noResults:"has-no-results",noChoices:"has-no-choices"}},P="removeItem",D="highlightItem",z="text",j="select-one",N="select-multiple",$=function(){function e(e){var t=e.element,i=e.type,n=e.classNames,r=e.position;this.element=t,this.classNames=n,this.type=i,this.position=r,this.isOpen=!1,this.isFlipped=!1,this.isFocussed=!1,this.isDisabled=!1,this.isLoading=!1,this._onFocus=this._onFocus.bind(this),this._onBlur=this._onBlur.bind(this)}var t=e.prototype;return t.addEventListeners=function(){this.element.addEventListener("focus",this._onFocus),this.element.addEventListener("blur",this._onBlur)},t.removeEventListeners=function(){this.element.removeEventListener("focus",this._onFocus),this.element.removeEventListener("blur",this._onBlur)},t.shouldFlip=function(e){if("number"!=typeof e)return!1;var t=!1;return"auto"===this.position?t=!window.matchMedia("(min-height: "+(e+1)+"px)").matches:"top"===this.position&&(t=!0),t},t.setActiveDescendant=function(e){this.element.setAttribute("aria-activedescendant",e)},t.removeActiveDescendant=function(){this.element.removeAttribute("aria-activedescendant")},t.open=function(e){this.element.classList.add(this.classNames.openState),this.element.setAttribute("aria-expanded","true"),this.isOpen=!0,this.shouldFlip(e)&&(this.element.classList.add(this.classNames.flippedState),this.isFlipped=!0)},t.close=function(){this.element.classList.remove(this.classNames.openState),this.element.setAttribute("aria-expanded","false"),this.removeActiveDescendant(),this.isOpen=!1,this.isFlipped&&(this.element.classList.remove(this.classNames.flippedState),this.isFlipped=!1)},t.focus=function(){this.isFocussed||this.element.focus()},t.addFocusState=function(){this.element.classList.add(this.classNames.focusState)},t.removeFocusState=function(){this.element.classList.remove(this.classNames.focusState)},t.enable=function(){this.element.classList.remove(this.classNames.disabledState),this.element.removeAttribute("aria-disabled"),this.type===j&&this.element.setAttribute("tabindex","0"),this.isDisabled=!1},t.disable=function(){this.element.classList.add(this.classNames.disabledState),this.element.setAttribute("aria-disabled","true"),this.type===j&&this.element.setAttribute("tabindex","-1"),this.isDisabled=!0},t.wrap=function(e){!function(e,t){void 0===t&&(t=document.createElement("div")),e.nextSibling?e.parentNode.insertBefore(t,e.nextSibling):e.parentNode.appendChild(t),t.appendChild(e)}(e,this.element)},t.unwrap=function(e){this.element.parentNode.insertBefore(e,this.element),this.element.parentNode.removeChild(this.element)},t.addLoadingState=function(){this.element.classList.add(this.classNames.loadingState),this.element.setAttribute("aria-busy","true"),this.isLoading=!0},t.removeLoadingState=function(){this.element.classList.remove(this.classNames.loadingState),this.element.removeAttribute("aria-busy"),this.isLoading=!1},t._onFocus=function(){this.isFocussed=!0},t._onBlur=function(){this.isFocussed=!1},e}();function R(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var q=function(){function e(e){var t=e.element,i=e.type,n=e.classNames,r=e.preventPaste;this.element=t,this.type=i,this.classNames=n,this.preventPaste=r,this.isFocussed=this.element===document.activeElement,this.isDisabled=t.disabled,this._onPaste=this._onPaste.bind(this),this._onInput=this._onInput.bind(this),this._onFocus=this._onFocus.bind(this),this._onBlur=this._onBlur.bind(this)}var t,i,n=e.prototype;return n.addEventListeners=function(){this.element.addEventListener("paste",this._onPaste),this.element.addEventListener("input",this._onInput,{passive:!0}),this.element.addEventListener("focus",this._onFocus,{passive:!0}),this.element.addEventListener("blur",this._onBlur,{passive:!0})},n.removeEventListeners=function(){this.element.removeEventListener("input",this._onInput,{passive:!0}),this.element.removeEventListener("paste",this._onPaste),this.element.removeEventListener("focus",this._onFocus,{passive:!0}),this.element.removeEventListener("blur",this._onBlur,{passive:!0})},n.enable=function(){this.element.removeAttribute("disabled"),this.isDisabled=!1},n.disable=function(){this.element.setAttribute("disabled",""),this.isDisabled=!0},n.focus=function(){this.isFocussed||this.element.focus()},n.blur=function(){this.isFocussed&&this.element.blur()},n.clear=function(e){return void 0===e&&(e=!0),this.element.value&&(this.element.value=""),e&&this.setWidth(),this},n.setWidth=function(){var e=this.element,t=e.style,i=e.value,n=e.placeholder;t.minWidth=n.length+1+"ch",t.width=i.length+1+"ch"},n.setActiveDescendant=function(e){this.element.setAttribute("aria-activedescendant",e)},n.removeActiveDescendant=function(){this.element.removeAttribute("aria-activedescendant")},n._onInput=function(){this.type!==j&&this.setWidth()},n._onPaste=function(e){this.preventPaste&&e.preventDefault()},n._onFocus=function(){this.isFocussed=!0},n._onBlur=function(){this.isFocussed=!1},t=e,(i=[{key:"placeholder",set:function(e){this.element.placeholder=e}},{key:"value",get:function(){return _(this.element.value)},set:function(e){this.element.value=e}}])&&R(t.prototype,i),e}(),H=function(){function e(e){var t=e.element;this.element=t,this.scrollPos=this.element.scrollTop,this.height=this.element.offsetHeight}var t=e.prototype;return t.clear=function(){this.element.innerHTML=""},t.append=function(e){this.element.appendChild(e)},t.getChild=function(e){return this.element.querySelector(e)},t.hasChildren=function(){return this.element.hasChildNodes()},t.scrollToTop=function(){this.element.scrollTop=0},t.scrollToChildElement=function(e,t){var i=this;if(e){var n=this.element.offsetHeight,r=this.element.scrollTop+n,a=e.offsetHeight,s=e.offsetTop+a,o=t>0?this.element.scrollTop+s-r:e.offsetTop;requestAnimationFrame((function(){i._animateScroll(o,t)}))}},t._scrollDown=function(e,t,i){var n=(i-e)/t,r=n>1?n:1;this.element.scrollTop=e+r},t._scrollUp=function(e,t,i){var n=(e-i)/t,r=n>1?n:1;this.element.scrollTop=e-r},t._animateScroll=function(e,t){var i=this,n=this.element.scrollTop,r=!1;t>0?(this._scrollDown(n,4,e),n<e&&(r=!0)):(this._scrollUp(n,4,e),n>e&&(r=!0)),r&&requestAnimationFrame((function(){i._animateScroll(e,t)}))},e}();function B(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var F=function(){function e(e){var t=e.element,i=e.classNames;if(this.element=t,this.classNames=i,!(t instanceof HTMLInputElement||t instanceof HTMLSelectElement))throw new TypeError("Invalid element passed");this.isDisabled=!1}var t,i,n=e.prototype;return n.conceal=function(){this.element.classList.add(this.classNames.input),this.element.hidden=!0,this.element.tabIndex=-1;var e=this.element.getAttribute("style");e&&this.element.setAttribute("data-choice-orig-style",e),this.element.setAttribute("data-choice","active")},n.reveal=function(){this.element.classList.remove(this.classNames.input),this.element.hidden=!1,this.element.removeAttribute("tabindex");var e=this.element.getAttribute("data-choice-orig-style");e?(this.element.removeAttribute("data-choice-orig-style"),this.element.setAttribute("style",e)):this.element.removeAttribute("style"),this.element.removeAttribute("data-choice"),this.element.value=this.element.value},n.enable=function(){this.element.removeAttribute("disabled"),this.element.disabled=!1,this.isDisabled=!1},n.disable=function(){this.element.setAttribute("disabled",""),this.element.disabled=!0,this.isDisabled=!0},n.triggerEvent=function(e,t){!function(e,t,i){void 0===i&&(i=null);var n=new CustomEvent(t,{detail:i,bubbles:!0,cancelable:!0});e.dispatchEvent(n)}(this.element,e,t)},t=e,(i=[{key:"isActive",get:function(){return"active"===this.element.dataset.choice}},{key:"dir",get:function(){return this.element.dir}},{key:"value",get:function(){return this.element.value},set:function(e){this.element.value=e}}])&&B(t.prototype,i),e}();function W(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var V=function(e){var t,i,n,r;function a(t){var i,n=t.element,r=t.classNames,a=t.delimiter;return(i=e.call(this,{element:n,classNames:r})||this).delimiter=a,i}return i=e,(t=a).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i,n=a,(r=[{key:"value",get:function(){return this.element.value},set:function(e){var t=e.map((function(e){return e.value})).join(this.delimiter);this.element.setAttribute("value",t),this.element.value=t}}])&&W(n.prototype,r),a}(F);function G(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var X=function(e){var t,i,n,r;function a(t){var i,n=t.element,r=t.classNames,a=t.template;return(i=e.call(this,{element:n,classNames:r})||this).template=a,i}return i=e,(t=a).prototype=Object.create(i.prototype),t.prototype.constructor=t,t.__proto__=i,a.prototype.appendDocFragment=function(e){this.element.innerHTML="",this.element.appendChild(e)},n=a,(r=[{key:"placeholderOption",get:function(){return this.element.querySelector('option[value=""]')||this.element.querySelector("option[placeholder]")}},{key:"optionGroups",get:function(){return Array.from(this.element.getElementsByTagName("OPTGROUP"))}},{key:"options",get:function(){return Array.from(this.element.options)},set:function(e){var t=this,i=document.createDocumentFragment();e.forEach((function(e){return n=e,r=t.template(n),void i.appendChild(r);var n,r})),this.appendDocFragment(i)}}])&&G(n.prototype,r),a}(F),Y={containerOuter:function(e,t,i,n,r,a){var s=e.containerOuter,o=Object.assign(document.createElement("div"),{className:s});return o.dataset.type=a,t&&(o.dir=t),n&&(o.tabIndex=0),i&&(o.setAttribute("role",r?"combobox":"listbox"),r&&o.setAttribute("aria-autocomplete","list")),o.setAttribute("aria-haspopup","true"),o.setAttribute("aria-expanded","false"),o},containerInner:function(e){var t=e.containerInner;return Object.assign(document.createElement("div"),{className:t})},itemList:function(e,t){var i=e.list,n=e.listSingle,r=e.listItems;return Object.assign(document.createElement("div"),{className:i+" "+(t?n:r)})},placeholder:function(e,t){var i=e.placeholder;return Object.assign(document.createElement("div"),{className:i,innerHTML:t})},item:function(e,t,i){var n=e.item,r=e.button,a=e.highlightedState,s=e.itemSelectable,o=e.placeholder,l=t.id,c=t.value,d=t.label,u=t.customProperties,h=t.active,p=t.disabled,f=t.highlighted,m=t.placeholder,v=Object.assign(document.createElement("div"),{className:n,innerHTML:d});if(Object.assign(v.dataset,{item:"",id:l,value:c,customProperties:u}),h&&v.setAttribute("aria-selected","true"),p&&v.setAttribute("aria-disabled","true"),m&&v.classList.add(o),v.classList.add(f?a:s),i){p&&v.classList.remove(s),v.dataset.deletable="";var g=Object.assign(document.createElement("button"),{type:"button",className:r,innerHTML:"Remove item"});g.setAttribute("aria-label","Remove item: '"+c+"'"),g.dataset.button="",v.appendChild(g)}return v},choiceList:function(e,t){var i=e.list,n=Object.assign(document.createElement("div"),{className:i});return t||n.setAttribute("aria-multiselectable","true"),n.setAttribute("role","listbox"),n},choiceGroup:function(e,t){var i=e.group,n=e.groupHeading,r=e.itemDisabled,a=t.id,s=t.value,o=t.disabled,l=Object.assign(document.createElement("div"),{className:i+" "+(o?r:"")});return l.setAttribute("role","group"),Object.assign(l.dataset,{group:"",id:a,value:s}),o&&l.setAttribute("aria-disabled","true"),l.appendChild(Object.assign(document.createElement("div"),{className:n,innerHTML:s})),l},choice:function(e,t,i){var n=e.item,r=e.itemChoice,a=e.itemSelectable,s=e.selectedState,o=e.itemDisabled,l=e.placeholder,c=t.id,d=t.value,u=t.label,h=t.groupId,p=t.elementId,f=t.disabled,m=t.selected,v=t.placeholder,g=Object.assign(document.createElement("div"),{id:p,innerHTML:u,className:n+" "+r});return m&&g.classList.add(s),v&&g.classList.add(l),g.setAttribute("role",h>0?"treeitem":"option"),Object.assign(g.dataset,{choice:"",id:c,value:d,selectText:i}),f?(g.classList.add(o),g.dataset.choiceDisabled="",g.setAttribute("aria-disabled","true")):(g.classList.add(a),g.dataset.choiceSelectable=""),g},input:function(e,t){var i=e.input,n=e.inputCloned,r=Object.assign(document.createElement("input"),{type:"text",className:i+" "+n,autocomplete:"off",autocapitalize:"off",spellcheck:!1});return r.setAttribute("role","textbox"),r.setAttribute("aria-autocomplete","list"),r.setAttribute("aria-label",t),r},dropdown:function(e){var t=e.list,i=e.listDropdown,n=document.createElement("div");return n.classList.add(t,i),n.setAttribute("aria-expanded","false"),n},notice:function(e,t,i){var n=e.item,r=e.itemChoice,a=e.noResults,s=e.noChoices;void 0===i&&(i="");var o=[n,r];return"no-choices"===i?o.push(s):"no-results"===i&&o.push(a),Object.assign(document.createElement("div"),{innerHTML:t,className:o.join(" ")})},option:function(e){var t=e.label,i=e.value,n=e.customProperties,r=e.active,a=e.disabled,s=new Option(t,i,!1,r);return n&&(s.dataset.customProperties=n),s.disabled=a,s}},K=function(e){return void 0===e&&(e=!0),{type:"ACTIVATE_CHOICES",active:e}},U=function(e,t){return{type:"HIGHLIGHT_ITEM",id:e,highlighted:t}},Q=function(e){return{type:"ADD_GROUP",value:e.value,id:e.id,active:e.active,disabled:e.disabled}},J=function(e){return{type:"SET_IS_LOADING",isLoading:e}};function Z(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var ee="-ms-scroll-limit"in document.documentElement.style&&"-ms-ime-align"in document.documentElement.style,te={},ie=function(){var t,i;function n(e,t){var i=this;void 0===e&&(e="[data-choice]"),void 0===t&&(t={}),this.config=o.a.all([I,n.defaults.options,t],{arrayMerge:function(e,t){return[].concat(t)}});var r=function(e,t){var i=Object.keys(e).sort(),n=Object.keys(t).sort();return i.filter((function(e){return n.indexOf(e)<0}))}(this.config,I);r.length&&console.warn("Unknown config option(s) passed",r.join(", "));var a="string"==typeof e?document.querySelector(e):e;if(!(a instanceof HTMLInputElement||a instanceof HTMLSelectElement))throw TypeError("Expected one of the following types text|select-one|select-multiple");if(this._isTextElement=a.type===z,this._isSelectOneElement=a.type===j,this._isSelectMultipleElement=a.type===N,this._isSelectElement=this._isSelectOneElement||this._isSelectMultipleElement,this.config.searchEnabled=this._isSelectMultipleElement||this.config.searchEnabled,["auto","always"].includes(this.config.renderSelectedChoices)||(this.config.renderSelectedChoices="auto"),t.addItemFilter&&"function"!=typeof t.addItemFilter){var s=t.addItemFilter instanceof RegExp?t.addItemFilter:new RegExp(t.addItemFilter);this.config.addItemFilter=s.test.bind(s)}if(this._isTextElement?this.passedElement=new V({element:a,classNames:this.config.classNames,delimiter:this.config.delimiter}):this.passedElement=new X({element:a,classNames:this.config.classNames,template:function(e){return i._templates.option(e)}}),this.initialised=!1,this._store=new O,this._initialState={},this._currentState={},this._prevState={},this._currentValue="",this._canSearch=this.config.searchEnabled,this._isScrollingOnIe=!1,this._highlightPosition=0,this._wasTap=!0,this._placeholderValue=this._generatePlaceholderValue(),this._baseId=function(e,t){var i=e.id||e.name&&e.name+"-"+y(2)||y(4);return t+"-"+i.replace(/(:|\.|\[|\]|,)/g,"")}(this.passedElement.element,"choices-"),this._direction=this.passedElement.dir,!this._direction){var l=window.getComputedStyle(this.passedElement.element).direction;l!==window.getComputedStyle(document.documentElement).direction&&(this._direction=l)}if(this._idNames={itemChoice:"item-choice"},this._presetGroups=this.passedElement.optionGroups,this._presetOptions=this.passedElement.options,this._presetChoices=this.config.choices,this._presetItems=this.config.items,this.passedElement.value&&(this._presetItems=this._presetItems.concat(this.passedElement.value.split(this.config.delimiter))),this.passedElement.options&&this.passedElement.options.forEach((function(e){i._presetChoices.push({value:e.value,label:e.innerHTML,selected:e.selected,disabled:e.disabled||e.parentNode.disabled,placeholder:""===e.value||e.hasAttribute("placeholder"),customProperties:e.getAttribute("data-custom-properties")})})),this._render=this._render.bind(this),this._onFocus=this._onFocus.bind(this),this._onBlur=this._onBlur.bind(this),this._onKeyUp=this._onKeyUp.bind(this),this._onKeyDown=this._onKeyDown.bind(this),this._onClick=this._onClick.bind(this),this._onTouchMove=this._onTouchMove.bind(this),this._onTouchEnd=this._onTouchEnd.bind(this),this._onMouseDown=this._onMouseDown.bind(this),this._onMouseOver=this._onMouseOver.bind(this),this._onFormReset=this._onFormReset.bind(this),this._onAKey=this._onAKey.bind(this),this._onEnterKey=this._onEnterKey.bind(this),this._onEscapeKey=this._onEscapeKey.bind(this),this._onDirectionKey=this._onDirectionKey.bind(this),this._onDeleteKey=this._onDeleteKey.bind(this),this.passedElement.isActive)return this.config.silent||console.warn("Trying to initialise Choices on element already initialised"),void(this.initialised=!0);this.init()}t=n,i=[{key:"defaults",get:function(){return Object.preventExtensions({get options(){return te},get templates(){return Y}})}}],null&&Z(t.prototype,null),i&&Z(t,i);var r=n.prototype;return r.init=function(){if(!this.initialised){this._createTemplates(),this._createElements(),this._createStructure(),this._initialState=T(this._store.state),this._store.subscribe(this._render),this._render(),this._addEventListeners(),(!this.config.addItems||this.passedElement.element.hasAttribute("disabled"))&&this.disable(),this.initialised=!0;var e=this.config.callbackOnInit;e&&"function"==typeof e&&e.call(this)}},r.destroy=function(){this.initialised&&(this._removeEventListeners(),this.passedElement.reveal(),this.containerOuter.unwrap(this.passedElement.element),this.clearStore(),this._isSelectElement&&(this.passedElement.options=this._presetOptions),this._templates=null,this.initialised=!1)},r.enable=function(){return this.passedElement.isDisabled&&this.passedElement.enable(),this.containerOuter.isDisabled&&(this._addEventListeners(),this.input.enable(),this.containerOuter.enable()),this},r.disable=function(){return this.passedElement.isDisabled||this.passedElement.disable(),this.containerOuter.isDisabled||(this._removeEventListeners(),this.input.disable(),this.containerOuter.disable()),this},r.highlightItem=function(e,t){if(void 0===t&&(t=!0),!e)return this;var i=e.id,n=e.groupId,r=void 0===n?-1:n,a=e.value,s=void 0===a?"":a,o=e.label,l=void 0===o?"":o,c=r>=0?this._store.getGroupById(r):null;return this._store.dispatch(U(i,!0)),t&&this.passedElement.triggerEvent(D,{id:i,value:s,label:l,groupValue:c&&c.value?c.value:null}),this},r.unhighlightItem=function(e){if(!e)return this;var t=e.id,i=e.groupId,n=void 0===i?-1:i,r=e.value,a=void 0===r?"":r,s=e.label,o=void 0===s?"":s,l=n>=0?this._store.getGroupById(n):null;return this._store.dispatch(U(t,!1)),this.passedElement.triggerEvent(D,{id:t,value:a,label:o,groupValue:l&&l.value?l.value:null}),this},r.highlightAll=function(){var e=this;return this._store.items.forEach((function(t){return e.highlightItem(t)})),this},r.unhighlightAll=function(){var e=this;return this._store.items.forEach((function(t){return e.unhighlightItem(t)})),this},r.removeActiveItemsByValue=function(e){var t=this;return this._store.activeItems.filter((function(t){return t.value===e})).forEach((function(e){return t._removeItem(e)})),this},r.removeActiveItems=function(e){var t=this;return this._store.activeItems.filter((function(t){return t.id!==e})).forEach((function(e){return t._removeItem(e)})),this},r.removeHighlightedItems=function(e){var t=this;return void 0===e&&(e=!1),this._store.highlightedActiveItems.forEach((function(i){t._removeItem(i),e&&t._triggerChange(i.value)})),this},r.showDropdown=function(e){var t=this;return this.dropdown.isActive||requestAnimationFrame((function(){t.dropdown.show(),t.containerOuter.open(t.dropdown.distanceFromTopWindow),!e&&t._canSearch&&t.input.focus(),t.passedElement.triggerEvent("showDropdown",{})})),this},r.hideDropdown=function(e){var t=this;return this.dropdown.isActive?(requestAnimationFrame((function(){t.dropdown.hide(),t.containerOuter.close(),!e&&t._canSearch&&(t.input.removeActiveDescendant(),t.input.blur()),t.passedElement.triggerEvent("hideDropdown",{})})),this):this},r.getValue=function(e){void 0===e&&(e=!1);var t=this._store.activeItems.reduce((function(t,i){var n=e?i.value:i;return t.push(n),t}),[]);return this._isSelectOneElement?t[0]:t},r.setValue=function(e){var t=this;return this.initialised?(e.forEach((function(e){return t._setChoiceOrItem(e)})),this):this},r.setChoiceByValue=function(e){var t=this;return!this.initialised||this._isTextElement||(Array.isArray(e)?e:[e]).forEach((function(e){return t._findAndSelectChoiceByValue(e)})),this},r.setChoices=function(t,i,n,r){var a=this;if(void 0===t&&(t=[]),void 0===i&&(i="value"),void 0===n&&(n="label"),void 0===r&&(r=!1),!this.initialised)throw new ReferenceError("setChoices was called on a non-initialized instance of Choices");if(!this._isSelectElement)throw new TypeError("setChoices can't be used with INPUT based Choices");if("string"!=typeof i||!i)throw new TypeError("value parameter must be a name of 'value' field in passed objects");if(r&&this.clearChoices(),"function"==typeof t){var s=t(this);if("function"==typeof Promise&&s instanceof Promise)return new Promise((function(e){return requestAnimationFrame(e)})).then((function(){return a._handleLoadingState(!0)})).then((function(){return s})).then((function(e){return a.setChoices(e,i,n,r)})).catch((function(e){a.config.silent||console.error(e)})).then((function(){return a._handleLoadingState(!1)})).then((function(){return a}));if(!Array.isArray(s))throw new TypeError(".setChoices first argument function must return either array of choices or Promise, got: "+e(s));return this.setChoices(s,i,n,!1)}if(!Array.isArray(t))throw new TypeError(".setChoices must be called either with array of choices with a function resulting into Promise of array of choices");return this.containerOuter.removeLoadingState(),this._startLoading(),t.forEach((function(e){e.choices?a._addGroup({id:parseInt(e.id,10)||null,group:e,valueKey:i,labelKey:n}):a._addChoice({value:e[i],label:e[n],isSelected:e.selected,isDisabled:e.disabled,customProperties:e.customProperties,placeholder:e.placeholder})})),this._stopLoading(),this},r.clearChoices=function(){return this._store.dispatch({type:"CLEAR_CHOICES"}),this},r.clearStore=function(){return this._store.dispatch({type:"CLEAR_ALL"}),this},r.clearInput=function(){var e=!this._isSelectOneElement;return this.input.clear(e),!this._isTextElement&&this._canSearch&&(this._isSearching=!1,this._store.dispatch(K(!0))),this},r._render=function(){if(!this._store.isLoading()){this._currentState=this._store.state;var e=this._currentState.choices!==this._prevState.choices||this._currentState.groups!==this._prevState.groups||this._currentState.items!==this._prevState.items,t=this._isSelectElement,i=this._currentState.items!==this._prevState.items;e&&(t&&this._renderChoices(),i&&this._renderItems(),this._prevState=this._currentState)}},r._renderChoices=function(){var e=this,t=this._store,i=t.activeGroups,n=t.activeChoices,r=document.createDocumentFragment();if(this.choiceList.clear(),this.config.resetScrollPosition&&requestAnimationFrame((function(){return e.choiceList.scrollToTop()})),i.length>=1&&!this._isSearching){var a=n.filter((function(e){return!0===e.placeholder&&-1===e.groupId}));a.length>=1&&(r=this._createChoicesFragment(a,r)),r=this._createGroupsFragment(i,n,r)}else n.length>=1&&(r=this._createChoicesFragment(n,r));if(r.childNodes&&r.childNodes.length>0){var s=this._store.activeItems,o=this._canAddItem(s,this.input.value);o.response?(this.choiceList.append(r),this._highlightChoice()):this.choiceList.append(this._getTemplate("notice",o.notice))}else{var l,c;this._isSearching?(c="function"==typeof this.config.noResultsText?this.config.noResultsText():this.config.noResultsText,l=this._getTemplate("notice",c,"no-results")):(c="function"==typeof this.config.noChoicesText?this.config.noChoicesText():this.config.noChoicesText,l=this._getTemplate("notice",c,"no-choices")),this.choiceList.append(l)}},r._renderItems=function(){var e=this._store.activeItems||[];this.itemList.clear();var t=this._createItemsFragment(e);t.childNodes&&this.itemList.append(t)},r._createGroupsFragment=function(e,t,i){var n=this;return void 0===i&&(i=document.createDocumentFragment()),this.config.shouldSort&&e.sort(this.config.sorter),e.forEach((function(e){var r=function(e){return t.filter((function(t){return n._isSelectOneElement?t.groupId===e.id:t.groupId===e.id&&("always"===n.config.renderSelectedChoices||!t.selected)}))}(e);if(r.length>=1){var a=n._getTemplate("choiceGroup",e);i.appendChild(a),n._createChoicesFragment(r,i,!0)}})),i},r._createChoicesFragment=function(e,t,i){var n=this;void 0===t&&(t=document.createDocumentFragment()),void 0===i&&(i=!1);var r=this.config,a=r.renderSelectedChoices,s=r.searchResultLimit,o=r.renderChoiceLimit,l=this._isSearching?S:this.config.sorter,c=function(e){if("auto"!==a||n._isSelectOneElement||!e.selected){var i=n._getTemplate("choice",e,n.config.itemSelectText);t.appendChild(i)}},d=e;"auto"!==a||this._isSelectOneElement||(d=e.filter((function(e){return!e.selected})));var u=d.reduce((function(e,t){return t.placeholder?e.placeholderChoices.push(t):e.normalChoices.push(t),e}),{placeholderChoices:[],normalChoices:[]}),h=u.placeholderChoices,p=u.normalChoices;(this.config.shouldSort||this._isSearching)&&p.sort(l);var f=d.length,m=this._isSelectOneElement?[].concat(h,p):p;this._isSearching?f=s:o&&o>0&&!i&&(f=o);for(var v=0;v<f;v+=1)m[v]&&c(m[v]);return t},r._createItemsFragment=function(e,t){var i=this;void 0===t&&(t=document.createDocumentFragment());var n=this.config,r=n.shouldSortItems,a=n.sorter,s=n.removeItemButton;return r&&!this._isSelectOneElement&&e.sort(a),this._isTextElement?this.passedElement.value=e:this.passedElement.options=e,e.forEach((function(e){var n=i._getTemplate("item",e,s);t.appendChild(n)})),t},r._triggerChange=function(e){null!=e&&this.passedElement.triggerEvent("change",{value:e})},r._selectPlaceholderChoice=function(){var e=this._store.placeholderChoice;e&&(this._addItem({value:e.value,label:e.label,choiceId:e.id,groupId:e.groupId,placeholder:e.placeholder}),this._triggerChange(e.value))},r._handleButtonAction=function(e,t){if(e&&t&&this.config.removeItems&&this.config.removeItemButton){var i=t.parentNode.getAttribute("data-id"),n=e.find((function(e){return e.id===parseInt(i,10)}));this._removeItem(n),this._triggerChange(n.value),this._isSelectOneElement&&this._selectPlaceholderChoice()}},r._handleItemAction=function(e,t,i){var n=this;if(void 0===i&&(i=!1),e&&t&&this.config.removeItems&&!this._isSelectOneElement){var r=t.getAttribute("data-id");e.forEach((function(e){e.id!==parseInt(r,10)||e.highlighted?!i&&e.highlighted&&n.unhighlightItem(e):n.highlightItem(e)})),this.input.focus()}},r._handleChoiceAction=function(e,t){if(e&&t){var i=t.dataset.id,n=this._store.getChoiceById(i);if(n){var r=e[0]&&e[0].keyCode?e[0].keyCode:null,a=this.dropdown.isActive;n.keyCode=r,this.passedElement.triggerEvent("choice",{choice:n}),n.selected||n.disabled||this._canAddItem(e,n.value).response&&(this._addItem({value:n.value,label:n.label,choiceId:n.id,groupId:n.groupId,customProperties:n.customProperties,placeholder:n.placeholder,keyCode:n.keyCode}),this._triggerChange(n.value)),this.clearInput(),a&&this._isSelectOneElement&&(this.hideDropdown(!0),this.containerOuter.focus())}}},r._handleBackspace=function(e){if(this.config.removeItems&&e){var t=e[e.length-1],i=e.some((function(e){return e.highlighted}));this.config.editItems&&!i&&t?(this.input.value=t.value,this.input.setWidth(),this._removeItem(t),this._triggerChange(t.value)):(i||this.highlightItem(t,!1),this.removeHighlightedItems(!0))}},r._startLoading=function(){this._store.dispatch(J(!0))},r._stopLoading=function(){this._store.dispatch(J(!1))},r._handleLoadingState=function(e){void 0===e&&(e=!0);var t=this.itemList.getChild("."+this.config.classNames.placeholder);e?(this.disable(),this.containerOuter.addLoadingState(),this._isSelectOneElement?t?t.innerHTML=this.config.loadingText:(t=this._getTemplate("placeholder",this.config.loadingText),this.itemList.append(t)):this.input.placeholder=this.config.loadingText):(this.enable(),this.containerOuter.removeLoadingState(),this._isSelectOneElement?t.innerHTML=this._placeholderValue||"":this.input.placeholder=this._placeholderValue||"")},r._handleSearch=function(e){if(e&&this.input.isFocussed){var t=this._store.choices,i=this.config,n=i.searchFloor,r=i.searchChoices,a=t.some((function(e){return!e.active}));if(e&&e.length>=n){var s=r?this._searchChoices(e):0;this.passedElement.triggerEvent("search",{value:e,resultCount:s})}else a&&(this._isSearching=!1,this._store.dispatch(K(!0)))}},r._canAddItem=function(e,t){var i=!0,n="function"==typeof this.config.addItemText?this.config.addItemText(t):this.config.addItemText;if(!this._isSelectOneElement){var r=function(e,t,i){return void 0===i&&(i="value"),e.some((function(e){return"string"==typeof t?e[i]===t.trim():e[i]===t}))}(e,t);this.config.maxItemCount>0&&this.config.maxItemCount<=e.length&&(i=!1,n="function"==typeof this.config.maxItemText?this.config.maxItemText(this.config.maxItemCount):this.config.maxItemText),!this.config.duplicateItemsAllowed&&r&&i&&(i=!1,n="function"==typeof this.config.uniqueItemText?this.config.uniqueItemText(t):this.config.uniqueItemText),this._isTextElement&&this.config.addItems&&i&&"function"==typeof this.config.addItemFilter&&!this.config.addItemFilter(t)&&(i=!1,n="function"==typeof this.config.customAddItemText?this.config.customAddItemText(t):this.config.customAddItemText)}return{response:i,notice:n}},r._searchChoices=function(e){var t="string"==typeof e?e.trim():e,i="string"==typeof this._currentValue?this._currentValue.trim():this._currentValue;if(t.length<1&&t===i+" ")return 0;var n=this._store.searchableChoices,r=t,s=[].concat(this.config.searchFields),o=Object.assign(this.config.fuseOptions,{keys:s}),l=new a.a(n,o).search(r);return this._currentValue=t,this._highlightPosition=0,this._isSearching=!0,this._store.dispatch(function(e){return{type:"FILTER_CHOICES",results:e}}(l)),l.length},r._addEventListeners=function(){var e=document.documentElement;e.addEventListener("touchend",this._onTouchEnd,!0),this.containerOuter.element.addEventListener("keydown",this._onKeyDown,!0),this.containerOuter.element.addEventListener("mousedown",this._onMouseDown,!0),e.addEventListener("click",this._onClick,{passive:!0}),e.addEventListener("touchmove",this._onTouchMove,{passive:!0}),this.dropdown.element.addEventListener("mouseover",this._onMouseOver,{passive:!0}),this._isSelectOneElement&&(this.containerOuter.element.addEventListener("focus",this._onFocus,{passive:!0}),this.containerOuter.element.addEventListener("blur",this._onBlur,{passive:!0})),this.input.element.addEventListener("keyup",this._onKeyUp,{passive:!0}),this.input.element.addEventListener("focus",this._onFocus,{passive:!0}),this.input.element.addEventListener("blur",this._onBlur,{passive:!0}),this.input.element.form&&this.input.element.form.addEventListener("reset",this._onFormReset,{passive:!0}),this.input.addEventListeners()},r._removeEventListeners=function(){var e=document.documentElement;e.removeEventListener("touchend",this._onTouchEnd,!0),this.containerOuter.element.removeEventListener("keydown",this._onKeyDown,!0),this.containerOuter.element.removeEventListener("mousedown",this._onMouseDown,!0),e.removeEventListener("click",this._onClick),e.removeEventListener("touchmove",this._onTouchMove),this.dropdown.element.removeEventListener("mouseover",this._onMouseOver),this._isSelectOneElement&&(this.containerOuter.element.removeEventListener("focus",this._onFocus),this.containerOuter.element.removeEventListener("blur",this._onBlur)),this.input.element.removeEventListener("keyup",this._onKeyUp),this.input.element.removeEventListener("focus",this._onFocus),this.input.element.removeEventListener("blur",this._onBlur),this.input.element.form&&this.input.element.form.removeEventListener("reset",this._onFormReset),this.input.removeEventListeners()},r._onKeyDown=function(e){var t,i=e.target,n=e.keyCode,r=e.ctrlKey,a=e.metaKey,s=this._store.activeItems,o=this.input.isFocussed,l=this.dropdown.isActive,c=this.itemList.hasChildren(),d=String.fromCharCode(n),u=r||a;!this._isTextElement&&/[a-zA-Z0-9-_ ]/.test(d)&&this.showDropdown();var h=((t={})[65]=this._onAKey,t[13]=this._onEnterKey,t[27]=this._onEscapeKey,t[38]=this._onDirectionKey,t[33]=this._onDirectionKey,t[40]=this._onDirectionKey,t[34]=this._onDirectionKey,t[8]=this._onDeleteKey,t[46]=this._onDeleteKey,t);h[n]&&h[n]({event:e,target:i,keyCode:n,metaKey:a,activeItems:s,hasFocusedInput:o,hasActiveDropdown:l,hasItems:c,hasCtrlDownKeyPressed:u})},r._onKeyUp=function(e){var t=e.target,i=e.keyCode,n=this.input.value,r=this._store.activeItems,a=this._canAddItem(r,n);if(this._isTextElement)if(a.notice&&n){var s=this._getTemplate("notice",a.notice);this.dropdown.element.innerHTML=s.outerHTML,this.showDropdown(!0)}else this.hideDropdown(!0);else{var o=(46===i||8===i)&&!t.value,l=!this._isTextElement&&this._isSearching,c=this._canSearch&&a.response;o&&l?(this._isSearching=!1,this._store.dispatch(K(!0))):c&&this._handleSearch(this.input.value)}this._canSearch=this.config.searchEnabled},r._onAKey=function(e){var t=e.hasItems;e.hasCtrlDownKeyPressed&&t&&(this._canSearch=!1,this.config.removeItems&&!this.input.value&&this.input.element===document.activeElement&&this.highlightAll())},r._onEnterKey=function(e){var t=e.event,i=e.target,n=e.activeItems,r=e.hasActiveDropdown,a=i.hasAttribute("data-button");if(this._isTextElement&&i.value){var s=this.input.value;this._canAddItem(n,s).response&&(this.hideDropdown(!0),this._addItem({value:s}),this._triggerChange(s),this.clearInput())}if(a&&(this._handleButtonAction(n,i),t.preventDefault()),r){var o=this.dropdown.getChild("."+this.config.classNames.highlightedState);o&&(n[0]&&(n[0].keyCode=13),this._handleChoiceAction(n,o)),t.preventDefault()}else this._isSelectOneElement&&(this.showDropdown(),t.preventDefault())},r._onEscapeKey=function(e){e.hasActiveDropdown&&(this.hideDropdown(!0),this.containerOuter.focus())},r._onDirectionKey=function(e){var t,i,n,r=e.event,a=e.hasActiveDropdown,s=e.keyCode,o=e.metaKey;if(a||this._isSelectOneElement){this.showDropdown(),this._canSearch=!1;var l,c=40===s||34===s?1:-1;if(o||34===s||33===s)l=c>0?this.dropdown.element.querySelector("[data-choice-selectable]:last-of-type"):this.dropdown.element.querySelector("[data-choice-selectable]");else{var d=this.dropdown.element.querySelector("."+this.config.classNames.highlightedState);l=d?function(e,t,i){if(void 0===i&&(i=1),e instanceof Element){for(var n=(i>0?"next":"previous")+"ElementSibling",r=e[n];r;){if(r.matches(t))return r;r=r[n]}return r}}(d,"[data-choice-selectable]",c):this.dropdown.element.querySelector("[data-choice-selectable]")}l&&(t=l,i=this.choiceList.element,void 0===(n=c)&&(n=1),t&&(n>0?i.scrollTop+i.offsetHeight>=t.offsetTop+t.offsetHeight:t.offsetTop>=i.scrollTop)||this.choiceList.scrollToChildElement(l,c),this._highlightChoice(l)),r.preventDefault()}},r._onDeleteKey=function(e){var t=e.event,i=e.target,n=e.hasFocusedInput,r=e.activeItems;!n||i.value||this._isSelectOneElement||(this._handleBackspace(r),t.preventDefault())},r._onTouchMove=function(){this._wasTap&&(this._wasTap=!1)},r._onTouchEnd=function(e){var t=(e||e.touches[0]).target;this._wasTap&&this.containerOuter.element.contains(t)&&((t===this.containerOuter.element||t===this.containerInner.element)&&(this._isTextElement?this.input.focus():this._isSelectMultipleElement&&this.showDropdown()),e.stopPropagation()),this._wasTap=!0},r._onMouseDown=function(e){var t=e.target;if(t instanceof HTMLElement){if(ee&&this.choiceList.element.contains(t)){var i=this.choiceList.element.firstElementChild,n="ltr"===this._direction?e.offsetX>=i.offsetWidth:e.offsetX<i.offsetLeft;this._isScrollingOnIe=n}if(t!==this.input.element){var r=t.closest("[data-button],[data-item],[data-choice]");if(r instanceof HTMLElement){var a=e.shiftKey,s=this._store.activeItems,o=r.dataset;"button"in o?this._handleButtonAction(s,r):"item"in o?this._handleItemAction(s,r,a):"choice"in o&&this._handleChoiceAction(s,r)}e.preventDefault()}}},r._onMouseOver=function(e){var t=e.target;t instanceof HTMLElement&&"choice"in t.dataset&&this._highlightChoice(t)},r._onClick=function(e){var t=e.target;this.containerOuter.element.contains(t)?this.dropdown.isActive||this.containerOuter.isDisabled?this._isSelectOneElement&&t!==this.input.element&&!this.dropdown.element.contains(t)&&this.hideDropdown():this._isTextElement?document.activeElement!==this.input.element&&this.input.focus():(this.showDropdown(),this.containerOuter.focus()):(this._store.highlightedActiveItems.length>0&&this.unhighlightAll(),this.containerOuter.removeFocusState(),this.hideDropdown(!0))},r._onFocus=function(e){var t,i=this,n=e.target;this.containerOuter.element.contains(n)&&((t={})[z]=function(){n===i.input.element&&i.containerOuter.addFocusState()},t[j]=function(){i.containerOuter.addFocusState(),n===i.input.element&&i.showDropdown(!0)},t[N]=function(){n===i.input.element&&(i.showDropdown(!0),i.containerOuter.addFocusState())},t)[this.passedElement.element.type]()},r._onBlur=function(e){var t=this,i=e.target;if(this.containerOuter.element.contains(i)&&!this._isScrollingOnIe){var n,r=this._store.activeItems.some((function(e){return e.highlighted}));((n={})[z]=function(){i===t.input.element&&(t.containerOuter.removeFocusState(),r&&t.unhighlightAll(),t.hideDropdown(!0))},n[j]=function(){t.containerOuter.removeFocusState(),(i===t.input.element||i===t.containerOuter.element&&!t._canSearch)&&t.hideDropdown(!0)},n[N]=function(){i===t.input.element&&(t.containerOuter.removeFocusState(),t.hideDropdown(!0),r&&t.unhighlightAll())},n)[this.passedElement.element.type]()}else this._isScrollingOnIe=!1,this.input.element.focus()},r._onFormReset=function(){this._store.dispatch({type:"RESET_TO",state:this._initialState})},r._highlightChoice=function(e){var t=this;void 0===e&&(e=null);var i=Array.from(this.dropdown.element.querySelectorAll("[data-choice-selectable]"));if(i.length){var n=e;Array.from(this.dropdown.element.querySelectorAll("."+this.config.classNames.highlightedState)).forEach((function(e){e.classList.remove(t.config.classNames.highlightedState),e.setAttribute("aria-selected","false")})),n?this._highlightPosition=i.indexOf(n):(n=i.length>this._highlightPosition?i[this._highlightPosition]:i[i.length-1])||(n=i[0]),n.classList.add(this.config.classNames.highlightedState),n.setAttribute("aria-selected","true"),this.passedElement.triggerEvent("highlightChoice",{el:n}),this.dropdown.isActive&&(this.input.setActiveDescendant(n.id),this.containerOuter.setActiveDescendant(n.id))}},r._addItem=function(e){var t=e.value,i=e.label,n=void 0===i?null:i,r=e.choiceId,a=void 0===r?-1:r,s=e.groupId,o=void 0===s?-1:s,l=e.customProperties,c=void 0===l?null:l,d=e.placeholder,u=void 0!==d&&d,h=e.keyCode,p=void 0===h?null:h,f="string"==typeof t?t.trim():t,m=p,v=c,g=this._store.items,b=n||f,y=a||-1,w=o>=0?this._store.getGroupById(o):null,E=g?g.length+1:1;return this.config.prependValue&&(f=this.config.prependValue+f.toString()),this.config.appendValue&&(f+=this.config.appendValue.toString()),this._store.dispatch(function(e){return{type:"ADD_ITEM",value:e.value,label:e.label,id:e.id,choiceId:e.choiceId,groupId:e.groupId,customProperties:e.customProperties,placeholder:e.placeholder,keyCode:e.keyCode}}({value:f,label:b,id:E,choiceId:y,groupId:o,customProperties:c,placeholder:u,keyCode:m})),this._isSelectOneElement&&this.removeActiveItems(E),this.passedElement.triggerEvent("addItem",{id:E,value:f,label:b,customProperties:v,groupValue:w&&w.value?w.value:void 0,keyCode:m}),this},r._removeItem=function(e){if(!e||!E("Object",e))return this;var t=e.id,i=e.value,n=e.label,r=e.choiceId,a=e.groupId,s=a>=0?this._store.getGroupById(a):null;return this._store.dispatch(function(e,t){return{type:"REMOVE_ITEM",id:e,choiceId:t}}(t,r)),s&&s.value?this.passedElement.triggerEvent(P,{id:t,value:i,label:n,groupValue:s.value}):this.passedElement.triggerEvent(P,{id:t,value:i,label:n}),this},r._addChoice=function(e){var t=e.value,i=e.label,n=void 0===i?null:i,r=e.isSelected,a=void 0!==r&&r,s=e.isDisabled,o=void 0!==s&&s,l=e.groupId,c=void 0===l?-1:l,d=e.customProperties,u=void 0===d?null:d,h=e.placeholder,p=void 0!==h&&h,f=e.keyCode,m=void 0===f?null:f;if(null!=t){var v=this._store.choices,g=n||t,b=v?v.length+1:1,y=this._baseId+"-"+this._idNames.itemChoice+"-"+b;this._store.dispatch(function(e){return{type:"ADD_CHOICE",value:e.value,label:e.label,id:e.id,groupId:e.groupId,disabled:e.disabled,elementId:e.elementId,customProperties:e.customProperties,placeholder:e.placeholder,keyCode:e.keyCode}}({id:b,groupId:c,elementId:y,value:t,label:g,disabled:o,customProperties:u,placeholder:p,keyCode:m})),a&&this._addItem({value:t,label:g,choiceId:b,customProperties:u,placeholder:p,keyCode:m})}},r._addGroup=function(e){var t=this,i=e.group,n=e.id,r=e.valueKey,a=void 0===r?"value":r,s=e.labelKey,o=void 0===s?"label":s,l=E("Object",i)?i.choices:Array.from(i.getElementsByTagName("OPTION")),c=n||Math.floor((new Date).valueOf()*Math.random()),d=!!i.disabled&&i.disabled;l?(this._store.dispatch(Q({value:i.label,id:c,active:!0,disabled:d})),l.forEach((function(e){var i=e.disabled||e.parentNode&&e.parentNode.disabled;t._addChoice({value:e[a],label:E("Object",e)?e[o]:e.innerHTML,isSelected:e.selected,isDisabled:i,groupId:c,customProperties:e.customProperties,placeholder:e.placeholder})}))):this._store.dispatch(Q({value:i.label,id:i.id,active:!1,disabled:i.disabled}))},r._getTemplate=function(e){var t;if(!e)return null;for(var i=this.config.classNames,n=arguments.length,r=new Array(n>1?n-1:0),a=1;a<n;a++)r[a-1]=arguments[a];return(t=this._templates[e]).call.apply(t,[this,i].concat(r))},r._createTemplates=function(){var e=this.config.callbackOnCreateTemplates,t={};e&&"function"==typeof e&&(t=e.call(this,x)),this._templates=o()(Y,t)},r._createElements=function(){this.containerOuter=new $({element:this._getTemplate("containerOuter",this._direction,this._isSelectElement,this._isSelectOneElement,this.config.searchEnabled,this.passedElement.element.type),classNames:this.config.classNames,type:this.passedElement.element.type,position:this.config.position}),this.containerInner=new $({element:this._getTemplate("containerInner"),classNames:this.config.classNames,type:this.passedElement.element.type,position:this.config.position}),this.input=new q({element:this._getTemplate("input",this._placeholderValue),classNames:this.config.classNames,type:this.passedElement.element.type,preventPaste:!this.config.paste}),this.choiceList=new H({element:this._getTemplate("choiceList",this._isSelectOneElement)}),this.itemList=new H({element:this._getTemplate("itemList",this._isSelectOneElement)}),this.dropdown=new A({element:this._getTemplate("dropdown"),classNames:this.config.classNames,type:this.passedElement.element.type})},r._createStructure=function(){this.passedElement.conceal(),this.containerInner.wrap(this.passedElement.element),this.containerOuter.wrap(this.containerInner.element),this._isSelectOneElement?this.input.placeholder=this.config.searchPlaceholderValue||"":this._placeholderValue&&(this.input.placeholder=this._placeholderValue,this.input.setWidth()),this.containerOuter.element.appendChild(this.containerInner.element),this.containerOuter.element.appendChild(this.dropdown.element),this.containerInner.element.appendChild(this.itemList.element),this._isTextElement||this.dropdown.element.appendChild(this.choiceList.element),this._isSelectOneElement?this.config.searchEnabled&&this.dropdown.element.insertBefore(this.input.element,this.dropdown.element.firstChild):this.containerInner.element.appendChild(this.input.element),this._isSelectElement&&(this._highlightPosition=0,this._isSearching=!1,this._startLoading(),this._presetGroups.length?this._addPredefinedGroups(this._presetGroups):this._addPredefinedChoices(this._presetChoices),this._stopLoading()),this._isTextElement&&this._addPredefinedItems(this._presetItems)},r._addPredefinedGroups=function(e){var t=this,i=this.passedElement.placeholderOption;i&&"SELECT"===i.parentNode.tagName&&this._addChoice({value:i.value,label:i.innerHTML,isSelected:i.selected,isDisabled:i.disabled,placeholder:!0}),e.forEach((function(e){return t._addGroup({group:e,id:e.id||null})}))},r._addPredefinedChoices=function(e){var t=this;this.config.shouldSort&&e.sort(this.config.sorter);var i=e.some((function(e){return e.selected})),n=e.findIndex((function(e){return void 0===e.disabled||!e.disabled}));e.forEach((function(e,r){var a=e.value,s=e.label,o=e.customProperties,l=e.placeholder;if(t._isSelectElement)if(e.choices)t._addGroup({group:e,id:e.id||null});else{var c=!(!t._isSelectOneElement||i||r!==n)||e.selected,d=e.disabled;t._addChoice({value:a,label:s,isSelected:c,isDisabled:d,customProperties:o,placeholder:l})}else t._addChoice({value:a,label:s,isSelected:e.selected,isDisabled:e.disabled,customProperties:o,placeholder:l})}))},r._addPredefinedItems=function(t){var i=this;t.forEach((function(t){"object"==e(t)&&t.value&&i._addItem({value:t.value,label:t.label,choiceId:t.id,customProperties:t.customProperties,placeholder:t.placeholder}),"string"==typeof t&&i._addItem({value:t})}))},r._setChoiceOrItem=function(e){var t=this;({object:function(){e.value&&(t._isTextElement?t._addItem({value:e.value,label:e.label,choiceId:e.id,customProperties:e.customProperties,placeholder:e.placeholder}):t._addChoice({value:e.value,label:e.label,isSelected:!0,isDisabled:!1,customProperties:e.customProperties,placeholder:e.placeholder}))},string:function(){t._isTextElement?t._addItem({value:e}):t._addChoice({value:e,label:e,isSelected:!0,isDisabled:!1})}})[w(e).toLowerCase()]()},r._findAndSelectChoiceByValue=function(e){var t=this,i=this._store.choices.find((function(i){return t.config.valueComparer(i.value,e)}));i&&!i.selected&&this._addItem({value:i.value,label:i.label,choiceId:i.id,groupId:i.groupId,customProperties:i.customProperties,placeholder:i.placeholder,keyCode:i.keyCode})},r._generatePlaceholderValue=function(){if(this._isSelectElement){var e=this.passedElement.placeholderOption;return!!e&&e.text}var t=this.config,i=t.placeholder,n=t.placeholderValue,r=this.passedElement.element.dataset;if(i){if(n)return n;if(r.placeholder)return r.placeholder}return!1},n}();i.default=ie}]).default,function(t,i){"object"==("undefined"==typeof exports?"undefined":e(exports))&&"undefined"!=typeof module?i():"function"==typeof define&&define.amd?define(i):i()}(0,(function(){function e(e){var t=!0,i=!1,n=null,r={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function a(e){return!!(e&&e!==document&&"HTML"!==e.nodeName&&"BODY"!==e.nodeName&&"classList"in e&&"contains"in e.classList)}function s(e){e.classList.contains("focus-visible")||(e.classList.add("focus-visible"),e.setAttribute("data-focus-visible-added",""))}function o(e){t=!1}function l(){document.addEventListener("mousemove",c),document.addEventListener("mousedown",c),document.addEventListener("mouseup",c),document.addEventListener("pointermove",c),document.addEventListener("pointerdown",c),document.addEventListener("pointerup",c),document.addEventListener("touchmove",c),document.addEventListener("touchstart",c),document.addEventListener("touchend",c)}function c(e){e.target.nodeName&&"html"===e.target.nodeName.toLowerCase()||(t=!1,document.removeEventListener("mousemove",c),document.removeEventListener("mousedown",c),document.removeEventListener("mouseup",c),document.removeEventListener("pointermove",c),document.removeEventListener("pointerdown",c),document.removeEventListener("pointerup",c),document.removeEventListener("touchmove",c),document.removeEventListener("touchstart",c),document.removeEventListener("touchend",c))}document.addEventListener("keydown",(function(i){i.metaKey||i.altKey||i.ctrlKey||(a(e.activeElement)&&s(e.activeElement),t=!0)}),!0),document.addEventListener("mousedown",o,!0),document.addEventListener("pointerdown",o,!0),document.addEventListener("touchstart",o,!0),document.addEventListener("visibilitychange",(function(e){"hidden"===document.visibilityState&&(i&&(t=!0),l())}),!0),l(),e.addEventListener("focus",(function(e){var i,n,o;a(e.target)&&(t||(n=(i=e.target).type,"INPUT"===(o=i.tagName)&&r[n]&&!i.readOnly||"TEXTAREA"===o&&!i.readOnly||i.isContentEditable))&&s(e.target)}),!0),e.addEventListener("blur",(function(e){var t;a(e.target)&&(e.target.classList.contains("focus-visible")||e.target.hasAttribute("data-focus-visible-added"))&&(i=!0,window.clearTimeout(n),n=window.setTimeout((function(){i=!1}),100),(t=e.target).hasAttribute("data-focus-visible-added")&&(t.classList.remove("focus-visible"),t.removeAttribute("data-focus-visible-added")))}),!0),e.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&e.host?e.host.setAttribute("data-js-focus-visible",""):e.nodeType===Node.DOCUMENT_NODE&&(document.documentElement.classList.add("js-focus-visible"),document.documentElement.setAttribute("data-js-focus-visible",""))}if("undefined"!=typeof window&&"undefined"!=typeof document){var t;window.applyFocusVisiblePolyfill=e;try{t=new CustomEvent("focus-visible-polyfill-ready")}catch(e){(t=document.createEvent("CustomEvent")).initCustomEvent("focus-visible-polyfill-ready",!1,!1,{})}window.dispatchEvent(t)}"undefined"!=typeof document&&e(document)})),function(t,i){"object"===("undefined"==typeof exports?"undefined":e(exports))&&"undefined"!=typeof module?i(exports):"function"==typeof define&&define.amd?define(["exports"],i):i((t="undefined"!=typeof globalThis?globalThis:t||self).Popper={})}(void 0,(function(e){function t(e){var t=e.getBoundingClientRect();return{width:t.width,height:t.height,top:t.top,right:t.right,bottom:t.bottom,left:t.left,x:t.left,y:t.top}}function i(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function n(e){var t=i(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function r(e){return e instanceof i(e).Element||e instanceof Element}function a(e){return e instanceof i(e).HTMLElement||e instanceof HTMLElement}function s(e){return"undefined"!=typeof ShadowRoot&&(e instanceof i(e).ShadowRoot||e instanceof ShadowRoot)}function o(e){return e?(e.nodeName||"").toLowerCase():null}function l(e){return((r(e)?e.ownerDocument:e.document)||window.document).documentElement}function c(e){return t(l(e)).left+n(e).scrollLeft}function d(e){return i(e).getComputedStyle(e)}function u(e){var t=d(e),i=t.overflow,n=t.overflowX,r=t.overflowY;return/auto|scroll|overlay|hidden/.test(i+r+n)}function h(e,r,s){void 0===s&&(s=!1);var d,h,p=l(r),f=t(e),m=a(r),v={scrollLeft:0,scrollTop:0},g={x:0,y:0};return(m||!m&&!s)&&(("body"!==o(r)||u(p))&&(v=(d=r)!==i(d)&&a(d)?{scrollLeft:(h=d).scrollLeft,scrollTop:h.scrollTop}:n(d)),a(r)?((g=t(r)).x+=r.clientLeft,g.y+=r.clientTop):p&&(g.x=c(p))),{x:f.left+v.scrollLeft-g.x,y:f.top+v.scrollTop-g.y,width:f.width,height:f.height}}function p(e){var i=t(e),n=e.offsetWidth,r=e.offsetHeight;return Math.abs(i.width-n)<=.5&&(n=i.width),Math.abs(i.height-r)<=.5&&(r=i.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:r}}function f(e){return"html"===o(e)?e:e.assignedSlot||e.parentNode||(s(e)?e.host:null)||l(e)}function m(e,t){var n;void 0===t&&(t=[]);var r=function e(t){return["html","body","#document"].indexOf(o(t))>=0?t.ownerDocument.body:a(t)&&u(t)?t:e(f(t))}(e),s=r===(null==(n=e.ownerDocument)?void 0:n.body),l=i(r),c=s?[l].concat(l.visualViewport||[],u(r)?r:[]):r,d=t.concat(c);return s?d:d.concat(m(f(c)))}function v(e){return["table","td","th"].indexOf(o(e))>=0}function g(e){return a(e)&&"fixed"!==d(e).position?e.offsetParent:null}function b(e){for(var t=i(e),n=g(e);n&&v(n)&&"static"===d(n).position;)n=g(n);return n&&("html"===o(n)||"body"===o(n)&&"static"===d(n).position)?t:n||function(e){for(var t=navigator.userAgent.toLowerCase().includes("firefox"),i=f(e);a(i)&&["html","body"].indexOf(o(i))<0;){var n=d(i);if("none"!==n.transform||"none"!==n.perspective||"paint"===n.contain||["transform","perspective"].includes(n.willChange)||t&&"filter"===n.willChange||t&&n.filter&&"none"!==n.filter)return i;i=i.parentNode}return null}(e)||t}var y="top",w="bottom",E="right",_="left",x=[y,w,E,_],S=x.reduce((function(e,t){return e.concat([t+"-start",t+"-end"])}),[]),T=[].concat(x,["auto"]).reduce((function(e,t){return e.concat([t,t+"-start",t+"-end"])}),[]),C=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function L(e){var t=new Map,i=new Set,n=[];return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){i.has(e.name)||function e(r){i.add(r.name),[].concat(r.requires||[],r.requiresIfExists||[]).forEach((function(n){if(!i.has(n)){var r=t.get(n);r&&e(r)}})),n.push(r)}(e)})),n}function k(e){for(var t=arguments.length,i=new Array(t>1?t-1:0),n=1;n<t;n++)i[n-1]=arguments[n];return[].concat(i).reduce((function(e,t){return e.replace(/%s/,t)}),e)}var O='Popper: modifier "%s" provided an invalid %s property, expected %s but got %s',M=["name","enabled","phase","fn","effect","requires","options"];function A(e){return e.split("-")[0]}var I=Math.max,P=Math.min,D=Math.round;function z(e,t){var i=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(i&&s(i)){var n=t;do{if(n&&e.isSameNode(n))return!0;n=n.parentNode||n.host}while(n)}return!1}function j(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function N(e,r){return"viewport"===r?j(function(e){var t=i(e),n=l(e),r=t.visualViewport,a=n.clientWidth,s=n.clientHeight,o=0,d=0;return r&&(a=r.width,s=r.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(o=r.offsetLeft,d=r.offsetTop)),{width:a,height:s,x:o+c(e),y:d}}(e)):a(r)?function(e){var i=t(e);return i.top=i.top+e.clientTop,i.left=i.left+e.clientLeft,i.bottom=i.top+e.clientHeight,i.right=i.left+e.clientWidth,i.width=e.clientWidth,i.height=e.clientHeight,i.x=i.left,i.y=i.top,i}(r):j(function(e){var t,i=l(e),r=n(e),a=null==(t=e.ownerDocument)?void 0:t.body,s=I(i.scrollWidth,i.clientWidth,a?a.scrollWidth:0,a?a.clientWidth:0),o=I(i.scrollHeight,i.clientHeight,a?a.scrollHeight:0,a?a.clientHeight:0),u=-r.scrollLeft+c(e),h=-r.scrollTop;return"rtl"===d(a||i).direction&&(u+=I(i.clientWidth,a?a.clientWidth:0)-s),{width:s,height:o,x:u,y:h}}(l(e)))}function $(e,t,i){var n="clippingParents"===t?function(e){var t=m(f(e)),i=["absolute","fixed"].indexOf(d(e).position)>=0&&a(e)?b(e):e;return r(i)?t.filter((function(e){return r(e)&&z(e,i)&&"body"!==o(e)})):[]}(e):[].concat(t),s=[].concat(n,[i]),l=s[0],c=s.reduce((function(t,i){var n=N(e,i);return t.top=I(n.top,t.top),t.right=P(n.right,t.right),t.bottom=P(n.bottom,t.bottom),t.left=I(n.left,t.left),t}),N(e,l));return c.width=c.right-c.left,c.height=c.bottom-c.top,c.x=c.left,c.y=c.top,c}function R(e){return e.split("-")[1]}function q(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function H(e){var t,i=e.reference,n=e.element,r=e.placement,a=r?A(r):null,s=r?R(r):null,o=i.x+i.width/2-n.width/2,l=i.y+i.height/2-n.height/2;switch(a){case y:t={x:o,y:i.y-n.height};break;case w:t={x:o,y:i.y+i.height};break;case E:t={x:i.x+i.width,y:l};break;case _:t={x:i.x-n.width,y:l};break;default:t={x:i.x,y:i.y}}var c=a?q(a):null;if(null!=c){var d="y"===c?"height":"width";switch(s){case"start":t[c]=t[c]-(i[d]/2-n[d]/2);break;case"end":t[c]=t[c]+(i[d]/2-n[d]/2)}}return t}function B(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function F(e,t){return t.reduce((function(t,i){return t[i]=e,t}),{})}function W(e,i){void 0===i&&(i={});var n=i,a=n.placement,s=void 0===a?e.placement:a,o=n.boundary,c=void 0===o?"clippingParents":o,d=n.rootBoundary,u=void 0===d?"viewport":d,h=n.elementContext,p=void 0===h?"popper":h,f=n.altBoundary,m=void 0!==f&&f,v=n.padding,g=void 0===v?0:v,b=B("number"!=typeof g?g:F(g,x)),_="popper"===p?"reference":"popper",S=e.elements.reference,T=e.rects.popper,C=e.elements[m?_:p],L=$(r(C)?C:C.contextElement||l(e.elements.popper),c,u),k=t(S),O=H({reference:k,element:T,strategy:"absolute",placement:s}),M=j(Object.assign({},T,O)),A="popper"===p?M:k,I={top:L.top-A.top+b.top,bottom:A.bottom-L.bottom+b.bottom,left:L.left-A.left+b.left,right:A.right-L.right+b.right},P=e.modifiersData.offset;if("popper"===p&&P){var D=P[s];Object.keys(I).forEach((function(e){var t=[E,w].indexOf(e)>=0?1:-1,i=[y,w].indexOf(e)>=0?"y":"x";I[e]+=D[i]*t}))}return I}var V="Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.",G={placement:"bottom",modifiers:[],strategy:"absolute"};function X(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function Y(e){void 0===e&&(e={});var t=e,i=t.defaultModifiers,n=void 0===i?[]:i,a=t.defaultOptions,s=void 0===a?G:a;return function(e,t,i){void 0===i&&(i=s);var a,o,l={placement:"bottom",orderedModifiers:[],options:Object.assign({},G,s),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},c=[],u=!1,f={state:l,setOptions:function(i){v(),l.options=Object.assign({},s,l.options,i),l.scrollParents={reference:r(e)?m(e):e.contextElement?m(e.contextElement):[],popper:m(t)};var a=function(e){var t=L(e);return C.reduce((function(e,i){return e.concat(t.filter((function(e){return e.phase===i})))}),[])}(function(e){var t=e.reduce((function(e,t){var i=e[t.name];return e[t.name]=i?Object.assign({},i,t,{options:Object.assign({},i.options,t.options),data:Object.assign({},i.data,t.data)}):t,e}),{});return Object.keys(t).map((function(e){return t[e]}))}([].concat(n,l.options.modifiers)));(l.orderedModifiers=a.filter((function(e){return e.enabled})),function(e){e.forEach((function(t){Object.keys(t).forEach((function(i){switch(i){case"name":"string"!=typeof t.name&&console.error(k(O,String(t.name),'"name"','"string"','"'+String(t.name)+'"'));break;case"enabled":"boolean"!=typeof t.enabled&&console.error(k(O,t.name,'"enabled"','"boolean"','"'+String(t.enabled)+'"'));case"phase":C.indexOf(t.phase)<0&&console.error(k(O,t.name,'"phase"',"either "+C.join(", "),'"'+String(t.phase)+'"'));break;case"fn":"function"!=typeof t.fn&&console.error(k(O,t.name,'"fn"','"function"','"'+String(t.fn)+'"'));break;case"effect":"function"!=typeof t.effect&&console.error(k(O,t.name,'"effect"','"function"','"'+String(t.fn)+'"'));break;case"requires":Array.isArray(t.requires)||console.error(k(O,t.name,'"requires"','"array"','"'+String(t.requires)+'"'));break;case"requiresIfExists":Array.isArray(t.requiresIfExists)||console.error(k(O,t.name,'"requiresIfExists"','"array"','"'+String(t.requiresIfExists)+'"'));break;case"options":case"data":break;default:console.error('PopperJS: an invalid property has been provided to the "'+t.name+'" modifier, valid properties are '+M.map((function(e){return'"'+e+'"'})).join(", ")+'; but "'+i+'" was provided.')}t.requires&&t.requires.forEach((function(i){null==e.find((function(e){return e.name===i}))&&console.error(k('Popper: modifier "%s" requires "%s", but "%s" modifier is not available',String(t.name),i,i))}))}))}))}((o=[].concat(a,l.options.modifiers),u=function(e){return e.name},h=new Set,o.filter((function(e){var t=u(e);if(!h.has(t))return h.add(t),!0})))),"auto"===A(l.options.placement))&&(l.orderedModifiers.find((function(e){return"flip"===e.name}))||console.error(['Popper: "auto" placements require the "flip" modifier be',"present and enabled to work."].join(" ")));var o,u,h,p=d(t);return[p.marginTop,p.marginRight,p.marginBottom,p.marginLeft].some((function(e){return parseFloat(e)}))&&console.warn(['Popper: CSS "margin" styles cannot be used to apply padding',"between the popper and its reference element or boundary.","To replicate margin, use the `offset` modifier, as well as","the `padding` option in the `preventOverflow` and `flip`","modifiers."].join(" ")),l.orderedModifiers.forEach((function(e){var t=e.name,i=e.options,n=void 0===i?{}:i,r=e.effect;if("function"==typeof r){var a=r({state:l,name:t,instance:f,options:n});c.push(a||function(){})}})),f.update()},forceUpdate:function(){if(!u){var e=l.elements,t=e.reference,i=e.popper;if(X(t,i)){l.rects={reference:h(t,b(i),"fixed"===l.options.strategy),popper:p(i)},l.reset=!1,l.placement=l.options.placement,l.orderedModifiers.forEach((function(e){return l.modifiersData[e.name]=Object.assign({},e.data)}));for(var n=0,r=0;r<l.orderedModifiers.length;r++){if((n+=1)>100){console.error("Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.");break}if(!0!==l.reset){var a=l.orderedModifiers[r],s=a.fn,o=a.options,c=void 0===o?{}:o,d=a.name;"function"==typeof s&&(l=s({state:l,options:c,name:d,instance:f})||l)}else l.reset=!1,r=-1}}else console.error(V)}},update:(a=function(){return new Promise((function(e){f.forceUpdate(),e(l)}))},function(){return o||(o=new Promise((function(e){Promise.resolve().then((function(){o=void 0,e(a())}))}))),o}),destroy:function(){v(),u=!0}};if(!X(e,t))return console.error(V),f;function v(){c.forEach((function(e){return e()})),c=[]}return f.setOptions(i).then((function(e){!u&&i.onFirstUpdate&&i.onFirstUpdate(e)})),f}}var K={passive:!0};var U={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,r=e.options,a=r.scroll,s=void 0===a||a,o=r.resize,l=void 0===o||o,c=i(t.elements.popper),d=[].concat(t.scrollParents.reference,t.scrollParents.popper);return s&&d.forEach((function(e){e.addEventListener("scroll",n.update,K)})),l&&c.addEventListener("resize",n.update,K),function(){s&&d.forEach((function(e){e.removeEventListener("scroll",n.update,K)})),l&&c.removeEventListener("resize",n.update,K)}},data:{}};var Q={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,i=e.name;t.modifiersData[i]=H({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},J={top:"auto",right:"auto",bottom:"auto",left:"auto"};function Z(e){var t,n=e.popper,r=e.popperRect,a=e.placement,s=e.offsets,o=e.position,c=e.gpuAcceleration,u=e.adaptive,h=e.roundOffsets,p=!0===h?function(e){var t=e.x,i=e.y,n=window.devicePixelRatio||1;return{x:D(D(t*n)/n)||0,y:D(D(i*n)/n)||0}}(s):"function"==typeof h?h(s):s,f=p.x,m=void 0===f?0:f,v=p.y,g=void 0===v?0:v,x=s.hasOwnProperty("x"),S=s.hasOwnProperty("y"),T=_,C=y,L=window;if(u){var k=b(n),O="clientHeight",M="clientWidth";k===i(n)&&"static"!==d(k=l(n)).position&&(O="scrollHeight",M="scrollWidth"),a===y&&(C=w,g-=k[O]-r.height,g*=c?1:-1),a===_&&(T=E,m-=k[M]-r.width,m*=c?1:-1)}var A,I=Object.assign({position:o},u&&J);return c?Object.assign({},I,((A={})[C]=S?"0":"",A[T]=x?"0":"",A.transform=(L.devicePixelRatio||1)<2?"translate("+m+"px, "+g+"px)":"translate3d("+m+"px, "+g+"px, 0)",A)):Object.assign({},I,((t={})[C]=S?g+"px":"",t[T]=x?m+"px":"",t.transform="",t))}var ee={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,i=e.options,n=i.gpuAcceleration,r=void 0===n||n,a=i.adaptive,s=void 0===a||a,o=i.roundOffsets,l=void 0===o||o,c=d(t.elements.popper).transitionProperty||"";s&&["transform","top","right","bottom","left"].some((function(e){return c.indexOf(e)>=0}))&&console.warn(["Popper: Detected CSS transitions on at least one of the following",'CSS properties: "transform", "top", "right", "bottom", "left".',"\n\n",'Disable the "computeStyles" modifier\'s `adaptive` option to allow',"for smooth transitions, or remove these properties from the CSS","transition declaration on the popper element if only transitioning","opacity or background-color for example.","\n\n","We recommend using the popper element as a wrapper around an inner","element that can have any CSS property transitioned for animations."].join(" "));var u={placement:A(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:r};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,Z(Object.assign({},u,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:s,roundOffsets:l})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,Z(Object.assign({},u,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}};var te={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var i=t.styles[e]||{},n=t.attributes[e]||{},r=t.elements[e];a(r)&&o(r)&&(Object.assign(r.style,i),Object.keys(n).forEach((function(e){var t=n[e];!1===t?r.removeAttribute(e):r.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,i={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,i.popper),t.styles=i,t.elements.arrow&&Object.assign(t.elements.arrow.style,i.arrow),function(){Object.keys(t.elements).forEach((function(e){var n=t.elements[e],r=t.attributes[e]||{},s=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:i[e]).reduce((function(e,t){return e[t]="",e}),{});a(n)&&o(n)&&(Object.assign(n.style,s),Object.keys(r).forEach((function(e){n.removeAttribute(e)})))}))}},requires:["computeStyles"]};var ie={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,i=e.options,n=e.name,r=i.offset,a=void 0===r?[0,0]:r,s=T.reduce((function(e,i){return e[i]=function(e,t,i){var n=A(e),r=[_,y].indexOf(n)>=0?-1:1,a="function"==typeof i?i(Object.assign({},t,{placement:e})):i,s=a[0],o=a[1];return s=s||0,o=(o||0)*r,[_,E].indexOf(n)>=0?{x:o,y:s}:{x:s,y:o}}(i,t.rects,a),e}),{}),o=s[t.placement],l=o.x,c=o.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=l,t.modifiersData.popperOffsets.y+=c),t.modifiersData[n]=s}},ne={left:"right",right:"left",bottom:"top",top:"bottom"};function re(e){return e.replace(/left|right|bottom|top/g,(function(e){return ne[e]}))}var ae={start:"end",end:"start"};function se(e){return e.replace(/start|end/g,(function(e){return ae[e]}))}function oe(e,t){void 0===t&&(t={});var i=t,n=i.placement,r=i.boundary,a=i.rootBoundary,s=i.padding,o=i.flipVariations,l=i.allowedAutoPlacements,c=void 0===l?T:l,d=R(n),u=d?o?S:S.filter((function(e){return R(e)===d})):x,h=u.filter((function(e){return c.indexOf(e)>=0}));0===h.length&&(h=u,console.error(["Popper: The `allowedAutoPlacements` option did not allow any","placements. Ensure the `placement` option matches the variation","of the allowed placements.",'For example, "auto" cannot be used to allow "bottom-start".','Use "auto-start" instead.'].join(" ")));var p=h.reduce((function(t,i){return t[i]=W(e,{placement:i,boundary:r,rootBoundary:a,padding:s})[A(i)],t}),{});return Object.keys(p).sort((function(e,t){return p[e]-p[t]}))}var le={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,i=e.options,n=e.name;if(!t.modifiersData[n]._skip){for(var r=i.mainAxis,a=void 0===r||r,s=i.altAxis,o=void 0===s||s,l=i.fallbackPlacements,c=i.padding,d=i.boundary,u=i.rootBoundary,h=i.altBoundary,p=i.flipVariations,f=void 0===p||p,m=i.allowedAutoPlacements,v=t.options.placement,g=A(v),b=l||(g===v||!f?[re(v)]:function(e){if("auto"===A(e))return[];var t=re(e);return[se(e),t,se(t)]}(v)),x=[v].concat(b).reduce((function(e,i){return e.concat("auto"===A(i)?oe(t,{placement:i,boundary:d,rootBoundary:u,padding:c,flipVariations:f,allowedAutoPlacements:m}):i)}),[]),S=t.rects.reference,T=t.rects.popper,C=new Map,L=!0,k=x[0],O=0;O<x.length;O++){var M=x[O],I=A(M),P="start"===R(M),D=[y,w].indexOf(I)>=0,z=D?"width":"height",j=W(t,{placement:M,boundary:d,rootBoundary:u,altBoundary:h,padding:c}),N=D?P?E:_:P?w:y;S[z]>T[z]&&(N=re(N));var $=re(N),q=[];if(a&&q.push(j[I]<=0),o&&q.push(j[N]<=0,j[$]<=0),q.every((function(e){return e}))){k=M,L=!1;break}C.set(M,q)}if(L)for(var H=function(e){var t=x.find((function(t){var i=C.get(t);if(i)return i.slice(0,e).every((function(e){return e}))}));if(t)return k=t,"break"},B=f?3:1;B>0;B--){if("break"===H(B))break}t.placement!==k&&(t.modifiersData[n]._skip=!0,t.placement=k,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function ce(e,t,i){return I(e,P(t,i))}var de={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,i=e.options,n=e.name,r=i.mainAxis,a=void 0===r||r,s=i.altAxis,o=void 0!==s&&s,l=i.boundary,c=i.rootBoundary,d=i.altBoundary,u=i.padding,h=i.tether,f=void 0===h||h,m=i.tetherOffset,v=void 0===m?0:m,g=W(t,{boundary:l,rootBoundary:c,padding:u,altBoundary:d}),x=A(t.placement),S=R(t.placement),T=!S,C=q(x),L="x"===C?"y":"x",k=t.modifiersData.popperOffsets,O=t.rects.reference,M=t.rects.popper,D="function"==typeof v?v(Object.assign({},t.rects,{placement:t.placement})):v,z={x:0,y:0};if(k){if(a||o){var j="y"===C?y:_,N="y"===C?w:E,$="y"===C?"height":"width",H=k[C],B=k[C]+g[j],F=k[C]-g[N],V=f?-M[$]/2:0,G="start"===S?O[$]:M[$],X="start"===S?-M[$]:-O[$],Y=t.elements.arrow,K=f&&Y?p(Y):{width:0,height:0},U=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},Q=U[j],J=U[N],Z=ce(0,O[$],K[$]),ee=T?O[$]/2-V-Z-Q-D:G-Z-Q-D,te=T?-O[$]/2+V+Z+J+D:X+Z+J+D,ie=t.elements.arrow&&b(t.elements.arrow),ne=ie?"y"===C?ie.clientTop||0:ie.clientLeft||0:0,re=t.modifiersData.offset?t.modifiersData.offset[t.placement][C]:0,ae=k[C]+ee-re-ne,se=k[C]+te-re;if(a){var oe=ce(f?P(B,ae):B,H,f?I(F,se):F);k[C]=oe,z[C]=oe-H}if(o){var le="x"===C?y:_,de="x"===C?w:E,ue=k[L],he=ue+g[le],pe=ue-g[de],fe=ce(f?P(he,ae):he,ue,f?I(pe,se):pe);k[L]=fe,z[L]=fe-ue}}t.modifiersData[n]=z}},requiresIfExists:["offset"]};var ue={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,i=e.state,n=e.name,r=e.options,a=i.elements.arrow,s=i.modifiersData.popperOffsets,o=A(i.placement),l=q(o),c=[_,E].indexOf(o)>=0?"height":"width";if(a&&s){var d=function(e,t){return B("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:F(e,x))}(r.padding,i),u=p(a),h="y"===l?y:_,f="y"===l?w:E,m=i.rects.reference[c]+i.rects.reference[l]-s[l]-i.rects.popper[c],v=s[l]-i.rects.reference[l],g=b(a),S=g?"y"===l?g.clientHeight||0:g.clientWidth||0:0,T=m/2-v/2,C=d[h],L=S-u[c]-d[f],k=S/2-u[c]/2+T,O=ce(C,k,L),M=l;i.modifiersData[n]=((t={})[M]=O,t.centerOffset=O-k,t)}},effect:function(e){var t=e.state,i=e.options.element,n=void 0===i?"[data-popper-arrow]":i;null!=n&&("string"!=typeof n||(n=t.elements.popper.querySelector(n)))&&(a(n)||console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).',"To use an SVG arrow, wrap it in an HTMLElement that will be used as","the arrow."].join(" ")),z(t.elements.popper,n)?t.elements.arrow=n:console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper',"element."].join(" ")))},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function he(e,t,i){return void 0===i&&(i={x:0,y:0}),{top:e.top-t.height-i.y,right:e.right-t.width+i.x,bottom:e.bottom-t.height+i.y,left:e.left-t.width-i.x}}function pe(e){return[y,E,w,_].some((function(t){return e[t]>=0}))}var fe={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,i=e.name,n=t.rects.reference,r=t.rects.popper,a=t.modifiersData.preventOverflow,s=W(t,{elementContext:"reference"}),o=W(t,{altBoundary:!0}),l=he(s,n),c=he(o,r,a),d=pe(l),u=pe(c);t.modifiersData[i]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:d,hasPopperEscaped:u},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":d,"data-popper-escaped":u})}},me=Y({defaultModifiers:[U,Q,ee,te]}),ve=[U,Q,ee,te,ie,le,de,ue,fe],ge=Y({defaultModifiers:ve});e.applyStyles=te,e.arrow=ue,e.computeStyles=ee,e.createPopper=ge,e.createPopperLite=me,e.defaultModifiers=ve,e.detectOverflow=W,e.eventListeners=U,e.flip=le,e.hide=fe,e.offset=ie,e.popperGenerator=Y,e.popperOffsets=Q,e.preventOverflow=de,Object.defineProperty(e,"__esModule",{value:!0})})),function(t,i){"object"==("undefined"==typeof exports?"undefined":e(exports))&&"undefined"!=typeof module?module.exports=i():"function"==typeof define&&define.amd?define(i):(t=t||self).SimpleBar=i()}(void 0,(function(){var t="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function i(e,t){return e(t={exports:{}},t.exports),t.exports}var n,r,a,s="object",o=function(e){return e&&e.Math==Math&&e},l=o(("undefined"==typeof globalThis?"undefined":e(globalThis))==s&&globalThis)||o(("undefined"==typeof window?"undefined":e(window))==s&&window)||o(("undefined"==typeof self?"undefined":e(self))==s&&self)||o(e(t)==s&&t)||Function("return this")(),c=function(e){try{return!!e()}catch(e){return!0}},d=!c((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})),u={}.propertyIsEnumerable,h=Object.getOwnPropertyDescriptor,p={f:h&&!u.call({1:2},1)?function(e){var t=h(this,e);return!!t&&t.enumerable}:u},f=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}},m={}.toString,v=function(e){return m.call(e).slice(8,-1)},g="".split,b=c((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==v(e)?g.call(e,""):Object(e)}:Object,y=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e},w=function(e){return b(y(e))},E=function(t){return"object"==e(t)?null!==t:"function"==typeof t},_=function(e,t){if(!E(e))return e;var i,n;if(t&&"function"==typeof(i=e.toString)&&!E(n=i.call(e)))return n;if("function"==typeof(i=e.valueOf)&&!E(n=i.call(e)))return n;if(!t&&"function"==typeof(i=e.toString)&&!E(n=i.call(e)))return n;throw TypeError("Can't convert object to primitive value")},x={}.hasOwnProperty,S=function(e,t){return x.call(e,t)},T=l.document,C=E(T)&&E(T.createElement),L=function(e){return C?T.createElement(e):{}},k=!d&&!c((function(){return 7!=Object.defineProperty(L("div"),"a",{get:function(){return 7}}).a})),O=Object.getOwnPropertyDescriptor,M={f:d?O:function(e,t){if(e=w(e),t=_(t,!0),k)try{return O(e,t)}catch(e){}if(S(e,t))return f(!p.f.call(e,t),e[t])}},A=function(e){if(!E(e))throw TypeError(String(e)+" is not an object");return e},I=Object.defineProperty,P={f:d?I:function(e,t,i){if(A(e),t=_(t,!0),A(i),k)try{return I(e,t,i)}catch(e){}if("get"in i||"set"in i)throw TypeError("Accessors not supported");return"value"in i&&(e[t]=i.value),e}},D=d?function(e,t,i){return P.f(e,t,f(1,i))}:function(e,t,i){return e[t]=i,e},z=function(e,t){try{D(l,e,t)}catch(i){l[e]=t}return t},j=i((function(e){var t=l["__core-js_shared__"]||z("__core-js_shared__",{});(e.exports=function(e,i){return t[e]||(t[e]=void 0!==i?i:{})})("versions",[]).push({version:"3.2.1",mode:"global",copyright:"Â© 2019 Denis Pushkarev (zloirock.ru)"})})),N=j("native-function-to-string",Function.toString),$=l.WeakMap,R="function"==typeof $&&/native code/.test(N.call($)),q=0,H=Math.random(),B=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++q+H).toString(36)},F=j("keys"),W=function(e){return F[e]||(F[e]=B(e))},V={},G=l.WeakMap;if(R){var X=new G,Y=X.get,K=X.has,U=X.set;n=function(e,t){return U.call(X,e,t),t},r=function(e){return Y.call(X,e)||{}},a=function(e){return K.call(X,e)}}else{var Q=W("state");V[Q]=!0,n=function(e,t){return D(e,Q,t),t},r=function(e){return S(e,Q)?e[Q]:{}},a=function(e){return S(e,Q)}}var J={set:n,get:r,has:a,enforce:function(e){return a(e)?r(e):n(e,{})},getterFor:function(e){return function(t){var i;if(!E(t)||(i=r(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return i}}},Z=i((function(e){var t=J.get,i=J.enforce,n=String(N).split("toString");j("inspectSource",(function(e){return N.call(e)})),(e.exports=function(e,t,r,a){var s=!!a&&!!a.unsafe,o=!!a&&!!a.enumerable,c=!!a&&!!a.noTargetGet;"function"==typeof r&&("string"!=typeof t||S(r,"name")||D(r,"name",t),i(r).source=n.join("string"==typeof t?t:"")),e!==l?(s?!c&&e[t]&&(o=!0):delete e[t],o?e[t]=r:D(e,t,r)):o?e[t]=r:z(t,r)})(Function.prototype,"toString",(function(){return"function"==typeof this&&t(this).source||N.call(this)}))})),ee=l,te=function(e){return"function"==typeof e?e:void 0},ie=function(e,t){return arguments.length<2?te(ee[e])||te(l[e]):ee[e]&&ee[e][t]||l[e]&&l[e][t]},ne=Math.ceil,re=Math.floor,ae=function(e){return isNaN(e=+e)?0:(e>0?re:ne)(e)},se=Math.min,oe=function(e){return e>0?se(ae(e),9007199254740991):0},le=Math.max,ce=Math.min,de=function(e){return function(t,i,n){var r,a=w(t),s=oe(a.length),o=function(e,t){var i=ae(e);return i<0?le(i+t,0):ce(i,t)}(n,s);if(e&&i!=i){for(;s>o;)if((r=a[o++])!=r)return!0}else for(;s>o;o++)if((e||o in a)&&a[o]===i)return e||o||0;return!e&&-1}},ue=(de(!0),de(!1)),he=function(e,t){var i,n=w(e),r=0,a=[];for(i in n)!S(V,i)&&S(n,i)&&a.push(i);for(;t.length>r;)S(n,i=t[r++])&&(~ue(a,i)||a.push(i));return a},pe=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],fe=pe.concat("length","prototype"),me={f:Object.getOwnPropertyNames||function(e){return he(e,fe)}},ve={f:Object.getOwnPropertySymbols},ge=ie("Reflect","ownKeys")||function(e){var t=me.f(A(e)),i=ve.f;return i?t.concat(i(e)):t},be=function(e,t){for(var i=ge(t),n=P.f,r=M.f,a=0;a<i.length;a++){var s=i[a];S(e,s)||n(e,s,r(t,s))}},ye=/#|\.prototype\./,we=function(e,t){var i=_e[Ee(e)];return i==Se||i!=xe&&("function"==typeof t?c(t):!!t)},Ee=we.normalize=function(e){return String(e).replace(ye,".").toLowerCase()},_e=we.data={},xe=we.NATIVE="N",Se=we.POLYFILL="P",Te=we,Ce=M.f,Le=function(t,i){var n,r,a,s,o,c=t.target,d=t.global,u=t.stat;if(n=d?l:u?l[c]||z(c,{}):(l[c]||{}).prototype)for(r in i){if(s=i[r],a=t.noTargetGet?(o=Ce(n,r))&&o.value:n[r],!Te(d?r:c+(u?".":"#")+r,t.forced)&&void 0!==a){if(e(s)==e(a))continue;be(s,a)}(t.sham||a&&a.sham)&&D(s,"sham",!0),Z(n,r,s,t)}},ke=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e},Oe=function(e,t,i){if(ke(e),void 0===t)return e;switch(i){case 0:return function(){return e.call(t)};case 1:return function(i){return e.call(t,i)};case 2:return function(i,n){return e.call(t,i,n)};case 3:return function(i,n,r){return e.call(t,i,n,r)}}return function(){return e.apply(t,arguments)}},Me=function(e){return Object(y(e))},Ae=Array.isArray||function(e){return"Array"==v(e)},Ie=!!Object.getOwnPropertySymbols&&!c((function(){return!String(Symbol())})),Pe=l.Symbol,De=j("wks"),ze=function(e){return De[e]||(De[e]=Ie&&Pe[e]||(Ie?Pe:B)("Symbol."+e))},je=ze("species"),Ne=function(e,t){var i;return Ae(e)&&("function"!=typeof(i=e.constructor)||i!==Array&&!Ae(i.prototype)?E(i)&&null===(i=i[je])&&(i=void 0):i=void 0),new(void 0===i?Array:i)(0===t?0:t)},$e=[].push,Re=function(e){var t=1==e,i=2==e,n=3==e,r=4==e,a=6==e,s=5==e||a;return function(o,l,c,d){for(var u,h,p=Me(o),f=b(p),m=Oe(l,c,3),v=oe(f.length),g=0,y=d||Ne,w=t?y(o,v):i?y(o,0):void 0;v>g;g++)if((s||g in f)&&(h=m(u=f[g],g,p),e))if(t)w[g]=h;else if(h)switch(e){case 3:return!0;case 5:return u;case 6:return g;case 2:$e.call(w,u)}else if(r)return!1;return a?-1:n||r?r:w}},qe={forEach:Re(0),map:Re(1),filter:Re(2),some:Re(3),every:Re(4),find:Re(5),findIndex:Re(6)},He=function(e,t){var i=[][e];return!i||!c((function(){i.call(null,t||function(){throw 1},1)}))},Be=qe.forEach,Fe=He("forEach")?function(e){return Be(this,e,arguments.length>1?arguments[1]:void 0)}:[].forEach;Le({target:"Array",proto:!0,forced:[].forEach!=Fe},{forEach:Fe});var We={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0};for(var Ve in We){var Ge=l[Ve],Xe=Ge&&Ge.prototype;if(Xe&&Xe.forEach!==Fe)try{D(Xe,"forEach",Fe)}catch(t){Xe.forEach=Fe}}var Ye=!("undefined"==typeof window||!window.document||!window.document.createElement),Ke=ze("species"),Ue=qe.filter;Le({target:"Array",proto:!0,forced:!!c((function(){var e=[];return(e.constructor={})[Ke]=function(){return{foo:1}},1!==e.filter(Boolean).foo}))},{filter:function(e){return Ue(this,e,arguments.length>1?arguments[1]:void 0)}});var Qe=Object.keys||function(e){return he(e,pe)},Je=d?Object.defineProperties:function(e,t){A(e);for(var i,n=Qe(t),r=n.length,a=0;r>a;)P.f(e,i=n[a++],t[i]);return e},Ze=ie("document","documentElement"),et=W("IE_PROTO"),tt=function(){},it=function(){var e,t=L("iframe"),i=pe.length;for(t.style.display="none",Ze.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),it=e.F;i--;)delete it.prototype[pe[i]];return it()},nt=Object.create||function(e,t){var i;return null!==e?(tt.prototype=A(e),i=new tt,tt.prototype=null,i[et]=e):i=it(),void 0===t?i:Je(i,t)};V[et]=!0;var rt=ze("unscopables"),at=Array.prototype;null==at[rt]&&D(at,rt,nt(null));var st,ot,lt,ct=function(e){at[rt][e]=!0},dt={},ut=!c((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype})),ht=W("IE_PROTO"),pt=Object.prototype,ft=ut?Object.getPrototypeOf:function(e){return e=Me(e),S(e,ht)?e[ht]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?pt:null},mt=ze("iterator"),vt=!1;[].keys&&("next"in(lt=[].keys())?(ot=ft(ft(lt)))!==Object.prototype&&(st=ot):vt=!0),null==st&&(st={}),S(st,mt)||D(st,mt,(function(){return this}));var gt={IteratorPrototype:st,BUGGY_SAFARI_ITERATORS:vt},bt=P.f,yt=ze("toStringTag"),wt=function(e,t,i){e&&!S(e=i?e:e.prototype,yt)&&bt(e,yt,{configurable:!0,value:t})},Et=gt.IteratorPrototype,_t=function(){return this},xt=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,i={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(i,[]),t=i instanceof Array}catch(e){}return function(i,n){return A(i),function(e){if(!E(e)&&null!==e)throw TypeError("Can't set "+String(e)+" as a prototype")}(n),t?e.call(i,n):i.__proto__=n,i}}():void 0),St=gt.IteratorPrototype,Tt=gt.BUGGY_SAFARI_ITERATORS,Ct=ze("iterator"),Lt=function(){return this},kt=function(e,t,i,n,r,a,s){!function(e,t,i){var n=t+" Iterator";e.prototype=nt(Et,{next:f(1,i)}),wt(e,n,!1),dt[n]=_t}(i,t,n);var o,l,c,d=function(e){if(e===r&&v)return v;if(!Tt&&e in p)return p[e];switch(e){case"keys":case"values":case"entries":return function(){return new i(this,e)}}return function(){return new i(this)}},u=t+" Iterator",h=!1,p=e.prototype,m=p[Ct]||p["@@iterator"]||r&&p[r],v=!Tt&&m||d(r),g="Array"==t&&p.entries||m;if(g&&(o=ft(g.call(new e)),St!==Object.prototype&&o.next&&(ft(o)!==St&&(xt?xt(o,St):"function"!=typeof o[Ct]&&D(o,Ct,Lt)),wt(o,u,!0))),"values"==r&&m&&"values"!==m.name&&(h=!0,v=function(){return m.call(this)}),p[Ct]!==v&&D(p,Ct,v),dt[t]=v,r)if(l={values:d("values"),keys:a?v:d("keys"),entries:d("entries")},s)for(c in l)!Tt&&!h&&c in p||Z(p,c,l[c]);else Le({target:t,proto:!0,forced:Tt||h},l);return l},Ot=J.set,Mt=J.getterFor("Array Iterator"),At=kt(Array,"Array",(function(e,t){Ot(this,{type:"Array Iterator",target:w(e),index:0,kind:t})}),(function(){var e=Mt(this),t=e.target,i=e.kind,n=e.index++;return!t||n>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==i?{value:n,done:!1}:"values"==i?{value:t[n],done:!1}:{value:[n,t[n]],done:!1}}),"values");dt.Arguments=dt.Array,ct("keys"),ct("values"),ct("entries");var It=Object.assign,Pt=!It||c((function(){var e={},t={},i=Symbol();return e[i]=7,"abcdefghijklmnopqrst".split("").forEach((function(e){t[e]=e})),7!=It({},e)[i]||"abcdefghijklmnopqrst"!=Qe(It({},t)).join("")}))?function(e,t){for(var i=Me(e),n=arguments.length,r=1,a=ve.f,s=p.f;n>r;)for(var o,l=b(arguments[r++]),c=a?Qe(l).concat(a(l)):Qe(l),u=c.length,h=0;u>h;)o=c[h++],d&&!s.call(l,o)||(i[o]=l[o]);return i}:It;Le({target:"Object",stat:!0,forced:Object.assign!==Pt},{assign:Pt});var Dt=ze("toStringTag"),zt="Arguments"==v(function(){return arguments}()),jt=function(e){var t,i,n;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(i=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),Dt))?i:zt?v(t):"Object"==(n=v(t))&&"function"==typeof t.callee?"Arguments":n},Nt={};Nt[ze("toStringTag")]="z";var $t="[object z]"!==String(Nt)?function(){return"[object "+jt(this)+"]"}:Nt.toString,Rt=Object.prototype;$t!==Rt.toString&&Z(Rt,"toString",$t,{unsafe:!0});var qt="\t\n\v\f\r Â áââââââââââââ¯âã\u2028\u2029\ufeff",Ht="["+qt+"]",Bt=RegExp("^"+Ht+Ht+"*"),Ft=RegExp(Ht+Ht+"*$"),Wt=function(e){return function(t){var i=String(y(t));return 1&e&&(i=i.replace(Bt,"")),2&e&&(i=i.replace(Ft,"")),i}},Vt=(Wt(1),Wt(2),Wt(3)),Gt=l.parseInt,Xt=/^[+-]?0[Xx]/,Yt=8!==Gt(qt+"08")||22!==Gt(qt+"0x16")?function(e,t){var i=Vt(String(e));return Gt(i,t>>>0||(Xt.test(i)?16:10))}:Gt;Le({global:!0,forced:parseInt!=Yt},{parseInt:Yt});var Kt=function(e){return function(t,i){var n,r,a=String(y(t)),s=ae(i),o=a.length;return s<0||s>=o?e?"":void 0:(n=a.charCodeAt(s))<55296||n>56319||s+1===o||(r=a.charCodeAt(s+1))<56320||r>57343?e?a.charAt(s):n:e?a.slice(s,s+2):r-56320+(n-55296<<10)+65536}},Ut={codeAt:Kt(!1),charAt:Kt(!0)},Qt=Ut.charAt,Jt=J.set,Zt=J.getterFor("String Iterator");kt(String,"String",(function(e){Jt(this,{type:"String Iterator",string:String(e),index:0})}),(function(){var e,t=Zt(this),i=t.string,n=t.index;return n>=i.length?{value:void 0,done:!0}:(e=Qt(i,n),t.index+=e.length,{value:e,done:!1})}));var ei=function(e,t,i){for(var n in t)Z(e,n,t[n],i);return e},ti=!c((function(){return Object.isExtensible(Object.preventExtensions({}))})),ii=i((function(t){var i=P.f,n=B("meta"),r=0,a=Object.isExtensible||function(){return!0},s=function(e){i(e,n,{value:{objectID:"O"+ ++r,weakData:{}}})},o=t.exports={REQUIRED:!1,fastKey:function(t,i){if(!E(t))return"symbol"==e(t)?t:("string"==typeof t?"S":"P")+t;if(!S(t,n)){if(!a(t))return"F";if(!i)return"E";s(t)}return t[n].objectID},getWeakData:function(e,t){if(!S(e,n)){if(!a(e))return!0;if(!t)return!1;s(e)}return e[n].weakData},onFreeze:function(e){return ti&&o.REQUIRED&&a(e)&&!S(e,n)&&s(e),e}};V[n]=!0})),ni=(ii.REQUIRED,ii.fastKey,ii.getWeakData,ii.onFreeze,ze("iterator")),ri=Array.prototype,ai=ze("iterator"),si=function(e,t,i,n){try{return n?t(A(i)[0],i[1]):t(i)}catch(t){var r=e.return;throw void 0!==r&&A(r.call(e)),t}},oi=i((function(e){var t=function(e,t){this.stopped=e,this.result=t};(e.exports=function(e,i,n,r,a){var s,o,l,c,d,u,h,p=Oe(i,n,r?2:1);if(a)s=e;else{if("function"!=typeof(o=function(e){if(null!=e)return e[ai]||e["@@iterator"]||dt[jt(e)]}(e)))throw TypeError("Target is not iterable");if(void 0!==(h=o)&&(dt.Array===h||ri[ni]===h)){for(l=0,c=oe(e.length);c>l;l++)if((d=r?p(A(u=e[l])[0],u[1]):p(e[l]))&&d instanceof t)return d;return new t(!1)}s=o.call(e)}for(;!(u=s.next()).done;)if((d=si(s,p,u.value,r))&&d instanceof t)return d;return new t(!1)}).stop=function(e){return new t(!0,e)}})),li=function(e,t,i){if(!(e instanceof t))throw TypeError("Incorrect "+(i?i+" ":"")+"invocation");return e},ci=ze("iterator"),di=!1;try{var ui=0,hi={next:function(){return{done:!!ui++}},return:function(){di=!0}};hi[ci]=function(){return this},Array.from(hi,(function(){throw 2}))}catch(t){}var pi=function(e,t,i,n,r){var a=l[e],s=a&&a.prototype,o=a,d=n?"set":"add",u={},h=function(e){var t=s[e];Z(s,e,"add"==e?function(e){return t.call(this,0===e?0:e),this}:"delete"==e?function(e){return!(r&&!E(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return r&&!E(e)?void 0:t.call(this,0===e?0:e)}:"has"==e?function(e){return!(r&&!E(e))&&t.call(this,0===e?0:e)}:function(e,i){return t.call(this,0===e?0:e,i),this})};if(Te(e,"function"!=typeof a||!(r||s.forEach&&!c((function(){(new a).entries().next()})))))o=i.getConstructor(t,e,n,d),ii.REQUIRED=!0;else if(Te(e,!0)){var p=new o,f=p[d](r?{}:-0,1)!=p,m=c((function(){p.has(1)})),v=function(e,t){if(!di)return!1;var i=!1;try{var n={};n[ci]=function(){return{next:function(){return{done:i=!0}}}},function(e){new a(e)}(n)}catch(e){}return i}(),g=!r&&c((function(){for(var e=new a,t=5;t--;)e[d](t,t);return!e.has(-0)}));v||((o=t((function(t,i){li(t,o,e);var r=function(e,t,i){var n,r;return xt&&"function"==typeof(n=t.constructor)&&n!==i&&E(r=n.prototype)&&r!==i.prototype&&xt(e,r),e}(new a,t,o);return null!=i&&oi(i,r[d],r,n),r}))).prototype=s,s.constructor=o),(m||g)&&(h("delete"),h("has"),n&&h("get")),(g||f)&&h(d),r&&s.clear&&delete s.clear}return u[e]=o,Le({global:!0,forced:o!=a},u),wt(o,e),r||i.setStrong(o,e,n),o},fi=ii.getWeakData,mi=J.set,vi=J.getterFor,gi=qe.find,bi=qe.findIndex,yi=0,wi=function(e){return e.frozen||(e.frozen=new Ei)},Ei=function(){this.entries=[]},_i=function(e,t){return gi(e.entries,(function(e){return e[0]===t}))};Ei.prototype={get:function(e){var t=_i(this,e);if(t)return t[1]},has:function(e){return!!_i(this,e)},set:function(e,t){var i=_i(this,e);i?i[1]=t:this.entries.push([e,t])},delete:function(e){var t=bi(this.entries,(function(t){return t[0]===e}));return~t&&this.entries.splice(t,1),!!~t}};var xi={getConstructor:function(e,t,i,n){var r=e((function(e,a){li(e,r,t),mi(e,{type:t,id:yi++,frozen:void 0}),null!=a&&oi(a,e[n],e,i)})),a=vi(t),s=function(e,t,i){var n=a(e),r=fi(A(t),!0);return!0===r?wi(n).set(t,i):r[n.id]=i,e};return ei(r.prototype,{delete:function(e){var t=a(this);if(!E(e))return!1;var i=fi(e);return!0===i?wi(t).delete(e):i&&S(i,t.id)&&delete i[t.id]},has:function(e){var t=a(this);if(!E(e))return!1;var i=fi(e);return!0===i?wi(t).has(e):i&&S(i,t.id)}}),ei(r.prototype,i?{get:function(e){var t=a(this);if(E(e)){var i=fi(e);return!0===i?wi(t).get(e):i?i[t.id]:void 0}},set:function(e,t){return s(this,e,t)}}:{add:function(e){return s(this,e,!0)}}),r}},Si=(i((function(e){var t,i=J.enforce,n=!l.ActiveXObject&&"ActiveXObject"in l,r=Object.isExtensible,a=function(e){return function(){return e(this,arguments.length?arguments[0]:void 0)}},s=e.exports=pi("WeakMap",a,xi,!0,!0);if(R&&n){t=xi.getConstructor(a,"WeakMap",!0),ii.REQUIRED=!0;var o=s.prototype,c=o.delete,d=o.has,u=o.get,h=o.set;ei(o,{delete:function(e){if(E(e)&&!r(e)){var n=i(this);return n.frozen||(n.frozen=new t),c.call(this,e)||n.frozen.delete(e)}return c.call(this,e)},has:function(e){if(E(e)&&!r(e)){var n=i(this);return n.frozen||(n.frozen=new t),d.call(this,e)||n.frozen.has(e)}return d.call(this,e)},get:function(e){if(E(e)&&!r(e)){var n=i(this);return n.frozen||(n.frozen=new t),d.call(this,e)?u.call(this,e):n.frozen.get(e)}return u.call(this,e)},set:function(e,n){if(E(e)&&!r(e)){var a=i(this);a.frozen||(a.frozen=new t),d.call(this,e)?h.call(this,e,n):a.frozen.set(e,n)}else h.call(this,e,n);return this}})}})),ze("iterator")),Ti=ze("toStringTag"),Ci=At.values;for(var Li in We){var ki=l[Li],Oi=ki&&ki.prototype;if(Oi){if(Oi[Si]!==Ci)try{D(Oi,Si,Ci)}catch(t){Oi[Si]=Ci}if(Oi[Ti]||D(Oi,Ti,Li),We[Li])for(var Mi in At)if(Oi[Mi]!==At[Mi])try{D(Oi,Mi,At[Mi])}catch(t){Oi[Mi]=At[Mi]}}}var Ai="Expected a function",Ii=/^\s+|\s+$/g,Pi=/^[-+]0x[0-9a-f]+$/i,Di=/^0b[01]+$/i,zi=/^0o[0-7]+$/i,ji=parseInt,Ni="object"==e(t)&&t&&t.Object===Object&&t,$i="object"==("undefined"==typeof self?"undefined":e(self))&&self&&self.Object===Object&&self,Ri=Ni||$i||Function("return this")(),qi=Object.prototype.toString,Hi=Math.max,Bi=Math.min,Fi=function(){return Ri.Date.now()};function Wi(t){var i=e(t);return!!t&&("object"==i||"function"==i)}function Vi(t){if("number"==typeof t)return t;if(function(t){return"symbol"==e(t)||function(t){return!!t&&"object"==e(t)}(t)&&"[object Symbol]"==qi.call(t)}(t))return NaN;if(Wi(t)){var i="function"==typeof t.valueOf?t.valueOf():t;t=Wi(i)?i+"":i}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(Ii,"");var n=Di.test(t);return n||zi.test(t)?ji(t.slice(2),n?2:8):Pi.test(t)?NaN:+t}var Gi=function(e,t,i){var n=!0,r=!0;if("function"!=typeof e)throw new TypeError(Ai);return Wi(i)&&(n="leading"in i?!!i.leading:n,r="trailing"in i?!!i.trailing:r),function(e,t,i){var n,r,a,s,o,l,c=0,d=!1,u=!1,h=!0;if("function"!=typeof e)throw new TypeError(Ai);function p(t){var i=n,a=r;return n=r=void 0,c=t,s=e.apply(a,i)}function f(e){var i=e-l;return void 0===l||i>=t||i<0||u&&e-c>=a}function m(){var e=Fi();if(f(e))return v(e);o=setTimeout(m,function(e){var i=t-(e-l);return u?Bi(i,a-(e-c)):i}(e))}function v(e){return o=void 0,h&&n?p(e):(n=r=void 0,s)}function g(){var e=Fi(),i=f(e);if(n=arguments,r=this,l=e,i){if(void 0===o)return function(e){return c=e,o=setTimeout(m,t),d?p(e):s}(l);if(u)return o=setTimeout(m,t),p(l)}return void 0===o&&(o=setTimeout(m,t)),s}return t=Vi(t)||0,Wi(i)&&(d=!!i.leading,a=(u="maxWait"in i)?Hi(Vi(i.maxWait)||0,t):a,h="trailing"in i?!!i.trailing:h),g.cancel=function(){void 0!==o&&clearTimeout(o),c=0,n=l=r=o=void 0},g.flush=function(){return void 0===o?s:v(Fi())},g}(e,t,{leading:n,maxWait:t,trailing:r})},Xi=/^\s+|\s+$/g,Yi=/^[-+]0x[0-9a-f]+$/i,Ki=/^0b[01]+$/i,Ui=/^0o[0-7]+$/i,Qi=parseInt,Ji="object"==e(t)&&t&&t.Object===Object&&t,Zi="object"==("undefined"==typeof self?"undefined":e(self))&&self&&self.Object===Object&&self,en=Ji||Zi||Function("return this")(),tn=Object.prototype.toString,nn=Math.max,rn=Math.min,an=function(){return en.Date.now()};function sn(t){var i=e(t);return!!t&&("object"==i||"function"==i)}function on(t){if("number"==typeof t)return t;if(function(t){return"symbol"==e(t)||function(t){return!!t&&"object"==e(t)}(t)&&"[object Symbol]"==tn.call(t)}(t))return NaN;if(sn(t)){var i="function"==typeof t.valueOf?t.valueOf():t;t=sn(i)?i+"":i}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(Xi,"");var n=Ki.test(t);return n||Ui.test(t)?Qi(t.slice(2),n?2:8):Yi.test(t)?NaN:+t}var ln=function(e,t,i){var n,r,a,s,o,l,c=0,d=!1,u=!1,h=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function p(t){var i=n,a=r;return n=r=void 0,c=t,s=e.apply(a,i)}function f(e){var i=e-l;return void 0===l||i>=t||i<0||u&&e-c>=a}function m(){var e=an();if(f(e))return v(e);o=setTimeout(m,function(e){var i=t-(e-l);return u?rn(i,a-(e-c)):i}(e))}function v(e){return o=void 0,h&&n?p(e):(n=r=void 0,s)}function g(){var e=an(),i=f(e);if(n=arguments,r=this,l=e,i){if(void 0===o)return function(e){return c=e,o=setTimeout(m,t),d?p(e):s}(l);if(u)return o=setTimeout(m,t),p(l)}return void 0===o&&(o=setTimeout(m,t)),s}return t=on(t)||0,sn(i)&&(d=!!i.leading,a=(u="maxWait"in i)?nn(on(i.maxWait)||0,t):a,h="trailing"in i?!!i.trailing:h),g.cancel=function(){void 0!==o&&clearTimeout(o),c=0,n=l=r=o=void 0},g.flush=function(){return void 0===o?s:v(an())},g},cn="__lodash_hash_undefined__",dn=/^\[object .+?Constructor\]$/,un="object"==e(t)&&t&&t.Object===Object&&t,hn="object"==("undefined"==typeof self?"undefined":e(self))&&self&&self.Object===Object&&self,pn=un||hn||Function("return this")(),fn=Array.prototype,mn=Function.prototype,vn=Object.prototype,gn=pn["__core-js_shared__"],bn=function(){var e=/[^.]+$/.exec(gn&&gn.keys&&gn.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}(),yn=mn.toString,wn=vn.hasOwnProperty,En=vn.toString,_n=RegExp("^"+yn.call(wn).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),xn=fn.splice,Sn=An(pn,"Map"),Tn=An(Object,"create");function Cn(e){var t=-1,i=e?e.length:0;for(this.clear();++t<i;){var n=e[t];this.set(n[0],n[1])}}function Ln(e){var t=-1,i=e?e.length:0;for(this.clear();++t<i;){var n=e[t];this.set(n[0],n[1])}}function kn(e){var t=-1,i=e?e.length:0;for(this.clear();++t<i;){var n=e[t];this.set(n[0],n[1])}}function On(e,t){for(var i,n,r=e.length;r--;)if((i=e[r][0])===(n=t)||i!=i&&n!=n)return r;return-1}function Mn(t,i){var n,r,a=t.__data__;return("string"==(r=e(n=i))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?a["string"==typeof i?"string":"hash"]:a.map}function An(e,t){var i=function(e,t){return null==e?void 0:e[t]}(e,t);return function(e){return!(!Pn(e)||(t=e,bn&&bn in t))&&(function(e){var t=Pn(e)?En.call(e):"";return"[object Function]"==t||"[object GeneratorFunction]"==t}(e)||function(e){var t=!1;if(null!=e&&"function"!=typeof e.toString)try{t=!!(e+"")}catch(e){}return t}(e)?_n:dn).test(function(e){if(null!=e){try{return yn.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e));var t}(i)?i:void 0}function In(e,t){if("function"!=typeof e||t&&"function"!=typeof t)throw new TypeError("Expected a function");var i=function i(){var n=arguments,r=t?t.apply(this,n):n[0],a=i.cache;if(a.has(r))return a.get(r);var s=e.apply(this,n);return i.cache=a.set(r,s),s};return i.cache=new(In.Cache||kn),i}function Pn(t){var i=e(t);return!!t&&("object"==i||"function"==i)}Cn.prototype.clear=function(){this.__data__=Tn?Tn(null):{}},Cn.prototype.delete=function(e){return this.has(e)&&delete this.__data__[e]},Cn.prototype.get=function(e){var t=this.__data__;if(Tn){var i=t[e];return i===cn?void 0:i}return wn.call(t,e)?t[e]:void 0},Cn.prototype.has=function(e){var t=this.__data__;return Tn?void 0!==t[e]:wn.call(t,e)},Cn.prototype.set=function(e,t){return this.__data__[e]=Tn&&void 0===t?cn:t,this},Ln.prototype.clear=function(){this.__data__=[]},Ln.prototype.delete=function(e){var t=this.__data__,i=On(t,e);return!(i<0||(i==t.length-1?t.pop():xn.call(t,i,1),0))},Ln.prototype.get=function(e){var t=this.__data__,i=On(t,e);return i<0?void 0:t[i][1]},Ln.prototype.has=function(e){return On(this.__data__,e)>-1},Ln.prototype.set=function(e,t){var i=this.__data__,n=On(i,e);return n<0?i.push([e,t]):i[n][1]=t,this},kn.prototype.clear=function(){this.__data__={hash:new Cn,map:new(Sn||Ln),string:new Cn}},kn.prototype.delete=function(e){return Mn(this,e).delete(e)},kn.prototype.get=function(e){return Mn(this,e).get(e)},kn.prototype.has=function(e){return Mn(this,e).has(e)},kn.prototype.set=function(e,t){return Mn(this,e).set(e,t),this},In.Cache=kn;var Dn=In,zn=function(){if("undefined"!=typeof Map)return Map;function e(e,t){var i=-1;return e.some((function(e,n){return e[0]===t&&(i=n,!0)})),i}return function(){function t(){this.__entries__=[]}return Object.defineProperty(t.prototype,"size",{get:function(){return this.__entries__.length},enumerable:!0,configurable:!0}),t.prototype.get=function(t){var i=e(this.__entries__,t),n=this.__entries__[i];return n&&n[1]},t.prototype.set=function(t,i){var n=e(this.__entries__,t);~n?this.__entries__[n][1]=i:this.__entries__.push([t,i])},t.prototype.delete=function(t){var i=this.__entries__,n=e(i,t);~n&&i.splice(n,1)},t.prototype.has=function(t){return!!~e(this.__entries__,t)},t.prototype.clear=function(){this.__entries__.splice(0)},t.prototype.forEach=function(e,t){void 0===t&&(t=null);for(var i=0,n=this.__entries__;i<n.length;i++){var r=n[i];e.call(t,r[1],r[0])}},t}()}(),jn="undefined"!=typeof window&&"undefined"!=typeof document&&window.document===document,Nn="undefined"!=typeof global&&global.Math===Math?global:"undefined"!=typeof self&&self.Math===Math?self:"undefined"!=typeof window&&window.Math===Math?window:Function("return this")(),$n="function"==typeof requestAnimationFrame?requestAnimationFrame.bind(Nn):function(e){return setTimeout((function(){return e(Date.now())}),1e3/60)},Rn=["top","right","bottom","left","width","height","size","weight"],qn="undefined"!=typeof MutationObserver,Hn=function(){function e(){this.connected_=!1,this.mutationEventsAdded_=!1,this.mutationsObserver_=null,this.observers_=[],this.onTransitionEnd_=this.onTransitionEnd_.bind(this),this.refresh=function(e,t){var i=!1,n=!1,r=0;function a(){i&&(i=!1,e()),n&&o()}function s(){$n(a)}function o(){var e=Date.now();if(i){if(e-r<2)return;n=!0}else i=!0,n=!1,setTimeout(s,20);r=e}return o}(this.refresh.bind(this))}return e.prototype.addObserver=function(e){~this.observers_.indexOf(e)||this.observers_.push(e),this.connected_||this.connect_()},e.prototype.removeObserver=function(e){var t=this.observers_,i=t.indexOf(e);~i&&t.splice(i,1),!t.length&&this.connected_&&this.disconnect_()},e.prototype.refresh=function(){this.updateObservers_()&&this.refresh()},e.prototype.updateObservers_=function(){var e=this.observers_.filter((function(e){return e.gatherActive(),e.hasActive()}));return e.forEach((function(e){return e.broadcastActive()})),e.length>0},e.prototype.connect_=function(){jn&&!this.connected_&&(document.addEventListener("transitionend",this.onTransitionEnd_),window.addEventListener("resize",this.refresh),qn?(this.mutationsObserver_=new MutationObserver(this.refresh),this.mutationsObserver_.observe(document,{attributes:!0,childList:!0,characterData:!0,subtree:!0})):(document.addEventListener("DOMSubtreeModified",this.refresh),this.mutationEventsAdded_=!0),this.connected_=!0)},e.prototype.disconnect_=function(){jn&&this.connected_&&(document.removeEventListener("transitionend",this.onTransitionEnd_),window.removeEventListener("resize",this.refresh),this.mutationsObserver_&&this.mutationsObserver_.disconnect(),this.mutationEventsAdded_&&document.removeEventListener("DOMSubtreeModified",this.refresh),this.mutationsObserver_=null,this.mutationEventsAdded_=!1,this.connected_=!1)},e.prototype.onTransitionEnd_=function(e){var t=e.propertyName,i=void 0===t?"":t;Rn.some((function(e){return!!~i.indexOf(e)}))&&this.refresh()},e.getInstance=function(){return this.instance_||(this.instance_=new e),this.instance_},e.instance_=null,e}(),Bn=function(e,t){for(var i=0,n=Object.keys(t);i<n.length;i++){var r=n[i];Object.defineProperty(e,r,{value:t[r],enumerable:!1,writable:!1,configurable:!0})}return e},Fn=function(e){return e&&e.ownerDocument&&e.ownerDocument.defaultView||Nn},Wn=Kn(0,0,0,0);function Vn(e){return parseFloat(e)||0}function Gn(e){for(var t=[],i=1;i<arguments.length;i++)t[i-1]=arguments[i];return t.reduce((function(t,i){return t+Vn(e["border-"+i+"-width"])}),0)}var Xn="undefined"!=typeof SVGGraphicsElement?function(e){return e instanceof Fn(e).SVGGraphicsElement}:function(e){return e instanceof Fn(e).SVGElement&&"function"==typeof e.getBBox};function Yn(e){return jn?Xn(e)?function(e){var t=e.getBBox();return Kn(0,0,t.width,t.height)}(e):function(e){var t=e.clientWidth,i=e.clientHeight;if(!t&&!i)return Wn;var n=Fn(e).getComputedStyle(e),r=function(e){for(var t={},i=0,n=["top","right","bottom","left"];i<n.length;i++){var r=n[i],a=e["padding-"+r];t[r]=Vn(a)}return t}(n),a=r.left+r.right,s=r.top+r.bottom,o=Vn(n.width),l=Vn(n.height);if("border-box"===n.boxSizing&&(Math.round(o+a)!==t&&(o-=Gn(n,"left","right")+a),Math.round(l+s)!==i&&(l-=Gn(n,"top","bottom")+s)),!function(e){return e===Fn(e).document.documentElement}(e)){var c=Math.round(o+a)-t,d=Math.round(l+s)-i;1!==Math.abs(c)&&(o-=c),1!==Math.abs(d)&&(l-=d)}return Kn(r.left,r.top,o,l)}(e):Wn}function Kn(e,t,i,n){return{x:e,y:t,width:i,height:n}}var Un=function(){function e(e){this.broadcastWidth=0,this.broadcastHeight=0,this.contentRect_=Kn(0,0,0,0),this.target=e}return e.prototype.isActive=function(){var e=Yn(this.target);return this.contentRect_=e,e.width!==this.broadcastWidth||e.height!==this.broadcastHeight},e.prototype.broadcastRect=function(){var e=this.contentRect_;return this.broadcastWidth=e.width,this.broadcastHeight=e.height,e},e}(),Qn=function(e,t){var i,n,r,a,s,o,l,c=(n=(i=t).x,r=i.y,a=i.width,s=i.height,o="undefined"!=typeof DOMRectReadOnly?DOMRectReadOnly:Object,l=Object.create(o.prototype),Bn(l,{x:n,y:r,width:a,height:s,top:r,right:n+a,bottom:s+r,left:n}),l);Bn(this,{target:e,contentRect:c})},Jn=function(){function e(e,t,i){if(this.activeObservations_=[],this.observations_=new zn,"function"!=typeof e)throw new TypeError("The callback provided as parameter 1 is not a function.");this.callback_=e,this.controller_=t,this.callbackCtx_=i}return e.prototype.observe=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof Fn(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)||(t.set(e,new Un(e)),this.controller_.addObserver(this),this.controller_.refresh())}},e.prototype.unobserve=function(e){if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");if("undefined"!=typeof Element&&Element instanceof Object){if(!(e instanceof Fn(e).Element))throw new TypeError('parameter 1 is not of type "Element".');var t=this.observations_;t.has(e)&&(t.delete(e),t.size||this.controller_.removeObserver(this))}},e.prototype.disconnect=function(){this.clearActive(),this.observations_.clear(),this.controller_.removeObserver(this)},e.prototype.gatherActive=function(){var e=this;this.clearActive(),this.observations_.forEach((function(t){t.isActive()&&e.activeObservations_.push(t)}))},e.prototype.broadcastActive=function(){if(this.hasActive()){var e=this.callbackCtx_,t=this.activeObservations_.map((function(e){return new Qn(e.target,e.broadcastRect())}));this.callback_.call(e,t,e),this.clearActive()}},e.prototype.clearActive=function(){this.activeObservations_.splice(0)},e.prototype.hasActive=function(){return this.activeObservations_.length>0},e}(),Zn="undefined"!=typeof WeakMap?new WeakMap:new zn,er=function e(t){if(!(this instanceof e))throw new TypeError("Cannot call a class as a function.");if(!arguments.length)throw new TypeError("1 argument required, but only 0 present.");var i=Hn.getInstance(),n=new Jn(t,i,this);Zn.set(this,n)};["observe","unobserve","disconnect"].forEach((function(e){er.prototype[e]=function(){var t;return(t=Zn.get(this))[e].apply(t,arguments)}}));var tr=void 0!==Nn.ResizeObserver?Nn.ResizeObserver:er,ir=null,nr=null;function rr(){if(null===ir){if("undefined"==typeof document)return ir=0;var e=document.body,t=document.createElement("div");t.classList.add("simplebar-hide-scrollbar"),e.appendChild(t);var i=t.getBoundingClientRect().right;e.removeChild(t),ir=i}return ir}Ye&&window.addEventListener("resize",(function(){nr!==window.devicePixelRatio&&(nr=window.devicePixelRatio,ir=null)}));var ar=function(e){return function(t,i,n,r){ke(i);var a=Me(t),s=b(a),o=oe(a.length),l=e?o-1:0,c=e?-1:1;if(n<2)for(;;){if(l in s){r=s[l],l+=c;break}if(l+=c,e?l<0:o<=l)throw TypeError("Reduce of empty array with no initial value")}for(;e?l>=0:o>l;l+=c)l in s&&(r=i(r,s[l],l,a));return r}},sr=[ar(!1),ar(!0)][0];Le({target:"Array",proto:!0,forced:He("reduce")},{reduce:function(e){return sr(this,e,arguments.length,arguments.length>1?arguments[1]:void 0)}});var or=P.f,lr=Function.prototype,cr=lr.toString,dr=/^\s*function ([^ (]*)/;!d||"name"in lr||or(lr,"name",{configurable:!0,get:function(){try{return cr.call(this).match(dr)[1]}catch(e){return""}}});var ur,hr,pr=function(){var e=A(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.dotAll&&(t+="s"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t},fr=RegExp.prototype.exec,mr=String.prototype.replace,vr=fr,gr=(ur=/a/,hr=/b*/g,fr.call(ur,"a"),fr.call(hr,"a"),0!==ur.lastIndex||0!==hr.lastIndex),br=void 0!==/()??/.exec("")[1];(gr||br)&&(vr=function(e){var t,i,n,r,a=this;return br&&(i=new RegExp("^"+a.source+"$(?!\\s)",pr.call(a))),gr&&(t=a.lastIndex),n=fr.call(a,e),gr&&n&&(a.lastIndex=a.global?n.index+n[0].length:t),br&&n&&n.length>1&&mr.call(n[0],i,(function(){for(r=1;r<arguments.length-2;r++)void 0===arguments[r]&&(n[r]=void 0)})),n});var yr=vr;Le({target:"RegExp",proto:!0,forced:/./.exec!==yr},{exec:yr});var wr=ze("species"),Er=!c((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),_r=!c((function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var i="ab".split(e);return 2!==i.length||"a"!==i[0]||"b"!==i[1]})),xr=function(e,t,i,n){var r=ze(e),a=!c((function(){var t={};return t[r]=function(){return 7},7!=""[e](t)})),s=a&&!c((function(){var t=!1,i=/a/;return i.exec=function(){return t=!0,null},"split"===e&&(i.constructor={},i.constructor[wr]=function(){return i}),i[r](""),!t}));if(!a||!s||"replace"===e&&!Er||"split"===e&&!_r){var o=/./[r],l=i(r,""[e],(function(e,t,i,n,r){return t.exec===yr?a&&!r?{done:!0,value:o.call(t,i,n)}:{done:!0,value:e.call(i,t,n)}:{done:!1}})),d=l[0],u=l[1];Z(String.prototype,e,d),Z(RegExp.prototype,r,2==t?function(e,t){return u.call(e,this,t)}:function(e){return u.call(e,this)}),n&&D(RegExp.prototype[r],"sham",!0)}},Sr=Ut.charAt,Tr=function(e,t,i){return t+(i?Sr(e,t).length:1)},Cr=function(t,i){var n=t.exec;if("function"==typeof n){var r=n.call(t,i);if("object"!=e(r))throw TypeError("RegExp exec method returned something other than an Object or null");return r}if("RegExp"!==v(t))throw TypeError("RegExp#exec called on incompatible receiver");return yr.call(t,i)};xr("match",1,(function(e,t,i){return[function(t){var i=y(this),n=null==t?void 0:t[e];return void 0!==n?n.call(t,i):new RegExp(t)[e](String(i))},function(e){var n=i(t,e,this);if(n.done)return n.value;var r=A(e),a=String(this);if(!r.global)return Cr(r,a);var s=r.unicode;r.lastIndex=0;for(var o,l=[],c=0;null!==(o=Cr(r,a));){var d=String(o[0]);l[c]=d,""===d&&(r.lastIndex=Tr(a,oe(r.lastIndex),s)),c++}return 0===c?null:l}]}));var Lr=Math.max,kr=Math.min,Or=Math.floor,Mr=/\$([$&'`]|\d\d?|<[^>]*>)/g,Ar=/\$([$&'`]|\d\d?)/g;xr("replace",2,(function(e,t,i){return[function(i,n){var r=y(this),a=null==i?void 0:i[e];return void 0!==a?a.call(i,r,n):t.call(String(r),i,n)},function(e,r){var a=i(t,e,this,r);if(a.done)return a.value;var s=A(e),o=String(this),l="function"==typeof r;l||(r=String(r));var c=s.global;if(c){var d=s.unicode;s.lastIndex=0}for(var u=[];;){var h=Cr(s,o);if(null===h)break;if(u.push(h),!c)break;""===String(h[0])&&(s.lastIndex=Tr(o,oe(s.lastIndex),d))}for(var p,f="",m=0,v=0;v<u.length;v++){h=u[v];for(var g=String(h[0]),b=Lr(kr(ae(h.index),o.length),0),y=[],w=1;w<h.length;w++)y.push(void 0===(p=h[w])?p:String(p));var E=h.groups;if(l){var _=[g].concat(y,b,o);void 0!==E&&_.push(E);var x=String(r.apply(void 0,_))}else x=n(g,o,b,y,E,r);b>=m&&(f+=o.slice(m,b)+x,m=b+g.length)}return f+o.slice(m)}];function n(e,i,n,r,a,s){var o=n+e.length,l=r.length,c=Ar;return void 0!==a&&(a=Me(a),c=Mr),t.call(s,c,(function(t,s){var c;switch(s.charAt(0)){case"$":return"$";case"&":return e;case"`":return i.slice(0,n);case"'":return i.slice(o);case"<":c=a[s.slice(1,-1)];break;default:var d=+s;if(0===d)return t;if(d>l){var u=Or(d/10);return 0===u?t:u<=l?void 0===r[u-1]?s.charAt(1):r[u-1]+s.charAt(1):t}c=r[d-1]}return void 0===c?"":c}))}}));var Ir=function(e){return Array.prototype.reduce.call(e,(function(e,t){var i=t.name.match(/data-simplebar-(.+)/);if(i){var n=i[1].replace(/\W+(.)/g,(function(e,t){return t.toUpperCase()}));switch(t.value){case"true":e[n]=!0;break;case"false":e[n]=!1;break;case void 0:e[n]=!0;break;default:e[n]=t.value}}return e}),{})};function Pr(e){return e&&e.ownerDocument&&e.ownerDocument.defaultView?e.ownerDocument.defaultView:window}function Dr(e){return e&&e.ownerDocument?e.ownerDocument:document}var zr=function(){function e(t,i){var n=this;this.onScroll=function(){var e=Pr(n.el);n.scrollXTicking||(e.requestAnimationFrame(n.scrollX),n.scrollXTicking=!0),n.scrollYTicking||(e.requestAnimationFrame(n.scrollY),n.scrollYTicking=!0)},this.scrollX=function(){n.axis.x.isOverflowing&&(n.showScrollbar("x"),n.positionScrollbar("x")),n.scrollXTicking=!1},this.scrollY=function(){n.axis.y.isOverflowing&&(n.showScrollbar("y"),n.positionScrollbar("y")),n.scrollYTicking=!1},this.onMouseEnter=function(){n.showScrollbar("x"),n.showScrollbar("y")},this.onMouseMove=function(e){n.mouseX=e.clientX,n.mouseY=e.clientY,(n.axis.x.isOverflowing||n.axis.x.forceVisible)&&n.onMouseMoveForAxis("x"),(n.axis.y.isOverflowing||n.axis.y.forceVisible)&&n.onMouseMoveForAxis("y")},this.onMouseLeave=function(){n.onMouseMove.cancel(),(n.axis.x.isOverflowing||n.axis.x.forceVisible)&&n.onMouseLeaveForAxis("x"),(n.axis.y.isOverflowing||n.axis.y.forceVisible)&&n.onMouseLeaveForAxis("y"),n.mouseX=-1,n.mouseY=-1},this.onWindowResize=function(){n.scrollbarWidth=n.getScrollbarWidth(),n.hideNativeScrollbar()},this.hideScrollbars=function(){n.axis.x.track.rect=n.axis.x.track.el.getBoundingClientRect(),n.axis.y.track.rect=n.axis.y.track.el.getBoundingClientRect(),n.isWithinBounds(n.axis.y.track.rect)||(n.axis.y.scrollbar.el.classList.remove(n.classNames.visible),n.axis.y.isVisible=!1),n.isWithinBounds(n.axis.x.track.rect)||(n.axis.x.scrollbar.el.classList.remove(n.classNames.visible),n.axis.x.isVisible=!1)},this.onPointerEvent=function(e){var t,i;n.axis.x.track.rect=n.axis.x.track.el.getBoundingClientRect(),n.axis.y.track.rect=n.axis.y.track.el.getBoundingClientRect(),(n.axis.x.isOverflowing||n.axis.x.forceVisible)&&(t=n.isWithinBounds(n.axis.x.track.rect)),(n.axis.y.isOverflowing||n.axis.y.forceVisible)&&(i=n.isWithinBounds(n.axis.y.track.rect)),(t||i)&&(e.preventDefault(),e.stopPropagation(),"mousedown"===e.type&&(t&&(n.axis.x.scrollbar.rect=n.axis.x.scrollbar.el.getBoundingClientRect(),n.isWithinBounds(n.axis.x.scrollbar.rect)?n.onDragStart(e,"x"):n.onTrackClick(e,"x")),i&&(n.axis.y.scrollbar.rect=n.axis.y.scrollbar.el.getBoundingClientRect(),n.isWithinBounds(n.axis.y.scrollbar.rect)?n.onDragStart(e,"y"):n.onTrackClick(e,"y"))))},this.drag=function(t){var i=n.axis[n.draggedAxis].track,r=i.rect[n.axis[n.draggedAxis].sizeAttr],a=n.axis[n.draggedAxis].scrollbar,s=n.contentWrapperEl[n.axis[n.draggedAxis].scrollSizeAttr],o=parseInt(n.elStyles[n.axis[n.draggedAxis].sizeAttr],10);t.preventDefault(),t.stopPropagation();var l=(("y"===n.draggedAxis?t.pageY:t.pageX)-i.rect[n.axis[n.draggedAxis].offsetAttr]-n.axis[n.draggedAxis].dragOffset)/(r-a.size)*(s-o);"x"===n.draggedAxis&&(l=n.isRtl&&e.getRtlHelpers().isRtlScrollbarInverted?l-(r+a.size):l,l=n.isRtl&&e.getRtlHelpers().isRtlScrollingInverted?-l:l),n.contentWrapperEl[n.axis[n.draggedAxis].scrollOffsetAttr]=l},this.onEndDrag=function(e){var t=Dr(n.el),i=Pr(n.el);e.preventDefault(),e.stopPropagation(),n.el.classList.remove(n.classNames.dragging),t.removeEventListener("mousemove",n.drag,!0),t.removeEventListener("mouseup",n.onEndDrag,!0),n.removePreventClickId=i.setTimeout((function(){t.removeEventListener("click",n.preventClick,!0),t.removeEventListener("dblclick",n.preventClick,!0),n.removePreventClickId=null}))},this.preventClick=function(e){e.preventDefault(),e.stopPropagation()},this.el=t,this.minScrollbarWidth=20,this.options=Object.assign({},e.defaultOptions,{},i),this.classNames=Object.assign({},e.defaultOptions.classNames,{},this.options.classNames),this.axis={x:{scrollOffsetAttr:"scrollLeft",sizeAttr:"width",scrollSizeAttr:"scrollWidth",offsetSizeAttr:"offsetWidth",offsetAttr:"left",overflowAttr:"overflowX",dragOffset:0,isOverflowing:!0,isVisible:!1,forceVisible:!1,track:{},scrollbar:{}},y:{scrollOffsetAttr:"scrollTop",sizeAttr:"height",scrollSizeAttr:"scrollHeight",offsetSizeAttr:"offsetHeight",offsetAttr:"top",overflowAttr:"overflowY",dragOffset:0,isOverflowing:!0,isVisible:!1,forceVisible:!1,track:{},scrollbar:{}}},this.removePreventClickId=null,e.instances.has(this.el)||(this.recalculate=Gi(this.recalculate.bind(this),64),this.onMouseMove=Gi(this.onMouseMove.bind(this),64),this.hideScrollbars=ln(this.hideScrollbars.bind(this),this.options.timeout),this.onWindowResize=ln(this.onWindowResize.bind(this),64,{leading:!0}),e.getRtlHelpers=Dn(e.getRtlHelpers),this.init())}e.getRtlHelpers=function(){var t=document.createElement("div");t.innerHTML='<div class="hs-dummy-scrollbar-size"><div style="height: 200%; width: 200%; margin: 10px 0;"></div></div>';var i=t.firstElementChild;document.body.appendChild(i);var n=i.firstElementChild;i.scrollLeft=0;var r=e.getOffset(i),a=e.getOffset(n);i.scrollLeft=999;var s=e.getOffset(n);return{isRtlScrollingInverted:r.left!==a.left&&a.left-s.left!=0,isRtlScrollbarInverted:r.left!==a.left}},e.getOffset=function(e){var t=e.getBoundingClientRect(),i=Dr(e),n=Pr(e);return{top:t.top+(n.pageYOffset||i.documentElement.scrollTop),left:t.left+(n.pageXOffset||i.documentElement.scrollLeft)}};var t=e.prototype;return t.init=function(){e.instances.set(this.el,this),Ye&&(this.initDOM(),this.scrollbarWidth=this.getScrollbarWidth(),this.recalculate(),this.initListeners())},t.initDOM=function(){var e=this;if(Array.prototype.filter.call(this.el.children,(function(t){return t.classList.contains(e.classNames.wrapper)})).length)this.wrapperEl=this.el.querySelector("."+this.classNames.wrapper),this.contentWrapperEl=this.options.scrollableNode||this.el.querySelector("."+this.classNames.contentWrapper),this.contentEl=this.options.contentNode||this.el.querySelector("."+this.classNames.contentEl),this.offsetEl=this.el.querySelector("."+this.classNames.offset),this.maskEl=this.el.querySelector("."+this.classNames.mask),this.placeholderEl=this.findChild(this.wrapperEl,"."+this.classNames.placeholder),this.heightAutoObserverWrapperEl=this.el.querySelector("."+this.classNames.heightAutoObserverWrapperEl),this.heightAutoObserverEl=this.el.querySelector("."+this.classNames.heightAutoObserverEl),this.axis.x.track.el=this.findChild(this.el,"."+this.classNames.track+"."+this.classNames.horizontal),this.axis.y.track.el=this.findChild(this.el,"."+this.classNames.track+"."+this.classNames.vertical);else{for(this.wrapperEl=document.createElement("div"),this.contentWrapperEl=document.createElement("div"),this.offsetEl=document.createElement("div"),this.maskEl=document.createElement("div"),this.contentEl=document.createElement("div"),this.placeholderEl=document.createElement("div"),this.heightAutoObserverWrapperEl=document.createElement("div"),this.heightAutoObserverEl=document.createElement("div"),this.wrapperEl.classList.add(this.classNames.wrapper),this.contentWrapperEl.classList.add(this.classNames.contentWrapper),this.offsetEl.classList.add(this.classNames.offset),this.maskEl.classList.add(this.classNames.mask),this.contentEl.classList.add(this.classNames.contentEl),this.placeholderEl.classList.add(this.classNames.placeholder),this.heightAutoObserverWrapperEl.classList.add(this.classNames.heightAutoObserverWrapperEl),this.heightAutoObserverEl.classList.add(this.classNames.heightAutoObserverEl);this.el.firstChild;)this.contentEl.appendChild(this.el.firstChild);this.contentWrapperEl.appendChild(this.contentEl),this.offsetEl.appendChild(this.contentWrapperEl),this.maskEl.appendChild(this.offsetEl),this.heightAutoObserverWrapperEl.appendChild(this.heightAutoObserverEl),this.wrapperEl.appendChild(this.heightAutoObserverWrapperEl),this.wrapperEl.appendChild(this.maskEl),this.wrapperEl.appendChild(this.placeholderEl),this.el.appendChild(this.wrapperEl)}if(!this.axis.x.track.el||!this.axis.y.track.el){var t=document.createElement("div"),i=document.createElement("div");t.classList.add(this.classNames.track),i.classList.add(this.classNames.scrollbar),t.appendChild(i),this.axis.x.track.el=t.cloneNode(!0),this.axis.x.track.el.classList.add(this.classNames.horizontal),this.axis.y.track.el=t.cloneNode(!0),this.axis.y.track.el.classList.add(this.classNames.vertical),this.el.appendChild(this.axis.x.track.el),this.el.appendChild(this.axis.y.track.el)}this.axis.x.scrollbar.el=this.axis.x.track.el.querySelector("."+this.classNames.scrollbar),this.axis.y.scrollbar.el=this.axis.y.track.el.querySelector("."+this.classNames.scrollbar),this.options.autoHide||(this.axis.x.scrollbar.el.classList.add(this.classNames.visible),this.axis.y.scrollbar.el.classList.add(this.classNames.visible)),this.el.setAttribute("data-simplebar","init")},t.initListeners=function(){var e=this,t=Pr(this.el);this.options.autoHide&&this.el.addEventListener("mouseenter",this.onMouseEnter),["mousedown","click","dblclick"].forEach((function(t){e.el.addEventListener(t,e.onPointerEvent,!0)})),["touchstart","touchend","touchmove"].forEach((function(t){e.el.addEventListener(t,e.onPointerEvent,{capture:!0,passive:!0})})),this.el.addEventListener("mousemove",this.onMouseMove),this.el.addEventListener("mouseleave",this.onMouseLeave),this.contentWrapperEl.addEventListener("scroll",this.onScroll),t.addEventListener("resize",this.onWindowResize);var i=!1,n=t.ResizeObserver||tr;this.resizeObserver=new n((function(){i&&e.recalculate()})),this.resizeObserver.observe(this.el),this.resizeObserver.observe(this.contentEl),t.requestAnimationFrame((function(){i=!0})),this.mutationObserver=new t.MutationObserver(this.recalculate),this.mutationObserver.observe(this.contentEl,{childList:!0,subtree:!0,characterData:!0})},t.recalculate=function(){var e=Pr(this.el);this.elStyles=e.getComputedStyle(this.el),this.isRtl="rtl"===this.elStyles.direction;var t=this.heightAutoObserverEl.offsetHeight<=1,i=this.heightAutoObserverEl.offsetWidth<=1,n=this.contentEl.offsetWidth,r=this.contentWrapperEl.offsetWidth,a=this.elStyles.overflowX,s=this.elStyles.overflowY;this.contentEl.style.padding=this.elStyles.paddingTop+" "+this.elStyles.paddingRight+" "+this.elStyles.paddingBottom+" "+this.elStyles.paddingLeft,this.wrapperEl.style.margin="-"+this.elStyles.paddingTop+" -"+this.elStyles.paddingRight+" -"+this.elStyles.paddingBottom+" -"+this.elStyles.paddingLeft;var o=this.contentEl.scrollHeight,l=this.contentEl.scrollWidth;this.contentWrapperEl.style.height=t?"auto":"100%",this.placeholderEl.style.width=i?n+"px":"auto",this.placeholderEl.style.height=o+"px";var c=this.contentWrapperEl.offsetHeight;this.axis.x.isOverflowing=l>n,this.axis.y.isOverflowing=o>c,this.axis.x.isOverflowing="hidden"!==a&&this.axis.x.isOverflowing,this.axis.y.isOverflowing="hidden"!==s&&this.axis.y.isOverflowing,this.axis.x.forceVisible="x"===this.options.forceVisible||!0===this.options.forceVisible,this.axis.y.forceVisible="y"===this.options.forceVisible||!0===this.options.forceVisible,this.hideNativeScrollbar();var d=this.axis.x.isOverflowing?this.scrollbarWidth:0,u=this.axis.y.isOverflowing?this.scrollbarWidth:0;this.axis.x.isOverflowing=this.axis.x.isOverflowing&&l>r-u,this.axis.y.isOverflowing=this.axis.y.isOverflowing&&o>c-d,this.axis.x.scrollbar.size=this.getScrollbarSize("x"),this.axis.y.scrollbar.size=this.getScrollbarSize("y"),this.axis.x.scrollbar.el.style.width=this.axis.x.scrollbar.size+"px",this.axis.y.scrollbar.el.style.height=this.axis.y.scrollbar.size+"px",this.positionScrollbar("x"),this.positionScrollbar("y"),this.toggleTrackVisibility("x"),this.toggleTrackVisibility("y")},t.getScrollbarSize=function(e){if(void 0===e&&(e="y"),!this.axis[e].isOverflowing)return 0;var t,i=this.contentEl[this.axis[e].scrollSizeAttr],n=this.axis[e].track.el[this.axis[e].offsetSizeAttr],r=n/i;return t=Math.max(~~(r*n),this.options.scrollbarMinSize),this.options.scrollbarMaxSize&&(t=Math.min(t,this.options.scrollbarMaxSize)),t},t.positionScrollbar=function(t){if(void 0===t&&(t="y"),this.axis[t].isOverflowing){var i=this.contentWrapperEl[this.axis[t].scrollSizeAttr],n=this.axis[t].track.el[this.axis[t].offsetSizeAttr],r=parseInt(this.elStyles[this.axis[t].sizeAttr],10),a=this.axis[t].scrollbar,s=this.contentWrapperEl[this.axis[t].scrollOffsetAttr],o=(s="x"===t&&this.isRtl&&e.getRtlHelpers().isRtlScrollingInverted?-s:s)/(i-r),l=~~((n-a.size)*o);l="x"===t&&this.isRtl&&e.getRtlHelpers().isRtlScrollbarInverted?l+(n-a.size):l,a.el.style.transform="x"===t?"translate3d("+l+"px, 0, 0)":"translate3d(0, "+l+"px, 0)"}},t.toggleTrackVisibility=function(e){void 0===e&&(e="y");var t=this.axis[e].track.el,i=this.axis[e].scrollbar.el;this.axis[e].isOverflowing||this.axis[e].forceVisible?(t.style.visibility="visible",this.contentWrapperEl.style[this.axis[e].overflowAttr]="scroll"):(t.style.visibility="hidden",this.contentWrapperEl.style[this.axis[e].overflowAttr]="hidden"),this.axis[e].isOverflowing?i.style.display="block":i.style.display="none"},t.hideNativeScrollbar=function(){this.offsetEl.style[this.isRtl?"left":"right"]=this.axis.y.isOverflowing||this.axis.y.forceVisible?"-"+this.scrollbarWidth+"px":0,this.offsetEl.style.bottom=this.axis.x.isOverflowing||this.axis.x.forceVisible?"-"+this.scrollbarWidth+"px":0},t.onMouseMoveForAxis=function(e){void 0===e&&(e="y"),this.axis[e].track.rect=this.axis[e].track.el.getBoundingClientRect(),this.axis[e].scrollbar.rect=this.axis[e].scrollbar.el.getBoundingClientRect(),this.isWithinBounds(this.axis[e].scrollbar.rect)?this.axis[e].scrollbar.el.classList.add(this.classNames.hover):this.axis[e].scrollbar.el.classList.remove(this.classNames.hover),this.isWithinBounds(this.axis[e].track.rect)?(this.showScrollbar(e),this.axis[e].track.el.classList.add(this.classNames.hover)):this.axis[e].track.el.classList.remove(this.classNames.hover)},t.onMouseLeaveForAxis=function(e){void 0===e&&(e="y"),this.axis[e].track.el.classList.remove(this.classNames.hover),this.axis[e].scrollbar.el.classList.remove(this.classNames.hover)},t.showScrollbar=function(e){void 0===e&&(e="y");var t=this.axis[e].scrollbar.el;this.axis[e].isVisible||(t.classList.add(this.classNames.visible),this.axis[e].isVisible=!0),this.options.autoHide&&this.hideScrollbars()},t.onDragStart=function(e,t){void 0===t&&(t="y");var i=Dr(this.el),n=Pr(this.el),r=this.axis[t].scrollbar,a="y"===t?e.pageY:e.pageX;this.axis[t].dragOffset=a-r.rect[this.axis[t].offsetAttr],this.draggedAxis=t,this.el.classList.add(this.classNames.dragging),i.addEventListener("mousemove",this.drag,!0),i.addEventListener("mouseup",this.onEndDrag,!0),null===this.removePreventClickId?(i.addEventListener("click",this.preventClick,!0),i.addEventListener("dblclick",this.preventClick,!0)):(n.clearTimeout(this.removePreventClickId),this.removePreventClickId=null)},t.onTrackClick=function(e,t){var i=this;if(void 0===t&&(t="y"),this.options.clickOnTrack){var n=Pr(this.el);this.axis[t].scrollbar.rect=this.axis[t].scrollbar.el.getBoundingClientRect();var r=this.axis[t].scrollbar.rect[this.axis[t].offsetAttr],a=parseInt(this.elStyles[this.axis[t].sizeAttr],10),s=this.contentWrapperEl[this.axis[t].scrollOffsetAttr],o=("y"===t?this.mouseY-r:this.mouseX-r)<0?-1:1,l=-1===o?s-a:s+a;!function e(){var r,a;-1===o?s>l&&(s-=i.options.clickOnTrackSpeed,i.contentWrapperEl.scrollTo(((r={})[i.axis[t].offsetAttr]=s,r)),n.requestAnimationFrame(e)):s<l&&(s+=i.options.clickOnTrackSpeed,i.contentWrapperEl.scrollTo(((a={})[i.axis[t].offsetAttr]=s,a)),n.requestAnimationFrame(e))}()}},t.getContentElement=function(){return this.contentEl},t.getScrollElement=function(){return this.contentWrapperEl},t.getScrollbarWidth=function(){try{return"none"===getComputedStyle(this.contentWrapperEl,"::-webkit-scrollbar").display||"scrollbarWidth"in document.documentElement.style||"-ms-overflow-style"in document.documentElement.style?0:rr()}catch(e){return rr()}},t.removeListeners=function(){var e=this,t=Pr(this.el);this.options.autoHide&&this.el.removeEventListener("mouseenter",this.onMouseEnter),["mousedown","click","dblclick"].forEach((function(t){e.el.removeEventListener(t,e.onPointerEvent,!0)})),["touchstart","touchend","touchmove"].forEach((function(t){e.el.removeEventListener(t,e.onPointerEvent,{capture:!0,passive:!0})})),this.el.removeEventListener("mousemove",this.onMouseMove),this.el.removeEventListener("mouseleave",this.onMouseLeave),this.contentWrapperEl&&this.contentWrapperEl.removeEventListener("scroll",this.onScroll),t.removeEventListener("resize",this.onWindowResize),this.mutationObserver&&this.mutationObserver.disconnect(),this.resizeObserver&&this.resizeObserver.disconnect(),this.recalculate.cancel(),this.onMouseMove.cancel(),this.hideScrollbars.cancel(),this.onWindowResize.cancel()},t.unMount=function(){this.removeListeners(),e.instances.delete(this.el)},t.isWithinBounds=function(e){return this.mouseX>=e.left&&this.mouseX<=e.left+e.width&&this.mouseY>=e.top&&this.mouseY<=e.top+e.height},t.findChild=function(e,t){var i=e.matches||e.webkitMatchesSelector||e.mozMatchesSelector||e.msMatchesSelector;return Array.prototype.filter.call(e.children,(function(e){return i.call(e,t)}))[0]},e}();return zr.defaultOptions={autoHide:!0,forceVisible:!1,clickOnTrack:!0,clickOnTrackSpeed:40,classNames:{contentEl:"simplebar-content",contentWrapper:"simplebar-content-wrapper",offset:"simplebar-offset",mask:"simplebar-mask",wrapper:"simplebar-wrapper",placeholder:"simplebar-placeholder",scrollbar:"simplebar-scrollbar",track:"simplebar-track",heightAutoObserverWrapperEl:"simplebar-height-auto-observer-wrapper",heightAutoObserverEl:"simplebar-height-auto-observer",visible:"simplebar-visible",horizontal:"simplebar-horizontal",vertical:"simplebar-vertical",hover:"simplebar-hover",dragging:"simplebar-dragging"},scrollbarMinSize:25,scrollbarMaxSize:0,timeout:1e3},zr.instances=new WeakMap,zr.initDOMLoadedElements=function(){document.removeEventListener("DOMContentLoaded",this.initDOMLoadedElements),window.removeEventListener("load",this.initDOMLoadedElements),Array.prototype.forEach.call(document.querySelectorAll("[data-simplebar]"),(function(e){"init"===e.getAttribute("data-simplebar")||zr.instances.has(e)||new zr(e,Ir(e.attributes))}))},zr.removeObserver=function(){this.globalObserver.disconnect()},zr.initHtmlApi=function(){this.initDOMLoadedElements=this.initDOMLoadedElements.bind(this),"undefined"!=typeof MutationObserver&&(this.globalObserver=new MutationObserver(zr.handleMutations),this.globalObserver.observe(document,{childList:!0,subtree:!0})),"complete"===document.readyState||"loading"!==document.readyState&&!document.documentElement.doScroll?window.setTimeout(this.initDOMLoadedElements):(document.addEventListener("DOMContentLoaded",this.initDOMLoadedElements),window.addEventListener("load",this.initDOMLoadedElements))},zr.handleMutations=function(e){e.forEach((function(e){Array.prototype.forEach.call(e.addedNodes,(function(e){1===e.nodeType&&(e.hasAttribute("data-simplebar")?!zr.instances.has(e)&&new zr(e,Ir(e.attributes)):Array.prototype.forEach.call(e.querySelectorAll("[data-simplebar]"),(function(e){"init"===e.getAttribute("data-simplebar")||zr.instances.has(e)||new zr(e,Ir(e.attributes))})))})),Array.prototype.forEach.call(e.removedNodes,(function(e){1===e.nodeType&&(e.hasAttribute('[data-simplebar="init"]')?zr.instances.has(e)&&zr.instances.get(e).unMount():Array.prototype.forEach.call(e.querySelectorAll('[data-simplebar="init"]'),(function(e){zr.instances.has(e)&&zr.instances.get(e).unMount()})))}))}))},zr.getOptions=Ir,Ye&&zr.initHtmlApi(),zr})),document.addEventListener("DOMContentLoaded",(function(){var e,t=!(!(e=document.createElement("canvas")).getContext||!e.getContext("2d"))&&0===e.toDataURL("image/webp").indexOf("data:image/webp"),i=document.querySelector(".gallery");1==t?i.classList.add("bg-gallery-webp"):i.classList.add("bg-gallery-img");var n=document.querySelector(".editions");1==t?n.classList.add("bg-editions-webp"):n.classList.add("bg-editions-img")}));var n=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);this.options=Object.assign({isOpen:function(){},isClose:function(){}},t),this.modal=document.querySelector(".modal"),this.speed=300,this.animation="fade",this._reOpen=!1,this._nextContainer=!1,this.modalContainer=!1,this.isOpen=!1,this.previousActiveElement=!1,this._focusElements=["a[href]","input","select","textarea","button","iframe","[contenteditable]",'[tabindex]:not([tabindex^="-"])'],this._fixBlocks=document.querySelectorAll(".fix-block"),this.events()}var t,n,r;return t=e,(n=[{key:"events",value:function(){this.modal&&(document.addEventListener("click",function(e){var t=e.target.closest("[data-graph-path]");if(t){var i=t.dataset.graphPath,n=t.dataset.graphAnimation,r=t.dataset.graphSpeed;return this.animation=n||"fade",this.speed=r?parseInt(r):300,this._nextContainer=document.querySelector('[data-graph-target="'.concat(i,'"]')),void this.open()}e.target.closest(".modal__close")&&this.close()}.bind(this)),window.addEventListener("keydown",function(e){27==e.keyCode&&this.isOpen&&this.close(),9==e.which&&this.isOpen&&this.focusCatch(e)}.bind(this)),this.modal.addEventListener("click",function(e){e.target.classList.contains("modal__container")||e.target.closest(".modal__container")||!this.isOpen||this.close()}.bind(this)))}},{key:"open",value:function(e){var t=this;if(this.previousActiveElement=document.activeElement,this.isOpen)return this.reOpen=!0,void this.close();this.modalContainer=this._nextContainer,e&&(this.modalContainer=document.querySelector('[data-graph-target="'.concat(e,'"]'))),this.modal.style.setProperty("--transition-time","".concat(this.speed/1e3,"s")),this.modal.classList.add("is-open"),this.disableScroll(),console.log(this.modalContainer),this.modalContainer.classList.add("modal-open"),this.modalContainer.classList.add(this.animation),setTimeout((function(){t.options.isOpen(t),t.modalContainer.classList.add("animate-open"),t.isOpen=!0,t.focusTrap()}),this.speed)}},{key:"close",value:function(){this.modalContainer&&(this.modalContainer.classList.remove("animate-open"),this.modalContainer.classList.remove(this.animation),this.modal.classList.remove("is-open"),this.modalContainer.classList.remove("modal-open"),this.enableScroll(),this.options.isClose(this),this.isOpen=!1,this.focusTrap(),this.reOpen&&(this.reOpen=!1,this.open()))}},{key:"focusCatch",value:function(e){var t=this.modalContainer.querySelectorAll(this._focusElements),i=Array.prototype.slice.call(t),n=i.indexOf(document.activeElement);e.shiftKey&&0===n&&(i[i.length-1].focus(),e.preventDefault()),e.shiftKey||n!==i.length-1||(i[0].focus(),e.preventDefault())}},{key:"focusTrap",value:function(){var e=this.modalContainer.querySelectorAll(this._focusElements);this.isOpen?e.length&&e[0].focus():this.previousActiveElement.focus()}},{key:"disableScroll",value:function(){var e=window.scrollY;this.lockPadding(),document.body.classList.add("disable-scroll"),document.body.dataset.position=e,document.body.style.top=-e+"px"}},{key:"enableScroll",value:function(){var e=parseInt(document.body.dataset.position,10);this.unlockPadding(),document.body.style.top="auto",document.body.classList.remove("disable-scroll"),window.scroll({top:e,left:0}),document.body.removeAttribute("data-position")}},{key:"lockPadding",value:function(){var e=window.innerWidth-document.body.offsetWidth+"px";this._fixBlocks.forEach((function(t){t.style.paddingRight=e})),document.body.style.paddingRight=e}},{key:"unlockPadding",value:function(){this._fixBlocks.forEach((function(e){e.style.paddingRight="0px"})),document.body.style.paddingRight="0px"}}])&&i(t.prototype,n),r&&i(t,r),e}();function r(e,t){var i;if("undefined"==typeof Symbol||null==e[Symbol.iterator]){if(Array.isArray(e)||(i=function(e,t){if(!e)return;if("string"==typeof e)return a(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);"Object"===i&&e.constructor&&(i=e.constructor.name);if("Map"===i||"Set"===i)return Array.from(e);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return a(e,t)}(e))||t&&e&&"number"==typeof e.length){i&&(e=i);var n=0,r=function(){};return{s:r,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:r}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var s,o=!0,l=!1;return{s:function(){i=e[Symbol.iterator]()},n:function(){var e=i.next();return o=e.done,e},e:function(e){l=!0,s=e},f:function(){try{o||null==i.return||i.return()}finally{if(l)throw s}}}}function a(e,t){(null==t||t>e.length)&&(t=e.length);for(var i=0,n=new Array(t);i<t;i++)n[i]=e[i];return n}document.addEventListener("DOMContentLoaded",(function(){function e(e){var t=e.querySelectorAll(".choices__item--choice"),i=e.querySelector(".choices__list--dropdown"),n=[];t.forEach((function(e){n.push(e.offsetWidth)}));var r=Math.max.apply(null,n);i.style.width="".concat(r,"px")}document.querySelectorAll(".header-search-block__drop-item").forEach((function(t){t.addEventListener("click",(function(i){e(t)})),t.addEventListener("keyup",(function(i){"Enter"==i.code&&e(t)}))})),document.body.addEventListener("keyup",(function(e){if("Tab"==e.code)return!1}))})),document.addEventListener("DOMContentLoaded",(function(){Array.prototype.forEach.call(document.querySelectorAll(".events__item-contianer-subtitle"),(function(e){return new SimpleBar}))})),document.addEventListener("DOMContentLoaded",(function(){var e,t=r(document.querySelectorAll('a[href*="#"]'));try{var i=function(){var t=e.value;t.addEventListener("click",(function(e){e.preventDefault();var i=t.getAttribute("href").substr(1);document.getElementById(i).scrollIntoView({behavior:"smooth",block:"start"})}))};for(t.s();!(e=t.n()).done;)i()}catch(e){t.e(e)}finally{t.f()}})),document.addEventListener("DOMContentLoaded",(function(){var e=document.querySelector("#js-select-1"),t=document.querySelector("#js-select-2"),i=document.querySelector("#js-select-3"),n=document.querySelector("#js-select-4"),r=document.querySelector("#js-select-5"),a=document.querySelector("#js-gallery-select-1"),s=document.querySelector("#js-gallery-select-2"),o=document.querySelector("#js-gallery-select-3"),l={searchEnabled:!1,classNames:{containerOuter:"choices",containerInner:"choices__inner",input:"choices__input",inputCloned:"choices__input--cloned",list:"choices__list",listItems:"choices__list--multiple",listSingle:"choices__list--single",listDropdown:"choices__list--dropdown",item:"choices__item",itemSelectable:"choices__item--selectable",itemDisabled:"choices__item--disabled",itemChoice:"choices__item--choice",placeholder:"choices__placeholder",group:"choices__group",groupHeading:"choices__heading",button:"choices__button",activeState:"is-active",focusState:"is-focused",openState:"is-open",disabledState:"is-disabled",highlightedState:"is-highlighted",selectedState:"is-selected",flippedState:"is-flipped",loadingState:"is-loading",noResults:"has-no-results",noChoices:"has-no-choices"}};new Promise((function(c,d){c(new Choices(e,l),new Choices(t,l),new Choices(i,l),new Choices(n,l),new Choices(r,l),new Choices(a,l),new Choices(s,l),new Choices(o,l))})).then((function(){document.querySelectorAll(".header-search-block__drop-item").forEach((function(e){var t=e.querySelector(".choices__list--dropdown");new SimpleBar(t.querySelector(".choices__list"))}))}))})),document.addEventListener("DOMContentLoaded",(function(){var e=document.querySelector("#js-btn-nav"),t=document.querySelector("#js-btn-nav-close"),i=document.querySelector("#js-nav"),n=document.querySelectorAll(".header-nav-block__nav-link"),r=document.querySelector(".header"),a=document.querySelector("#hero-block"),s=document.querySelector("body");e.addEventListener("click",(function(t){t.preventDefault();var n=e.clientHeight,s=r.clientHeight,o=(s-n)/2,l=s+a.clientHeight,c=document.documentElement.clientWidth;i.style.paddingTop="".concat(o,"px"),i.style.height=c>767?"".concat(l,"px"):"65vh",i.setAttribute("aria-label","Ð¼ÐµÐ½Ñ Ð¾ÑÐºÑÑÑÐ¾"),i.classList.add("header-nav-block__nav-block_is-active"),i.classList.remove("header-nav-block__nav-block_anima-close"),i.classList.add("header-nav-block__nav-block_anima-open")})),t.addEventListener("click",(function(e){e.preventDefault(),i.setAttribute("aria-label","Ð¼ÐµÐ½Ñ Ð·Ð°ÐºÑÑÑÐ¾"),i.classList.remove("header-nav-block__nav-block_anima-close"),i.classList.remove("header-nav-block__nav-block_anima-open"),i.classList.add("header-nav-block__nav-block_anima-close"),setTimeout((function(){i.classList.remove("header-nav-block__nav-block_is-active")}),1e3)})),s.addEventListener("click",(function(t){i.contains(t.target)||e.contains(t.target)||(i.setAttribute("aria-label","Ð¼ÐµÐ½Ñ Ð·Ð°ÐºÑÑÑÐ¾"),i.classList.remove("header-nav-block__nav-block_anima-close"),i.classList.remove("header-nav-block__nav-block_anima-open"),i.classList.add("header-nav-block__nav-block_anima-close"),setTimeout((function(){i.classList.remove("header-nav-block__nav-block_is-active")}),1e3))})),n.forEach((function(e){e.addEventListener("click",(function(e){document.body.clientWidth<1400&&(e.preventDefault(),i.setAttribute("aria-label","Ð¼ÐµÐ½Ñ Ð·Ð°ÐºÑÑÑÐ¾"),i.classList.remove("header-nav-block__nav-block_anima-close"),i.classList.remove("header-nav-block__nav-block_anima-open"),i.classList.add("header-nav-block__nav-block_anima-close"),setTimeout((function(){i.classList.remove("header-nav-block__nav-block_is-active")}),1e3))}))})),window.onresize=function(){document.body.clientWidth>1400&&(i.removeAttribute("aria-label"),i.classList.remove("header-nav-block__nav-block_anima-close"),i.classList.remove("header-nav-block__nav-block_anima-open"),i.classList.remove("header-nav-block__nav-block_anima-close"),i.classList.remove("header-nav-block__nav-block_is-active"))}})),document.addEventListener("DOMContentLoaded",(function(){var e=document.querySelector("#js-header-search-form"),t=document.querySelector("#js-header-search-input"),i=document.querySelector("#js-header-search-tooltip"),n=document.querySelector("#js-header-logo"),r=document.querySelector(".header-nav-block__container"),a=document.querySelector("#js-header-search-btn"),s=gsap.timeline();function o(i){var n=r.clientWidth/100*15,a=s.to(e,{duration:1,width:n,minWidth:"200px"}).to(t,{duration:.5,opacity:1,position:"relative"},"-=0.5");"mouseover"==i?a.play():a.reverse()}function l(){var t=a.clientWidth,i=e.clientWidth;if(t!=i)var r=setInterval((function(){t=a.clientWidth,i=e.clientWidth,t==i&&(n.style.opacity="1",clearInterval(r))}),200)}e.addEventListener("submit",(function(e){""==t.value?(e.preventDefault(),i.classList.add("header-search-block__search-tooltip_is-active"),setTimeout((function(){i.classList.add("header-search-block__search-tooltip_active")}),1),setTimeout((function(){i.classList.remove("header-search-block__search-tooltip_active")}),800),setTimeout((function(){i.classList.remove("header-search-block__search-tooltip_is-active")}),801)):t.value=""})),a.addEventListener("mouseover",(function(e){var t=document.documentElement.clientWidth;t<680&&(n.style.opacity="0"),t<1400&&o("mouseover")})),a.addEventListener("focus",(function(e){var t=document.documentElement.clientWidth;t<680&&(n.style.opacity="0"),t<1400&&o("mouseover")})),t.addEventListener("focus",(function(e){var t=document.documentElement.clientWidth;t<680&&(n.style.opacity="0"),t<1400&&o("mouseover")})),e.addEventListener("mouseout",(function(i){t.contains(i.relatedTarget)||a.contains(i.relatedTarget)||e.contains(i.relatedTarget)||(document.documentElement.clientWidth<1400?(o("mouseout"),l()):n.style.opacity="1")})),a.addEventListener("blur",(function(i){t.contains(i.relatedTarget)||a.contains(i.relatedTarget)||e.contains(i.relatedTarget)||(document.documentElement.clientWidth<1400?(o("mouseout"),l()):n.style.opacity="1")})),t.addEventListener("blur",(function(i){t.contains(i.relatedTarget)||a.contains(i.relatedTarget)||e.contains(i.relatedTarget)||(document.documentElement.clientWidth<1400?(o("mouseout"),l()):n.style.opacity="1")}))})),document.addEventListener("DOMContentLoaded",(function(){var e,i=document.querySelector("#js-gallery-track"),r=new XMLHttpRequest;r.open("GET","../json/gallery/gallery.json",!0),r.responseType="json",r.onreadystatechange=function(){if(4==r.readyState&&200===r.status){var t=r.response;e=t;for(var n=0;n<t.length;n++)i.innerHTML+='<li class="swiper-slide gallery__slider-item" tabindex="0" data-graph-path="gallerey-'.concat(n,'">\n                            <div class="gallery__container-img" data-graph-path="gallerey-').concat(n,'">\n                                <picture>\n                                    <source type="image/webp" media="(min-width: 768px)" srcset="').concat(t[n].webp,'">\n                                    <source type="image/webp" media="(max-width: 767px)" srcset="').concat(t[n].webpMobail,'">\n                                    <source media="(max-width: 767px)" srcset="').concat(t[n].jpgMobail,'">\n                                    <img id="gallery-img-').concat(n,'" src="').concat(t[n].jpg,'" alt="').concat(t[n].alt,'" class="gallery__img">\n                                </picture>\n                            </div>\n                        </li>')}404===r.status&&(personBlock.innerHTML="<h3>Ð±Ð»Ð° Ð±Ð»Ð° Ð±Ð»Ð°</h3>")},r.send(null),i.addEventListener("click",(function(i){if("DIV"==i.target.tagName){var r=i.target.getAttribute("data-graph-path"),a=document.querySelector("#js-modal-img-content"),s=i.target;s=(s=s.querySelector("img")).getAttribute("id"),a.setAttribute("data-graph-target","".concat(r)),new Promise((function(i,n){t(e,s),i()})).then((function(){(new n).open(r)}))}})),i.addEventListener("keyup",(function(i){if("LI"==i.target.tagName&&"Enter"==i.key){var n=i.target;n=(n=n.querySelector("img")).getAttribute("id"),t(e,n)}}))})),document.addEventListener("DOMContentLoaded",(function(){var e,t=document.querySelectorAll(".catalog__flags-link"),i=document.querySelector("#js-catalog-data-list"),n=document.querySelector("#js-catalog-individual-block"),r=document.querySelector("#js-catalog-full-info");function a(t){i.innerHTML="",n.innerHTML="";var r=t.getAttribute("href");r=r.substring(1);var a="../json/catalog/".concat(r,".json"),l=new XMLHttpRequest;l.open("GET",a,!0),l.responseType="json",l.onreadystatechange=function(){4==l.readyState&&200===l.status&&function(){var t=l.response[0];e=t;var n,a=Object.keys(t);a=a.sort();for(var c=function(e){var n=a[e],s=t[n],o=Object.keys(s),l=Math.random(),c=Math.random(),d=n+"",u=void 0;u=(d=d.split(/\s*-\s*/)).length>1?"Ð¡ ".concat(d[0]," Ð¿Ð¾ ").concat(d[1]," Ð³Ð³."):"Ð¡ ".concat(d[0]," Ð³."),i.innerHTML+='\n                            <li class="catalog__data-item">\n                                <div class="catalog__data-container">\n                                    <button\n                                        id="al-'.concat(c,'" \n                                        aria-label="Ð¿Ð¾ÐºÐ°Ð·Ð°ÑÑ/ÑÐºÑÑÑÑ Ð´Ð°ÑÑ" \n                                        aria-controls="ac-').concat(l,'" \n                                        aria-expanded="false" \n                                        type="button" \n                                        class="catalog__data-btn"\n                                        value="').concat(n,'">\n                                            ').concat(u,'\n                                    </button>\n\n                                    <ul\n                                        id="ac-').concat(l,'" \n                                        aria-labelledby="al-').concat(c,'" \n                                        class="catalog__data-list-link"\n                                        >\n                                    </ul>\n                                </div>\n                            </li>\n                        ');for(var h=function(t){var i=o[t],l=s[i];Object.keys(l);document.querySelectorAll(".catalog__data-item").forEach((function(s){var l=s.querySelector(".catalog__data-btn").value,c=s.querySelector(".catalog__data-list-link");l==n&&(c.innerHTML+='\n                                            <li class="catalog__data-item-link">\n                                                <a href="'.concat(r+"/"+a[e]+"/"+o[t],'" class="catalog__data-link">\n                                                    ').concat(i,"\n                                                </a>\n                                            </li>\n                                        "))}))},p=0;p<o.length;p++)h(p)},d=0;d<a.length;d++)c(d);(i.querySelectorAll(".catalog__data-link").forEach((function(e){n=!e.classList.contains("catalog__data-list-link_is-active")})),n)&&s(i.querySelector(".catalog__data-link"));i.querySelectorAll(".catalog__data-btn").forEach((function(e){e.addEventListener("click",(function(){o(e)}))}))}(),404===l.status&&(n.innerHTML="<h3>Ð±Ð»Ð° Ð±Ð»Ð° Ð±Ð»Ð°</h3>")},l.send(null)}function s(t){var i=t.parentElement.parentElement.parentElement.querySelector(".catalog__data-btn"),r=i.parentElement,a=t.parentElement.parentElement,s=t.getAttribute("href");s=s.split("/"),t.classList.add("catalog__data-link_is-active"),r.classList.add("catalog__data-item_link-is-active"),r.querySelector(".catalog__data-list-link").classList.add("catalog__data-list-link_link-is-active"),r.classList.add("catalog__data-item_is-active"),i.setAttribute("aria-expanded","true"),i.classList.add("catalog__data-btn_is-active"),a.classList.add("catalog__data-list-link_is-active");var o=s[1],l=s[2],c=e[o][l],d=c.image,u=c.name,h=c.date,p=c.description;n.innerHTML='\n                <picture>\n                    <source type="image/webp" srcset="'.concat(d,'.webp">\n                    <img src="').concat(d,'.jpg" alt="').concat(u,'" class="catalog__individual-img">\n                </picture>\n\n                <h3 class="catalog__individual-title">').concat(u,'</h3>\n    \n                <time class="catalog__individual-data">').concat(h,'</time>\n\n                <p class="catalog__individual-subtitle">').concat(p,"</p>\n            ")}function o(e){var t=i.querySelectorAll(".catalog__data-btn"),n=e.parentElement,r=e.getAttribute("aria-expanded");t.forEach((function(e){for(var t,i,n=e.parentElement.querySelector(".catalog__data-list-link").children,r=0;r<n.length;r++){var a=n[r];if(a=a.querySelector(".catalog__data-link"),e.parentElement.classList.contains("catalog__data-item_is-active")&&(i=!0),a.classList.contains("catalog__data-link_is-active")){t=!1;break}t=!0}t&&i&&(e.parentElement.querySelector(".catalog__data-list-link").classList.remove("catalog__data-list-link_is-active"),e.parentElement.querySelector(".catalog__data-list-link").classList.add("catalog__data-list-link_is-off"),setTimeout((function(){e.parentElement.querySelector(".catalog__data-list-link").classList.remove("catalog__data-list-link_is-off")}),500),e.setAttribute("aria-expanded","false"),e.classList.remove("catalog__data-btn_is-active"),e.parentElement.classList.remove("catalog__data-item_is-active"),e.parentElement.classList.add("catalog__data-item_is-off"))}));for(var a,s=n.querySelector(".catalog__data-list-link").children,o=0;o<s.length;o++){if(s[o].querySelector(".catalog__data-link").classList.contains("catalog__data-link_is-active")){a=!1;break}a=!0}"true"==r&&a?(n.querySelector(".catalog__data-list-link").classList.remove("catalog__data-list-link_is-active"),n.querySelector(".catalog__data-list-link").classList.add("catalog__data-list-link_is-off"),setTimeout((function(){n.querySelector(".catalog__data-list-link").classList.remove("catalog__data-list-link_is-off")}),500),e.setAttribute("aria-expanded","false"),e.classList.remove("catalog__data-btn_is-active"),n.classList.remove("catalog__data-item_is-active"),n.classList.add("catalog__data-item_is-off")):(e.setAttribute("aria-expanded","true"),e.classList.add("catalog__data-btn_is-active"),n.querySelector(".catalog__data-list-link").classList.add("catalog__data-list-link_is-active"),n.querySelector(".catalog__data-list-link").classList.remove("catalog__data-list-link_is-off"),n.classList.add("catalog__data-item_is-active"),n.classList.remove("catalog__data-item_is-off"))}t.forEach((function(e){var i=e.getAttribute("href");i=i.substring(1);var n="img/svg/flags/".concat(i,".svg");e.style.backgroundImage="url('".concat(n,"')"),e.addEventListener("click",(function(i){i.preventDefault(),r.classList.remove("catalog__person-block_is-leafing"),setTimeout((function(){r.classList.add("catalog__person-block_is-leafing")}),1),setTimeout((function(){t.forEach((function(e){e.classList.remove("catalog__flags-link_is-active")})),e.classList.add("catalog__flags-link_is-active"),a(e)}),501)})),e.classList.contains("catalog__flags-link_is-active")&&a(e)})),i.addEventListener("click",(function(e){if("A"===e.target.tagName){i.querySelectorAll(".catalog__data-link").forEach((function(e){e.classList.remove("catalog__data-link_is-active"),e.parentElement.parentElement.parentElement.classList.remove("catalog__data-item_link-is-active"),e.parentElement.parentElement.classList.remove("catalog__data-list-link_link-is-active")}));var t=e.target,n=t.parentElement.parentElement.parentElement.querySelector(".catalog__data-btn");e.preventDefault(),s(t),o(n)}}))})),document.addEventListener("DOMContentLoaded",(function(){var e=document.querySelector("#js-events__list"),t=document.querySelector("#js-all-events-btn"),i=window.innerWidth;function n(){document.querySelector(".events__list").querySelectorAll(".events__item").forEach((function(e){a(e.querySelector(".events__item-subtitle"),e.querySelector(".events__item-contianer-subtitle"),e.querySelector(".events__item-btn"),document.body.clientWidth)}))}function r(i){e.innerHTML="";var r=new XMLHttpRequest;r.open("GET","../json/events/evens-item.json",!0),r.responseType="json",r.onreadystatechange=function(){if(4==r.readyState&&200===r.status){var a,s=r.response,o=document.body.clientWidth;"false"==i?(t.setAttribute("aria-expanded","true"),t.textContent="Ð¡ÐºÑÑÑÑ Ð²ÑÐµ ÑÐ¾Ð±ÑÑÐ¸Ñ",a=s.length):(t.setAttribute("aria-expanded","false"),t.textContent="ÐÑÐµ ÑÐ¾Ð±ÑÑÐ¸Ñ",o>1023&&(a=3),o>767&&o<1024&&(a=2),o<768&&(a=s.length));for(var l=0;l<a;l++)e.innerHTML+='\n                            <li class="swiper-slide events__item">\n                                <figure class="events__slide-figure">\n                                    <picture>\n                                        <source type="image/webp" srcset="'.concat(s[l].webp,'">\n                                        <img src="').concat(s[l].img,'" alt="ÐºÐ°ÑÑÐ¸Ð½ÐºÐ° 1" class="events__item-img">\n                                    </picture>\n\n                                    <figcaption class="events__slide-figcaption">\n                                        <span class="events__item-site">\n                                            ').concat(s[l].site,'\n                                        </span>\n\n                                        <time class="events__item-time" datetime="').concat(s[l].data,'">\n                                            ').concat(s[l].data,'\n                                        </time>\n                                    </figcaption>\n                                </figure>\n\n                                <div class="events__item-container">                              \n                                    <h3 class="events__item-title">\n                                        ').concat(s[l].title,'\n                                    </h3>\n\n                                    <div class="events__item-contianer-subtitle">\n                                        <p class="events__item-subtitle">\n                                            ').concat(s[l].subtitle,'\n                                        </p>\n                                    </div>\n\n                                    <button class="events__item-btn">\n                                        ').concat(s[l].btn,"\n                                    </button>\n                                </div>\n                            </li>\n                        ");n()}404===r.status&&(personBlock.innerHTML="<h3>Ð±Ð»Ð° Ð±Ð»Ð° Ð±Ð»Ð°</h3>")},r.send(null)}function a(e,t,i,n){e.style.webkitLineClamp="1";var r=t.clientHeight,a=window.getComputedStyle(e).lineHeight;a=a.replace(/[a-zÐ°-ÑÑ]/gi,"");var s=Math.floor(r/a)-1;e.style.webkitLineClamp="inherit";var o=e.clientHeight;if(o=Math.floor(o/a),t.setAttribute("data-simplebar","init"),s>=o&&(i.textContent="ÐÐ¾Ð´ÑÐ¾Ð±Ð½ÐµÐµ",i.classList.add("events__item-btn_disable"),i.removeAttribute("aria-expanded"),i.removeAttribute("id"),i.removeAttribute("aria-controls"),e.removeAttribute("id"),e.removeAttribute("aria-labelledby"),i.setAttribute("disabled","disabled")),s<o){var l="btn-"+Math.random(),c="text-"+Math.random();i.classList.remove("events__item-btn_disable"),i.setAttribute("aria-expanded","false"),i.setAttribute("id",l),i.setAttribute("aria-controls",c),e.setAttribute("id",c),e.setAttribute("aria-labelledby",l),i.removeAttribute("disabled"),e.style.webkitLineClamp=s,t.style.maxHeight="".concat(r,"px"),new SimpleBar(t)}}t.addEventListener("click",(function(e){var t=e.target.getAttribute("aria-expanded");r(t),"true"==t&&(document.location.href="#events")})),e.addEventListener("click",(function(e){var t=document.body.clientWidth;if(e.target.classList.contains("events__item-btn")){var i=e.target,n=i.parentElement,r=n.querySelector(".events__item-contianer-subtitle"),s=n.querySelector(".events__item-subtitle");"true"==i.getAttribute("aria-expanded")?(a(s,r,i,t),i.textContent="ÐÐ¾Ð´ÑÐ¾Ð±Ð½ÐµÐµ"):(s.style.webkitLineClamp="inherit",i.textContent="Ð¡ÐºÑÑÑÑ",i.setAttribute("aria-expanded","true"))}})),window.addEventListener("resize",(function(e){n(),r(),function(){var e=window.innerWidth;i>=1400&&e<1400&&t();i<1400&&i>=1024&&(e>=1400&&t(),e<1024&&t());i<1024&&i>=768&&(e>=1024&&t(),e<768&&t());i<768&&e>=768&&t();function t(){i=window.innerWidth;var e=window.pageYOffset;document.location.reload(),wwindow.scrollBy(0,e),console.log(e)}}()})),r()})),document.addEventListener("DOMContentLoaded",(function(){var e=document.querySelector("#js-editions-title-check"),t=document.querySelector("#js-editions-container-list-check"),i=document.querySelector("#js-editions-list-check"),n=document.querySelectorAll(".editions__price-input");function r(){window.screen.width<768?(e.setAttribute("role","button"),e.setAttribute("aria-expanded","false"),e.setAttribute("aria-label","ÐÐ¾ÐºÐ°Ð·Ð°ÑÑ ÐºÐ°ÑÐµÐ³Ð¾ÑÐ¸Ð¸"),e.setAttribute("type","button"),e.setAttribute("aria-controls","js-editions-list-check"),e.setAttribute("tabindex","0"),i.setAttribute("aria-labelledby","js-editions-title-check")):(e.removeAttribute("role"),e.removeAttribute("aria-expanded"),e.removeAttribute("type"),e.removeAttribute("aria-controls"),e.removeAttribute("aria-label"),e.removeAttribute("tabindex"),i.removeAttribute("aria-labelledby"))}function a(e){if(window.screen.width<768){var t=e.target;"false"==t.getAttribute("aria-expanded")?(t.setAttribute("aria-expanded","true"),t.setAttribute("aria-label","Ð¡ÐºÑÑÑÑ ÐºÐ°ÑÐµÐ³Ð¾ÑÐ¸Ð¸"),t.classList.add("editions__title-check_active"),i.classList.add("editions__list-check_active")):(t.setAttribute("aria-expanded","false"),t.setAttribute("aria-label","ÐÐ¾ÐºÐ°Ð·Ð°ÑÑ ÐºÐ°ÑÐµÐ³Ð¾ÑÐ¸Ð¸"),t.classList.remove("editions__title-check_active"),i.classList.remove("editions__list-check_active"))}}function s(e){var n=e.querySelector("label").textContent.replace(/\s+/g," ").trim(),r=e.querySelector("input"),a=t.querySelectorAll("input"),s=i.querySelectorAll("input"),o=!1;r.setAttribute("name","".concat(n));for(var l=0;l<a.length;l++){if(r.getAttribute("name")==a[l].getAttribute("name")){o=!0;break}o=!1}0==o&&(t.innerHTML+='\n                <li class="editions__clone-item-check">\n                    <label class="editions__label-check">\n                        <input type="checkbox" name="'.concat(n,'" class="editions__inpyt-check">\n                        <span class="editions__span-check"></span>\n                        <span class="editions__span-text">\n                            ').concat(n,'\n                        </span>\n                    </label>\n\n                    <button type="button" class="editions__clone-btn-close"></button>\n                </li>\n            ')),s.forEach((function(e){for(var i=e.checked,n=e.getAttribute("name"),r=t.querySelectorAll("input"),a=0;a<r.length;a++){r[a].getAttribute("name")==n&&(r[a].checked=i)}}))}function o(e){for(var i=e.querySelector("input"),n=i.getAttribute("name"),r=t.querySelectorAll("input"),a=i.checked,s=0;s<r.length;s++){r[s].getAttribute("name")==n&&(r[s].checked=a)}}function l(e){for(var t=e.querySelector("input"),n=t.getAttribute("name"),r=i.querySelectorAll("input"),a=t.checked,s=0;s<r.length;s++){r[s].getAttribute("name")==n&&(r[s].checked=a)}}function c(e){e.value=""}e.addEventListener("click",(function(e){a(e)})),e.addEventListener("keydown",(function(e){"Enter"==e.key&&a(e)})),i.addEventListener("click",(function(e){if(e.target.classList.contains("editions__item-check")){var t=e.target;s(t),o(t)}if(e.target.parentElement.classList.contains("editions__item-check")){var i=e.target.parentElement;s(i),o(i)}if(e.target.parentElement.parentElement.classList.contains("editions__item-check")){var n=e.target.parentElement.parentElement;s(n),o(n)}})),t.addEventListener("click",(function(e){e.target.classList.contains("editions__clone-item-check")&&l(e.target);e.target.parentElement.classList.contains("editions__clone-item-check")&&l(e.target.parentElement);e.target.parentElement.parentElement.classList.contains("editions__clone-item-check")&&l(e.target.parentElement.parentElement);e.target.classList.contains("editions__clone-btn-close")&&function(e){var i=e.querySelector(".editions__span-text").textContent.replace(/\s+/g," ").trim();document.querySelectorAll(".editions__item-check").forEach((function(e){var t=e.querySelector(".editions__span-text").textContent.replace(/\s+/g," ").trim();i===t&&(e.querySelector(".editions__inpyt-check").checked=!1)})),t.removeChild(e)}(e.target.parentElement)})),n.forEach((function(e){e.addEventListener("click",(function(){c(e)})),e.addEventListener("focus",(function(){c(e)})),e.addEventListener("blur",(function(){!function(e){if(""==e.value){var t=e.name;"min"==t&&(e.value=50),"max"==t&&(e.value=25e3)}}(e)}))})),window.onresize=function(){r()},r()})),document.addEventListener("DOMContentLoaded",(function(){var e=document.querySelector("#js-editions-track"),t=document.querySelector("#js-editions-slider"),i=new XMLHttpRequest;i.open("GET","../json/editions/editions.json",!0),i.responseType="json",i.onreadystatechange=function(){if(4==i.readyState&&200===i.status){var n=i.response;n;for(var r=0;r<n.length;r++)e.innerHTML+='<li class="swiper-slide editions__swiper-slid">\n                            <div class="editions__swiper-slid-container">\n                                <figure class="editions__slide-figure"> \n                                    <picture>\n                                        <source type="image/webp" srcset="'.concat(n[r].webp,'">\n                                        <img src="').concat(n[r].jpg,'" alt="').concat(n[r].alt,'" class="editions__slide-img">\n                                    </picture>\n                                \n                                    <figcaption class="editions__slide-figcaption">\n                                        <span class="editions__slide-disc">\n                                            ').concat(n[r].disc,'\n                                        </span>\n\n                                        <span class="editions__slide-price">\n                                            ').concat(n[r].price,'\n                                        </span>\n\n                                        <span class="editions__slide-disc">\n                                            ').concat(n[r].author,'\n                                        </span>\n                                    </figcaption>\n                                </figure>\n\n                                <button class="editions__slide-btn">\n                                    ÐÐ°ÐºÐ°Ð·Ð°ÑÑ\n                                </button>\n                            </div>\n                        </li>')}404===i.status&&(t.innerHTML="<h3>Ð±Ð»Ð° Ð±Ð»Ð° Ð±Ð»Ð°</h3>")},i.send(null)})),document.addEventListener("DOMContentLoaded",(function(){var e=document.querySelector("#js-projects-track");new Promise((function(t,i){var n=new XMLHttpRequest;n.open("GET","../json/partners/partners.json",!0),n.responseType="json",n.onreadystatechange=function(){if(4==n.readyState&&200===n.status){var t=n.response;t;for(var i=0;i<t.length;i++)e.innerHTML+='<li class="swiper-slide projects__swiper-item">\n                                <a href="#" class="projects__swiper-link">\n                                    <picture>\n                                        <source type="image/webp" srcset="'.concat(t[i].partnersWebp,'">\n                                        <img src="').concat(t[i].partners,'" alt="').concat(t[i].alt,'" class="projects__swiper-img">\n                                    </picture>\n    \n                                    <picture>\n                                        <source type="image/webp" srcset="').concat(t[i].partnersColorWebp,'">\n                                        <img src="').concat(t[i].partnersColor,'" alt="').concat(t[i].alt,'" class="projects__swiper-img-active">\n                                    </picture>\n                                </a>\n                            </li>')}404===n.status&&(e.innerHTML="<h3>Ð±Ð»Ð° Ð±Ð»Ð° Ð±Ð»Ð°</h3>")},n.send(null),t()})).then((function(){setTimeout((function(){e.querySelectorAll(".projects__swiper-item").forEach((function(e){var t=e.querySelector(".projects__swiper-img"),i=t.clientWidth,n=t.clientHeight,r=e.querySelector(".projects__swiper-img-active");r.style.width="".concat(i,"px"),r.style.height="".concat(n,"px")}))}),4e3)}))})),document.addEventListener("DOMContentLoaded",(function(){document.querySelectorAll(".projects__discription_icon").forEach((function(e){var t=e.parentElement.querySelector(".projects__discription_tooltip-content");Popper.createPopper(e,t,{placement:"top",modifiers:[{name:"offset",options:{offset:[0,15]}},{name:"arrow",options:{padding:2}}]})}))})),document.addEventListener("DOMContentLoaded",(function(){var e=document.querySelector(".contacts__title"),t=document.querySelector(".contacts__form-subtitle-container"),i=document.querySelector(".contacts__form-block");function n(){window.screen.width>=768?(e.classList.remove("container"),t.classList.remove("container"),i.classList.remove("container")):(e.classList.add("container"),t.classList.add("container"),i.classList.add("container"))}window.onresize=function(){n()},n()})),document.addEventListener("DOMContentLoaded",(function(){ymaps.ready((function(){var e=new ymaps.Map("js-contacts-card-block",{center:[55.75446196,37.60309677],zoom:14,controls:["zoomControl"]}),t=new ymaps.Placemark([55.76008422997253,37.601079499999905],{hintContent:"<strong>Ð¨Ð¾ÑÑÑÐ¼ â4</strong>",balloonContent:"<strong>Ð¨Ð¾ÑÑÑÐ¼ â4</strong> ÐÐµÐ¾Ð½ÑÑÐµÐ²ÑÐºÐ¸Ð¹ Ð¿ÐµÑÐµÑÐ»Ð¾Ðº, Ð´Ð¾Ð¼ 5, ÑÑÑÐ¾ÐµÐ½Ð¸Ðµ 1"},{iconLayout:"default#image",iconImageHref:"../img/svg/card-metka.svg",iconImageSize:[20,20]});e.geoObjects.add(t)}))})),document.addEventListener("DOMContentLoaded",(function(){function e(){new Swiper("#js-swiper-hero",{loop:!0,autoplay:{delay:5e3},speed:600,observer:!0,observeParents:!0,observeSlideChildren:!0})}function t(){new Swiper("#js-gallery-slider",{navigation:{nextEl:".gallery__swiper-button-next",prevEl:".gallery__swiper-button-prev"},pagination:{el:".gallery__swiper-fraction",type:"fraction"},breakpoints:{0:{slidesPerView:1,slidesPerColumn:1,spaceBetween:0},768:{slidesPerView:2,slidesPerColumn:2,spaceBetween:34},1400:{slidesPerView:3,slidesPerColumn:2,spaceBetween:50}},observer:!0,observeParents:!0,observeSlideChildren:!0})}function i(){var e=window.screen.width;e<768?new Swiper("#js-event-block-swiper",{pagination:{el:".events__swiper-pagination",clickable:!0},effect:"flip",flipEffect:{slideShadows:!0,limitRotation:!0},slidesPerView:1,slidesPerColumn:1,observer:!0,observeParents:!0,observeSlideChildren:!0,autoHight:!0}):null}function n(){var e=window.screen.width;e>=768?new Swiper("#js-editions-slider",{navigation:{nextEl:".editions__swiper-button-next",prevEl:".editions__swiper-button-prev"},pagination:{el:".editions__swiper-fraction",type:"fraction"},breakpoints:{768:{slidesPerView:2,spaceBetween:34},1024:{slidesPerView:2,spaceBetween:49},1400:{slidesPerView:3,spaceBetween:50}},slidesPerColumn:1,observer:!0,observeParents:!0,observeSlideChildren:!0}):null}function r(){new Swiper("#js-projects-slider",{navigation:{nextEl:".projects__swiper-button-next",prevEl:".projects__swiper-button-prev"},breakpoints:{320:{slidesPerView:1},768:{slidesPerView:2,spaceBetween:34},1024:{slidesPerView:2,spaceBetween:50},1400:{slidesPerView:3,spaceBetween:50}},slidesPerColumn:1,observer:!0,observeParents:!0,observeSlideChildren:!0})}window.onresize=function(){e(),t(),i(),n(),r()},e(),t(),i(),n(),r()})),document.addEventListener("DOMContentLoaded",(function(){document.querySelector("#header-select").addEventListener("click",(function(e){e.target.classList.contains("choices__item--selectable")}))}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
