"use strict";function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(t)}
/*! jQuery v3.5.1 | (c) JS Foundation and other contributors | jquery.org/license */function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(t)}function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(t)}
/*! choices.js v9.0.1 | © 2019 Josh Johnson | https://github.com/jshjohnson/Choices#readme */function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(t)}function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(t)}var t,n;function i(e,t){var n=document.querySelector("#js-modal-img"),i=t.split(/\s*-\s*/);i=i[2],n.innerHTML='\n        <button id="js-modal-img-btn" class="modal-img__close-modal"></button>\n\n        <div class="modal-img__container">\n            <figure class="modal-img__figure"> \n                <picture>\n                    <source type="image/webp" srcset="'.concat(e[i].webp,'">\n                    <img src="').concat(e[i].jpg,'" alt="').concat(e[i].alt,'" class="modal-img__img">\n                </picture>\n            \n                <figcaption class="modal-img__figcaption">\n                    ').concat(e[i].disc,"\n                </figcaption>\n            </figure>\n        </div>\n    "),n.classList.remove("modal-img_is-close"),n.classList.add("modal-img_is-open")}!function(t,n){"object"==("undefined"==typeof module?"undefined":e(module))&&"object"==e(module.exports)?module.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:void 0,(function(t,n){var i=[],r=Object.getPrototypeOf,a=i.slice,s=i.flat?function(e){return i.flat.call(e)}:function(e){return i.concat.apply([],e)},o=i.push,l=i.indexOf,c={},d=c.toString,u=c.hasOwnProperty,p=u.toString,h=p.call(Object),f={},m=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},v=function(e){return null!=e&&e===e.window},g=t.document,y={type:!0,src:!0,nonce:!0,noModule:!0};function b(e,t,n){var i,r,a=(n=n||g).createElement("script");if(a.text=e,t)for(i in y)(r=t[i]||t.getAttribute&&t.getAttribute(i))&&a.setAttribute(i,r);n.head.appendChild(a).parentNode.removeChild(a)}function w(t){return null==t?t+"":"object"==e(t)||"function"==typeof t?c[d.call(t)]||"object":e(t)}var E="3.5.1",x=function e(t,n){return new e.fn.init(t,n)};function S(e){var t=!!e&&"length"in e&&e.length,n=w(e);return!m(e)&&!v(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}x.fn=x.prototype={jquery:E,constructor:x,length:0,toArray:function(){return a.call(this)},get:function(e){return null==e?a.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=x.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return x.each(this,e)},map:function(e){return this.pushStack(x.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(x.grep(this,(function(e,t){return(t+1)%2})))},odd:function(){return this.pushStack(x.grep(this,(function(e,t){return t%2})))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(0<=n&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:o,sort:i.sort,splice:i.splice},x.extend=x.fn.extend=function(){var t,n,i,r,a,s,o=arguments[0]||{},l=1,c=arguments.length,d=!1;for("boolean"==typeof o&&(d=o,o=arguments[l]||{},l++),"object"==e(o)||m(o)||(o={}),l===c&&(o=this,l--);l<c;l++)if(null!=(t=arguments[l]))for(n in t)r=t[n],"__proto__"!==n&&o!==r&&(d&&r&&(x.isPlainObject(r)||(a=Array.isArray(r)))?(i=o[n],s=a&&!Array.isArray(i)?[]:a||x.isPlainObject(i)?i:{},a=!1,o[n]=x.extend(d,s,r)):void 0!==r&&(o[n]=r));return o},x.extend({expando:"jQuery"+(E+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==d.call(e)||(t=r(e))&&("function"!=typeof(n=u.call(t,"constructor")&&t.constructor)||p.call(n)!==h))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){b(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(S(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},makeArray:function(e,t){var n=t||[];return null!=e&&(S(Object(e))?x.merge(n,"string"==typeof e?[e]:e):o.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:l.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,a=e.length,s=!n;r<a;r++)!t(e[r],r)!==s&&i.push(e[r]);return i},map:function(e,t,n){var i,r,a=0,o=[];if(S(e))for(i=e.length;a<i;a++)null!=(r=t(e[a],a,n))&&o.push(r);else for(a in e)null!=(r=t(e[a],a,n))&&o.push(r);return s(o)},guid:1,support:f}),"function"==typeof Symbol&&(x.fn[Symbol.iterator]=i[Symbol.iterator]),x.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){c["[object "+t+"]"]=t.toLowerCase()}));var T=function(e){var t,n,i,r,a,s,o,l,c,d,u,p,h,f,m,v,g,y,b,w="sizzle"+1*new Date,E=e.document,x=0,S=0,T=le(),C=le(),_=le(),L=le(),k=function(e,t){return e===t&&(u=!0),0},M={}.hasOwnProperty,A=[],O=A.pop,I=A.push,P=A.push,D=A.slice,N=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},j="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",z="[\\x20\\t\\r\\n\\f]",q="(?:\\\\[\\da-fA-F]{1,6}"+z+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",H="\\["+z+"*("+q+")(?:"+z+"*([*^$|!~]?=)"+z+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+q+"))|)"+z+"*\\]",$=":("+q+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+H+")*)|.*)\\)|)",B=new RegExp(z+"+","g"),F=new RegExp("^"+z+"+|((?:^|[^\\\\])(?:\\\\.)*)"+z+"+$","g"),R=new RegExp("^"+z+"*,"+z+"*"),G=new RegExp("^"+z+"*([>+~]|"+z+")"+z+"*"),W=new RegExp(z+"|>"),V=new RegExp($),X=new RegExp("^"+q+"$"),Y={ID:new RegExp("^#("+q+")"),CLASS:new RegExp("^\\.("+q+")"),TAG:new RegExp("^("+q+"|[*])"),ATTR:new RegExp("^"+H),PSEUDO:new RegExp("^"+$),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+z+"*(even|odd|(([+-]|)(\\d*)n|)"+z+"*(?:([+-]|)"+z+"*(\\d+)|))"+z+"*\\)|)","i"),bool:new RegExp("^(?:"+j+")$","i"),needsContext:new RegExp("^"+z+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+z+"*((?:-\\d)?\\d*)"+z+"*\\)|)(?=[^-]|$)","i")},K=/HTML$/i,U=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\[\\da-fA-F]{1,6}"+z+"?|\\\\([^\\r\\n\\f])","g"),ne=function(e,t){var n="0x"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},ie=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ae=function(){p()},se=we((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{P.apply(A=D.call(E.childNodes),E.childNodes),A[E.childNodes.length].nodeType}catch(t){P={apply:A.length?function(e,t){I.apply(e,D.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function oe(e,t,i,r){var a,o,c,d,u,f,g,y=t&&t.ownerDocument,E=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==E&&9!==E&&11!==E)return i;if(!r&&(p(t),t=t||h,m)){if(11!==E&&(u=Z.exec(e)))if(a=u[1]){if(9===E){if(!(c=t.getElementById(a)))return i;if(c.id===a)return i.push(c),i}else if(y&&(c=y.getElementById(a))&&b(t,c)&&c.id===a)return i.push(c),i}else{if(u[2])return P.apply(i,t.getElementsByTagName(e)),i;if((a=u[3])&&n.getElementsByClassName&&t.getElementsByClassName)return P.apply(i,t.getElementsByClassName(a)),i}if(n.qsa&&!L[e+" "]&&(!v||!v.test(e))&&(1!==E||"object"!==t.nodeName.toLowerCase())){if(g=e,y=t,1===E&&(W.test(e)||G.test(e))){for((y=ee.test(e)&&ge(t.parentNode)||t)===t&&n.scope||((d=t.getAttribute("id"))?d=d.replace(ie,re):t.setAttribute("id",d=w)),o=(f=s(e)).length;o--;)f[o]=(d?"#"+d:":scope")+" "+be(f[o]);g=f.join(",")}try{return P.apply(i,y.querySelectorAll(g)),i}catch(t){L(e,!0)}finally{d===w&&t.removeAttribute("id")}}}return l(e.replace(F,"$1"),t,i,r)}function le(){var e=[];return function t(n,r){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function ce(e){return e[w]=!0,e}function de(e){var t=h.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function ue(e,t){for(var n=e.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=t}function pe(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function he(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function fe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function me(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&se(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function ve(e){return ce((function(t){return t=+t,ce((function(n,i){for(var r,a=e([],n.length,t),s=a.length;s--;)n[r=a[s]]&&(n[r]=!(i[r]=n[r]))}))}))}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=oe.support={},a=oe.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!K.test(t||n&&n.nodeName||"HTML")},p=oe.setDocument=function(e){var t,r,s=e?e.ownerDocument||e:E;return s!=h&&9===s.nodeType&&s.documentElement&&(f=(h=s).documentElement,m=!a(h),E!=h&&(r=h.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",ae,!1):r.attachEvent&&r.attachEvent("onunload",ae)),n.scope=de((function(e){return f.appendChild(e).appendChild(h.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length})),n.attributes=de((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=de((function(e){return e.appendChild(h.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=Q.test(h.getElementsByClassName),n.getById=de((function(e){return f.appendChild(e).id=w,!h.getElementsByName||!h.getElementsByName(w).length})),n.getById?(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(i.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,i,r,a=t.getElementById(e);if(a){if((n=a.getAttributeNode("id"))&&n.value===e)return[a];for(r=t.getElementsByName(e),i=0;a=r[i++];)if((n=a.getAttributeNode("id"))&&n.value===e)return[a]}return[]}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,a=t.getElementsByTagName(e);if("*"===e){for(;n=a[r++];)1===n.nodeType&&i.push(n);return i}return a},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},g=[],v=[],(n.qsa=Q.test(h.querySelectorAll))&&(de((function(e){var t;f.appendChild(e).innerHTML="<a id='"+w+"'></a><select id='"+w+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&v.push("[*^$]="+z+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||v.push("\\["+z+"*(?:value|"+j+")"),e.querySelectorAll("[id~="+w+"-]").length||v.push("~="),(t=h.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||v.push("\\["+z+"*name"+z+"*="+z+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||v.push(":checked"),e.querySelectorAll("a#"+w+"+*").length||v.push(".#.+[+~]"),e.querySelectorAll("\\\f"),v.push("[\\r\\n\\f]")})),de((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=h.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&v.push("name"+z+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&v.push(":enabled",":disabled"),f.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&v.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),v.push(",.*:")}))),(n.matchesSelector=Q.test(y=f.matches||f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&de((function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),g.push("!=",$)})),v=v.length&&new RegExp(v.join("|")),g=g.length&&new RegExp(g.join("|")),t=Q.test(f.compareDocumentPosition),b=t||Q.test(f.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},k=t?function(e,t){if(e===t)return u=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e==h||e.ownerDocument==E&&b(E,e)?-1:t==h||t.ownerDocument==E&&b(E,t)?1:d?N(d,e)-N(d,t):0:4&i?-1:1)}:function(e,t){if(e===t)return u=!0,0;var n,i=0,r=e.parentNode,a=t.parentNode,s=[e],o=[t];if(!r||!a)return e==h?-1:t==h?1:r?-1:a?1:d?N(d,e)-N(d,t):0;if(r===a)return pe(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)o.unshift(n);for(;s[i]===o[i];)i++;return i?pe(s[i],o[i]):s[i]==E?-1:o[i]==E?1:0}),h},oe.matches=function(e,t){return oe(e,null,null,t)},oe.matchesSelector=function(e,t){if(p(e),n.matchesSelector&&m&&!L[t+" "]&&(!g||!g.test(t))&&(!v||!v.test(t)))try{var i=y.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){L(t,!0)}return 0<oe(t,h,null,[e]).length},oe.contains=function(e,t){return(e.ownerDocument||e)!=h&&p(e),b(e,t)},oe.attr=function(e,t){(e.ownerDocument||e)!=h&&p(e);var r=i.attrHandle[t.toLowerCase()],a=r&&M.call(i.attrHandle,t.toLowerCase())?r(e,t,!m):void 0;return void 0!==a?a:n.attributes||!m?e.getAttribute(t):(a=e.getAttributeNode(t))&&a.specified?a.value:null},oe.escape=function(e){return(e+"").replace(ie,re)},oe.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},oe.uniqueSort=function(e){var t,i=[],r=0,a=0;if(u=!n.detectDuplicates,d=!n.sortStable&&e.slice(0),e.sort(k),u){for(;t=e[a++];)t===e[a]&&(r=i.push(a));for(;r--;)e.splice(i[r],1)}return d=null,e},r=oe.getText=function(e){var t,n="",i=0,a=e.nodeType;if(a){if(1===a||9===a||11===a){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===a||4===a)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(i=oe.selectors={cacheLength:50,createPseudo:ce,match:Y,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||oe.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&oe.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Y.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&V.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=T[e+" "];return t||(t=new RegExp("(^|"+z+")"+e+"("+z+"|$)"))&&T(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(i){var r=oe.attr(i,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&-1<r.indexOf(n):"$="===t?n&&r.slice(-n.length)===n:"~="===t?-1<(" "+r.replace(B," ")+" ").indexOf(n):"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,r){var a="nth"!==e.slice(0,3),s="last"!==e.slice(-4),o="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var c,d,u,p,h,f,m=a!==s?"nextSibling":"previousSibling",v=t.parentNode,g=o&&t.nodeName.toLowerCase(),y=!l&&!o,b=!1;if(v){if(a){for(;m;){for(p=t;p=p[m];)if(o?p.nodeName.toLowerCase()===g:1===p.nodeType)return!1;f=m="only"===e&&!f&&"nextSibling"}return!0}if(f=[s?v.firstChild:v.lastChild],s&&y){for(b=(h=(c=(d=(u=(p=v)[w]||(p[w]={}))[p.uniqueID]||(u[p.uniqueID]={}))[e]||[])[0]===x&&c[1])&&c[2],p=h&&v.childNodes[h];p=++h&&p&&p[m]||(b=h=0)||f.pop();)if(1===p.nodeType&&++b&&p===t){d[e]=[x,h,b];break}}else if(y&&(b=h=(c=(d=(u=(p=t)[w]||(p[w]={}))[p.uniqueID]||(u[p.uniqueID]={}))[e]||[])[0]===x&&c[1]),!1===b)for(;(p=++h&&p&&p[m]||(b=h=0)||f.pop())&&((o?p.nodeName.toLowerCase()!==g:1!==p.nodeType)||!++b||(y&&((d=(u=p[w]||(p[w]={}))[p.uniqueID]||(u[p.uniqueID]={}))[e]=[x,b]),p!==t)););return(b-=r)===i||b%i==0&&0<=b/i}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||oe.error("unsupported pseudo: "+e);return r[w]?r(t):1<r.length?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?ce((function(e,n){for(var i,a=r(e,t),s=a.length;s--;)e[i=N(e,a[s])]=!(n[i]=a[s])})):function(e){return r(e,0,n)}):r}},pseudos:{not:ce((function(e){var t=[],n=[],i=o(e.replace(F,"$1"));return i[w]?ce((function(e,t,n,r){for(var a,s=i(e,null,r,[]),o=e.length;o--;)(a=s[o])&&(e[o]=!(t[o]=a))})):function(e,r,a){return t[0]=e,i(t,null,a,n),t[0]=null,!n.pop()}})),has:ce((function(e){return function(t){return 0<oe(e,t).length}})),contains:ce((function(e){return e=e.replace(te,ne),function(t){return-1<(t.textContent||r(t)).indexOf(e)}})),lang:ce((function(e){return X.test(e||"")||oe.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===f},focus:function(e){return e===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:me(!1),disabled:me(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return U.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:ve((function(){return[0]})),last:ve((function(e,t){return[t-1]})),eq:ve((function(e,t,n){return[n<0?n+t:n]})),even:ve((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:ve((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:ve((function(e,t,n){for(var i=n<0?n+t:t<n?t:n;0<=--i;)e.push(i);return e})),gt:ve((function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e}))}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=he(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=fe(t);function ye(){}function be(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function we(e,t,n){var i=t.dir,r=t.next,a=r||i,s=n&&"parentNode"===a,o=S++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||s)return e(t,n,r);return!1}:function(t,n,l){var c,d,u,p=[x,o];if(l){for(;t=t[i];)if((1===t.nodeType||s)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||s)if(d=(u=t[w]||(t[w]={}))[t.uniqueID]||(u[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((c=d[a])&&c[0]===x&&c[1]===o)return p[2]=c[2];if((d[a]=p)[2]=e(t,n,l))return!0}return!1}}function Ee(e){return 1<e.length?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function xe(e,t,n,i,r){for(var a,s=[],o=0,l=e.length,c=null!=t;o<l;o++)(a=e[o])&&(n&&!n(a,i,r)||(s.push(a),c&&t.push(o)));return s}function Se(e,t,n,i,r,a){return i&&!i[w]&&(i=Se(i)),r&&!r[w]&&(r=Se(r,a)),ce((function(a,s,o,l){var c,d,u,p=[],h=[],f=s.length,m=a||function(e,t,n){for(var i=0,r=t.length;i<r;i++)oe(e,t[i],n);return n}(t||"*",o.nodeType?[o]:o,[]),v=!e||!a&&t?m:xe(m,p,e,o,l),g=n?r||(a?e:f||i)?[]:s:v;if(n&&n(v,g,o,l),i)for(c=xe(g,h),i(c,[],o,l),d=c.length;d--;)(u=c[d])&&(g[h[d]]=!(v[h[d]]=u));if(a){if(r||e){if(r){for(c=[],d=g.length;d--;)(u=g[d])&&c.push(v[d]=u);r(null,g=[],c,l)}for(d=g.length;d--;)(u=g[d])&&-1<(c=r?N(a,u):p[d])&&(a[c]=!(s[c]=u))}}else g=xe(g===s?g.splice(f,g.length):g),r?r(null,s,g,l):P.apply(s,g)}))}function Te(e){for(var t,n,r,a=e.length,s=i.relative[e[0].type],o=s||i.relative[" "],l=s?1:0,d=we((function(e){return e===t}),o,!0),u=we((function(e){return-1<N(t,e)}),o,!0),p=[function(e,n,i){var r=!s&&(i||n!==c)||((t=n).nodeType?d(e,n,i):u(e,n,i));return t=null,r}];l<a;l++)if(n=i.relative[e[l].type])p=[we(Ee(p),n)];else{if((n=i.filter[e[l].type].apply(null,e[l].matches))[w]){for(r=++l;r<a&&!i.relative[e[r].type];r++);return Se(1<l&&Ee(p),1<l&&be(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(F,"$1"),n,l<r&&Te(e.slice(l,r)),r<a&&Te(e=e.slice(r)),r<a&&be(e))}p.push(n)}return Ee(p)}return ye.prototype=i.filters=i.pseudos,i.setFilters=new ye,s=oe.tokenize=function(e,t){var n,r,a,s,o,l,c,d=C[e+" "];if(d)return t?0:d.slice(0);for(o=e,l=[],c=i.preFilter;o;){for(s in n&&!(r=R.exec(o))||(r&&(o=o.slice(r[0].length)||o),l.push(a=[])),n=!1,(r=G.exec(o))&&(n=r.shift(),a.push({value:n,type:r[0].replace(F," ")}),o=o.slice(n.length)),i.filter)!(r=Y[s].exec(o))||c[s]&&!(r=c[s](r))||(n=r.shift(),a.push({value:n,type:s,matches:r}),o=o.slice(n.length));if(!n)break}return t?o.length:o?oe.error(e):C(e,l).slice(0)},o=oe.compile=function(e,t){var n,r,a,o,l,d,u=[],f=[],v=_[e+" "];if(!v){for(t||(t=s(e)),n=t.length;n--;)(v=Te(t[n]))[w]?u.push(v):f.push(v);(v=_(e,(r=f,o=0<(a=u).length,l=0<r.length,d=function(e,t,n,s,d){var u,f,v,g=0,y="0",b=e&&[],w=[],E=c,S=e||l&&i.find.TAG("*",d),T=x+=null==E?1:Math.random()||.1,C=S.length;for(d&&(c=t==h||t||d);y!==C&&null!=(u=S[y]);y++){if(l&&u){for(f=0,t||u.ownerDocument==h||(p(u),n=!m);v=r[f++];)if(v(u,t||h,n)){s.push(u);break}d&&(x=T)}o&&((u=!v&&u)&&g--,e&&b.push(u))}if(g+=y,o&&y!==g){for(f=0;v=a[f++];)v(b,w,t,n);if(e){if(0<g)for(;y--;)b[y]||w[y]||(w[y]=O.call(s));w=xe(w)}P.apply(s,w),d&&!e&&0<w.length&&1<g+a.length&&oe.uniqueSort(s)}return d&&(x=T,c=E),b},o?ce(d):d))).selector=e}return v},l=oe.select=function(e,t,n,r){var a,l,c,d,u,p="function"==typeof e&&e,h=!r&&s(e=p.selector||e);if(n=n||[],1===h.length){if(2<(l=h[0]=h[0].slice(0)).length&&"ID"===(c=l[0]).type&&9===t.nodeType&&m&&i.relative[l[1].type]){if(!(t=(i.find.ID(c.matches[0].replace(te,ne),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(a=Y.needsContext.test(e)?0:l.length;a--&&(c=l[a],!i.relative[d=c.type]);)if((u=i.find[d])&&(r=u(c.matches[0].replace(te,ne),ee.test(l[0].type)&&ge(t.parentNode)||t))){if(l.splice(a,1),!(e=r.length&&be(l)))return P.apply(n,r),n;break}}return(p||o(e,h))(r,t,!m,n,!t||ee.test(e)&&ge(t.parentNode)||t),n},n.sortStable=w.split("").sort(k).join("")===w,n.detectDuplicates=!!u,p(),n.sortDetached=de((function(e){return 1&e.compareDocumentPosition(h.createElement("fieldset"))})),de((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||ue("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&de((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||ue("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),de((function(e){return null==e.getAttribute("disabled")}))||ue(j,(function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null})),oe}(t);x.find=T,(x.expr=T.selectors)[":"]=x.expr.pseudos,x.uniqueSort=x.unique=T.uniqueSort,x.text=T.getText,x.isXMLDoc=T.isXML,x.contains=T.contains,x.escapeSelector=T.escape;var C=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&x(e).is(n))break;i.push(e)}return i},_=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},L=x.expr.match.needsContext;function k(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var M=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function A(e,t,n){return m(t)?x.grep(e,(function(e,i){return!!t.call(e,i,e)!==n})):t.nodeType?x.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?x.grep(e,(function(e){return-1<l.call(t,e)!==n})):x.filter(t,e,n)}x.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?x.find.matchesSelector(i,e)?[i]:[]:x.find.matches(e,x.grep(t,(function(e){return 1===e.nodeType})))},x.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(x(e).filter((function(){for(t=0;t<i;t++)if(x.contains(r[t],this))return!0})));for(n=this.pushStack([]),t=0;t<i;t++)x.find(e,r[t],n);return 1<i?x.uniqueSort(n):n},filter:function(e){return this.pushStack(A(this,e||[],!1))},not:function(e){return this.pushStack(A(this,e||[],!0))},is:function(e){return!!A(this,"string"==typeof e&&L.test(e)?x(e):e||[],!1).length}});var O,I=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(x.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||O,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:I.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof x?t[0]:t,x.merge(this,x.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:g,!0)),M.test(i[1])&&x.isPlainObject(t))for(i in t)m(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=g.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):m(e)?void 0!==n.ready?n.ready(e):e(x):x.makeArray(e,this)}).prototype=x.fn,O=x(g);var P=/^(?:parents|prev(?:Until|All))/,D={children:!0,contents:!0,next:!0,prev:!0};function N(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}x.fn.extend({has:function(e){var t=x(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(x.contains(this,t[e]))return!0}))},closest:function(e,t){var n,i=0,r=this.length,a=[],s="string"!=typeof e&&x(e);if(!L.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?-1<s.index(n):1===n.nodeType&&x.find.matchesSelector(n,e))){a.push(n);break}return this.pushStack(1<a.length?x.uniqueSort(a):a)},index:function(e){return e?"string"==typeof e?l.call(x(e),this[0]):l.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(x.uniqueSort(x.merge(this.get(),x(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),x.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return C(e,"parentNode")},parentsUntil:function(e,t,n){return C(e,"parentNode",n)},next:function(e){return N(e,"nextSibling")},prev:function(e){return N(e,"previousSibling")},nextAll:function(e){return C(e,"nextSibling")},prevAll:function(e){return C(e,"previousSibling")},nextUntil:function(e,t,n){return C(e,"nextSibling",n)},prevUntil:function(e,t,n){return C(e,"previousSibling",n)},siblings:function(e){return _((e.parentNode||{}).firstChild,e)},children:function(e){return _(e.firstChild)},contents:function(e){return null!=e.contentDocument&&r(e.contentDocument)?e.contentDocument:(k(e,"template")&&(e=e.content||e),x.merge([],e.childNodes))}},(function(e,t){x.fn[e]=function(n,i){var r=x.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=x.filter(i,r)),1<this.length&&(D[e]||x.uniqueSort(r),P.test(e)&&r.reverse()),this.pushStack(r)}}));var j=/[^\x20\t\r\n\f]+/g;function z(e){return e}function q(e){throw e}function H(e,t,n,i){var r;try{e&&m(r=e.promise)?r.call(e).done(t).fail(n):e&&m(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}x.Callbacks=function(e){var t;e="string"==typeof e?(t={},x.each(e.match(j)||[],(function(e,n){t[n]=!0})),t):x.extend({},e);var n,i,r,a,s=[],o=[],l=-1,c=function(){for(a=a||e.once,r=n=!0;o.length;l=-1)for(i=o.shift();++l<s.length;)!1===s[l].apply(i[0],i[1])&&e.stopOnFalse&&(l=s.length,i=!1);e.memory||(i=!1),n=!1,a&&(s=i?[]:"")},d={add:function(){return s&&(i&&!n&&(l=s.length-1,o.push(i)),function t(n){x.each(n,(function(n,i){m(i)?e.unique&&d.has(i)||s.push(i):i&&i.length&&"string"!==w(i)&&t(i)}))}(arguments),i&&!n&&c()),this},remove:function(){return x.each(arguments,(function(e,t){for(var n;-1<(n=x.inArray(t,s,n));)s.splice(n,1),n<=l&&l--})),this},has:function(e){return e?-1<x.inArray(e,s):0<s.length},empty:function(){return s&&(s=[]),this},disable:function(){return a=o=[],s=i="",this},disabled:function(){return!s},lock:function(){return a=o=[],i||n||(s=i=""),this},locked:function(){return!!a},fireWith:function(e,t){return a||(t=[e,(t=t||[]).slice?t.slice():t],o.push(t),n||c()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!r}};return d},x.extend({Deferred:function(n){var i=[["notify","progress",x.Callbacks("memory"),x.Callbacks("memory"),2],["resolve","done",x.Callbacks("once memory"),x.Callbacks("once memory"),0,"resolved"],["reject","fail",x.Callbacks("once memory"),x.Callbacks("once memory"),1,"rejected"]],r="pending",a={state:function(){return r},always:function(){return s.done(arguments).fail(arguments),this},catch:function(e){return a.then(null,e)},pipe:function(){var e=arguments;return x.Deferred((function(t){x.each(i,(function(n,i){var r=m(e[i[4]])&&e[i[4]];s[i[1]]((function(){var e=r&&r.apply(this,arguments);e&&m(e.promise)?e.promise().progress(t.notify).done(t.resolve).fail(t.reject):t[i[0]+"With"](this,r?[e]:arguments)}))})),e=null})).promise()},then:function(n,r,a){var s=0;function o(n,i,r,a){return function(){var l=this,c=arguments,d=function(){var t,d;if(!(n<s)){if((t=r.apply(l,c))===i.promise())throw new TypeError("Thenable self-resolution");d=t&&("object"==e(t)||"function"==typeof t)&&t.then,m(d)?a?d.call(t,o(s,i,z,a),o(s,i,q,a)):(s++,d.call(t,o(s,i,z,a),o(s,i,q,a),o(s,i,z,i.notifyWith))):(r!==z&&(l=void 0,c=[t]),(a||i.resolveWith)(l,c))}},u=a?d:function(){try{d()}catch(e){x.Deferred.exceptionHook&&x.Deferred.exceptionHook(e,u.stackTrace),s<=n+1&&(r!==q&&(l=void 0,c=[e]),i.rejectWith(l,c))}};n?u():(x.Deferred.getStackHook&&(u.stackTrace=x.Deferred.getStackHook()),t.setTimeout(u))}}return x.Deferred((function(e){i[0][3].add(o(0,e,m(a)?a:z,e.notifyWith)),i[1][3].add(o(0,e,m(n)?n:z)),i[2][3].add(o(0,e,m(r)?r:q))})).promise()},promise:function(e){return null!=e?x.extend(e,a):a}},s={};return x.each(i,(function(e,t){var n=t[2],o=t[5];a[t[1]]=n.add,o&&n.add((function(){r=o}),i[3-e][2].disable,i[3-e][3].disable,i[0][2].lock,i[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+"With"](this===s?void 0:this,arguments),this},s[t[0]+"With"]=n.fireWith})),a.promise(s),n&&n.call(s,s),s},when:function(e){var t=arguments.length,n=t,i=Array(n),r=a.call(arguments),s=x.Deferred(),o=function(e){return function(n){i[e]=this,r[e]=1<arguments.length?a.call(arguments):n,--t||s.resolveWith(i,r)}};if(t<=1&&(H(e,s.done(o(n)).resolve,s.reject,!t),"pending"===s.state()||m(r[n]&&r[n].then)))return s.then();for(;n--;)H(r[n],o(n),s.reject);return s.promise()}});var $=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;x.Deferred.exceptionHook=function(e,n){t.console&&t.console.warn&&e&&$.test(e.name)&&t.console.warn("jQuery.Deferred exception: "+e.message,e.stack,n)},x.readyException=function(e){t.setTimeout((function(){throw e}))};var B=x.Deferred();function F(){g.removeEventListener("DOMContentLoaded",F),t.removeEventListener("load",F),x.ready()}x.fn.ready=function(e){return B.then(e).catch((function(e){x.readyException(e)})),this},x.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--x.readyWait:x.isReady)||(x.isReady=!0)!==e&&0<--x.readyWait||B.resolveWith(g,[x])}}),x.ready.then=B.then,"complete"===g.readyState||"loading"!==g.readyState&&!g.documentElement.doScroll?t.setTimeout(x.ready):(g.addEventListener("DOMContentLoaded",F),t.addEventListener("load",F));var R=function e(t,n,i,r,a,s,o){var l=0,c=t.length,d=null==i;if("object"===w(i))for(l in a=!0,i)e(t,n,l,i[l],!0,s,o);else if(void 0!==r&&(a=!0,m(r)||(o=!0),d&&(o?(n.call(t,r),n=null):(d=n,n=function(e,t,n){return d.call(x(e),n)})),n))for(;l<c;l++)n(t[l],i,o?r:r.call(t[l],l,n(t[l],i)));return a?t:d?n.call(t):c?n(t[0],i):s},G=/^-ms-/,W=/-([a-z])/g;function V(e,t){return t.toUpperCase()}function X(e){return e.replace(G,"ms-").replace(W,V)}var Y=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function K(){this.expando=x.expando+K.uid++}K.uid=1,K.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Y(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[X(t)]=n;else for(i in t)r[X(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][X(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(X):(t=X(t))in i?[t]:t.match(j)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||x.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!x.isEmptyObject(t)}};var U=new K,J=new K,Q=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function ee(e,t,n){var i,r;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(Z,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n="true"===(r=n)||"false"!==r&&("null"===r?null:r===+r+""?+r:Q.test(r)?JSON.parse(r):r)}catch(e){}J.set(e,t,n)}else n=void 0;return n}x.extend({hasData:function(e){return J.hasData(e)||U.hasData(e)},data:function(e,t,n){return J.access(e,t,n)},removeData:function(e,t){J.remove(e,t)},_data:function(e,t,n){return U.access(e,t,n)},_removeData:function(e,t){U.remove(e,t)}}),x.fn.extend({data:function(t,n){var i,r,a,s=this[0],o=s&&s.attributes;if(void 0===t){if(this.length&&(a=J.get(s),1===s.nodeType&&!U.get(s,"hasDataAttrs"))){for(i=o.length;i--;)o[i]&&0===(r=o[i].name).indexOf("data-")&&(r=X(r.slice(5)),ee(s,r,a[r]));U.set(s,"hasDataAttrs",!0)}return a}return"object"==e(t)?this.each((function(){J.set(this,t)})):R(this,(function(e){var n;if(s&&void 0===e)return void 0!==(n=J.get(s,t))||void 0!==(n=ee(s,t))?n:void 0;this.each((function(){J.set(this,t,e)}))}),null,n,1<arguments.length,null,!0)},removeData:function(e){return this.each((function(){J.remove(this,e)}))}}),x.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=U.get(e,t),n&&(!i||Array.isArray(n)?i=U.access(e,t,x.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){var n=x.queue(e,t=t||"fx"),i=n.length,r=n.shift(),a=x._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete a.stop,r.call(e,(function(){x.dequeue(e,t)}),a)),!i&&a&&a.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return U.get(e,n)||U.access(e,n,{empty:x.Callbacks("once memory").add((function(){U.remove(e,[t+"queue",n])}))})}}),x.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?x.queue(this[0],e):void 0===t?this:this.each((function(){var n=x.queue(this,e,t);x._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&x.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){x.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=x.Deferred(),a=this,s=this.length,o=function(){--i||r.resolveWith(a,[a])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=U.get(a[s],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(o));return o(),r.promise(t)}});var te=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ne=new RegExp("^(?:([+-])=|)("+te+")([a-z%]*)$","i"),ie=["Top","Right","Bottom","Left"],re=g.documentElement,ae=function(e){return x.contains(e.ownerDocument,e)},se={composed:!0};re.getRootNode&&(ae=function(e){return x.contains(e.ownerDocument,e)||e.getRootNode(se)===e.ownerDocument});var oe=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ae(e)&&"none"===x.css(e,"display")};function le(e,t,n,i){var r,a,s=20,o=i?function(){return i.cur()}:function(){return x.css(e,t,"")},l=o(),c=n&&n[3]||(x.cssNumber[t]?"":"px"),d=e.nodeType&&(x.cssNumber[t]||"px"!==c&&+l)&&ne.exec(x.css(e,t));if(d&&d[3]!==c){for(l/=2,c=c||d[3],d=+l||1;s--;)x.style(e,t,d+c),(1-a)*(1-(a=o()/l||.5))<=0&&(s=0),d/=a;x.style(e,t,(d*=2)+c),n=n||[]}return n&&(d=+d||+l||0,r=n[1]?d+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=d,i.end=r)),r}var ce={};function de(e,t){for(var n,i,r,a,s,o,l,c=[],d=0,u=e.length;d<u;d++)(i=e[d]).style&&(n=i.style.display,t?("none"===n&&(c[d]=U.get(i,"display")||null,c[d]||(i.style.display="")),""===i.style.display&&oe(i)&&(c[d]=(l=s=a=void 0,s=(r=i).ownerDocument,o=r.nodeName,(l=ce[o])||(a=s.body.appendChild(s.createElement(o)),l=x.css(a,"display"),a.parentNode.removeChild(a),"none"===l&&(l="block"),ce[o]=l)))):"none"!==n&&(c[d]="none",U.set(i,"display",n)));for(d=0;d<u;d++)null!=c[d]&&(e[d].style.display=c[d]);return e}x.fn.extend({show:function(){return de(this,!0)},hide:function(){return de(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){oe(this)?x(this).show():x(this).hide()}))}});var ue,pe,he=/^(?:checkbox|radio)$/i,fe=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,me=/^$|^module$|\/(?:java|ecma)script/i;ue=g.createDocumentFragment().appendChild(g.createElement("div")),(pe=g.createElement("input")).setAttribute("type","radio"),pe.setAttribute("checked","checked"),pe.setAttribute("name","t"),ue.appendChild(pe),f.checkClone=ue.cloneNode(!0).cloneNode(!0).lastChild.checked,ue.innerHTML="<textarea>x</textarea>",f.noCloneChecked=!!ue.cloneNode(!0).lastChild.defaultValue,ue.innerHTML="<option></option>",f.option=!!ue.lastChild;var ve={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&k(e,t)?x.merge([e],n):n}function ye(e,t){for(var n=0,i=e.length;n<i;n++)U.set(e[n],"globalEval",!t||U.get(t[n],"globalEval"))}ve.tbody=ve.tfoot=ve.colgroup=ve.caption=ve.thead,ve.th=ve.td,f.option||(ve.optgroup=ve.option=[1,"<select multiple='multiple'>","</select>"]);var be=/<|&#?\w+;/;function we(e,t,n,i,r){for(var a,s,o,l,c,d,u=t.createDocumentFragment(),p=[],h=0,f=e.length;h<f;h++)if((a=e[h])||0===a)if("object"===w(a))x.merge(p,a.nodeType?[a]:a);else if(be.test(a)){for(s=s||u.appendChild(t.createElement("div")),o=(fe.exec(a)||["",""])[1].toLowerCase(),l=ve[o]||ve._default,s.innerHTML=l[1]+x.htmlPrefilter(a)+l[2],d=l[0];d--;)s=s.lastChild;x.merge(p,s.childNodes),(s=u.firstChild).textContent=""}else p.push(t.createTextNode(a));for(u.textContent="",h=0;a=p[h++];)if(i&&-1<x.inArray(a,i))r&&r.push(a);else if(c=ae(a),s=ge(u.appendChild(a),"script"),c&&ye(s),n)for(d=0;a=s[d++];)me.test(a.type||"")&&n.push(a);return u}var Ee=/^key/,xe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Se=/^([^.]*)(?:\.(.+)|)/;function Te(){return!0}function Ce(){return!1}function _e(e,t){return e===function(){try{return g.activeElement}catch(e){}}()==("focus"===t)}function Le(t,n,i,r,a,s){var o,l;if("object"==e(n)){for(l in"string"!=typeof i&&(r=r||i,i=void 0),n)Le(t,l,i,r,n[l],s);return t}if(null==r&&null==a?(a=i,r=i=void 0):null==a&&("string"==typeof i?(a=r,r=void 0):(a=r,r=i,i=void 0)),!1===a)a=Ce;else if(!a)return t;return 1===s&&(o=a,(a=function(e){return x().off(e),o.apply(this,arguments)}).guid=o.guid||(o.guid=x.guid++)),t.each((function(){x.event.add(this,n,a,r,i)}))}function ke(e,t,n){n?(U.set(e,t,!1),x.event.add(e,t,{namespace:!1,handler:function(e){var i,r,s=U.get(this,t);if(1&e.isTrigger&&this[t]){if(s.length)(x.event.special[t]||{}).delegateType&&e.stopPropagation();else if(s=a.call(arguments),U.set(this,t,s),i=n(this,t),this[t](),s!==(r=U.get(this,t))||i?U.set(this,t,!1):r={},s!==r)return e.stopImmediatePropagation(),e.preventDefault(),r.value}else s.length&&(U.set(this,t,{value:x.event.trigger(x.extend(s[0],x.Event.prototype),s.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===U.get(e,t)&&x.event.add(e,t,Te)}x.event={global:{},add:function(e,t,n,i,r){var a,s,o,l,c,d,u,p,h,f,m,v=U.get(e);if(Y(e))for(n.handler&&(n=(a=n).handler,r=a.selector),r&&x.find.matchesSelector(re,r),n.guid||(n.guid=x.guid++),(l=v.events)||(l=v.events=Object.create(null)),(s=v.handle)||(s=v.handle=function(t){return void 0!==x&&x.event.triggered!==t.type?x.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(j)||[""]).length;c--;)h=m=(o=Se.exec(t[c])||[])[1],f=(o[2]||"").split(".").sort(),h&&(u=x.event.special[h]||{},h=(r?u.delegateType:u.bindType)||h,u=x.event.special[h]||{},d=x.extend({type:h,origType:m,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&x.expr.match.needsContext.test(r),namespace:f.join(".")},a),(p=l[h])||((p=l[h]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(e,i,f,s)||e.addEventListener&&e.addEventListener(h,s)),u.add&&(u.add.call(e,d),d.handler.guid||(d.handler.guid=n.guid)),r?p.splice(p.delegateCount++,0,d):p.push(d),x.event.global[h]=!0)},remove:function(e,t,n,i,r){var a,s,o,l,c,d,u,p,h,f,m,v=U.hasData(e)&&U.get(e);if(v&&(l=v.events)){for(c=(t=(t||"").match(j)||[""]).length;c--;)if(h=m=(o=Se.exec(t[c])||[])[1],f=(o[2]||"").split(".").sort(),h){for(u=x.event.special[h]||{},p=l[h=(i?u.delegateType:u.bindType)||h]||[],o=o[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=a=p.length;a--;)d=p[a],!r&&m!==d.origType||n&&n.guid!==d.guid||o&&!o.test(d.namespace)||i&&i!==d.selector&&("**"!==i||!d.selector)||(p.splice(a,1),d.selector&&p.delegateCount--,u.remove&&u.remove.call(e,d));s&&!p.length&&(u.teardown&&!1!==u.teardown.call(e,f,v.handle)||x.removeEvent(e,h,v.handle),delete l[h])}else for(h in l)x.event.remove(e,h+t[c],n,i,!0);x.isEmptyObject(l)&&U.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,a,s,o=new Array(arguments.length),l=x.event.fix(e),c=(U.get(this,"events")||Object.create(null))[l.type]||[],d=x.event.special[l.type]||{};for(o[0]=l,t=1;t<arguments.length;t++)o[t]=arguments[t];if(l.delegateTarget=this,!d.preDispatch||!1!==d.preDispatch.call(this,l)){for(s=x.event.handlers.call(this,l,c),t=0;(r=s[t++])&&!l.isPropagationStopped();)for(l.currentTarget=r.elem,n=0;(a=r.handlers[n++])&&!l.isImmediatePropagationStopped();)l.rnamespace&&!1!==a.namespace&&!l.rnamespace.test(a.namespace)||(l.handleObj=a,l.data=a.data,void 0!==(i=((x.event.special[a.origType]||{}).handle||a.handler).apply(r.elem,o))&&!1===(l.result=i)&&(l.preventDefault(),l.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,l),l.result}},handlers:function(e,t){var n,i,r,a,s,o=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&1<=e.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(a=[],s={},n=0;n<l;n++)void 0===s[r=(i=t[n]).selector+" "]&&(s[r]=i.needsContext?-1<x(r,this).index(c):x.find(r,this,null,[c]).length),s[r]&&a.push(i);a.length&&o.push({elem:c,handlers:a})}return c=this,l<t.length&&o.push({elem:c,handlers:t.slice(l)}),o},addProp:function(e,t){Object.defineProperty(x.Event.prototype,e,{enumerable:!0,configurable:!0,get:m(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[x.expando]?e:new x.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return he.test(t.type)&&t.click&&k(t,"input")&&ke(t,"click",Te),!1},trigger:function(e){var t=this||e;return he.test(t.type)&&t.click&&k(t,"input")&&ke(t,"click"),!0},_default:function(e){var t=e.target;return he.test(t.type)&&t.click&&k(t,"input")&&U.get(t,"click")||k(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},x.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},(x.Event=function(e,t){if(!(this instanceof x.Event))return new x.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Te:Ce,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&x.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[x.expando]=!0}).prototype={constructor:x.Event,isDefaultPrevented:Ce,isPropagationStopped:Ce,isImmediatePropagationStopped:Ce,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Te,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Te,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Te,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},x.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ee.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&xe.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},x.event.addProp),x.each({focus:"focusin",blur:"focusout"},(function(e,t){x.event.special[e]={setup:function(){return ke(this,e,_e),!1},trigger:function(){return ke(this,e),!0},delegateType:t}})),x.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){x.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=e.relatedTarget,r=e.handleObj;return i&&(i===this||x.contains(this,i))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}})),x.fn.extend({on:function(e,t,n,i){return Le(this,e,t,n,i)},one:function(e,t,n,i){return Le(this,e,t,n,i,1)},off:function(t,n,i){var r,a;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,x(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==e(t)){for(a in t)this.off(a,n,t[a]);return this}return!1!==n&&"function"!=typeof n||(i=n,n=void 0),!1===i&&(i=Ce),this.each((function(){x.event.remove(this,t,i,n)}))}});var Me=/<script|<style|<link/i,Ae=/checked\s*(?:[^=]|=\s*.checked.)/i,Oe=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ie(e,t){return k(e,"table")&&k(11!==t.nodeType?t:t.firstChild,"tr")&&x(e).children("tbody")[0]||e}function Pe(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function De(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Ne(e,t){var n,i,r,a,s,o;if(1===t.nodeType){if(U.hasData(e)&&(o=U.get(e).events))for(r in U.remove(t,"handle events"),o)for(n=0,i=o[r].length;n<i;n++)x.event.add(t,r,o[r][n]);J.hasData(e)&&(a=J.access(e),s=x.extend({},a),J.set(t,s))}}function je(e,t,n,i){t=s(t);var r,a,o,l,c,d,u=0,p=e.length,h=p-1,v=t[0],g=m(v);if(g||1<p&&"string"==typeof v&&!f.checkClone&&Ae.test(v))return e.each((function(r){var a=e.eq(r);g&&(t[0]=v.call(this,r,a.html())),je(a,t,n,i)}));if(p&&(a=(r=we(t,e[0].ownerDocument,!1,e,i)).firstChild,1===r.childNodes.length&&(r=a),a||i)){for(l=(o=x.map(ge(r,"script"),Pe)).length;u<p;u++)c=r,u!==h&&(c=x.clone(c,!0,!0),l&&x.merge(o,ge(c,"script"))),n.call(e[u],c,u);if(l)for(d=o[o.length-1].ownerDocument,x.map(o,De),u=0;u<l;u++)c=o[u],me.test(c.type||"")&&!U.access(c,"globalEval")&&x.contains(d,c)&&(c.src&&"module"!==(c.type||"").toLowerCase()?x._evalUrl&&!c.noModule&&x._evalUrl(c.src,{nonce:c.nonce||c.getAttribute("nonce")},d):b(c.textContent.replace(Oe,""),c,d))}return e}function ze(e,t,n){for(var i,r=t?x.filter(t,e):e,a=0;null!=(i=r[a]);a++)n||1!==i.nodeType||x.cleanData(ge(i)),i.parentNode&&(n&&ae(i)&&ye(ge(i,"script")),i.parentNode.removeChild(i));return e}x.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,r,a,s,o,l,c,d=e.cloneNode(!0),u=ae(e);if(!(f.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||x.isXMLDoc(e)))for(s=ge(d),i=0,r=(a=ge(e)).length;i<r;i++)o=a[i],"input"===(c=(l=s[i]).nodeName.toLowerCase())&&he.test(o.type)?l.checked=o.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=o.defaultValue);if(t)if(n)for(a=a||ge(e),s=s||ge(d),i=0,r=a.length;i<r;i++)Ne(a[i],s[i]);else Ne(e,d);return 0<(s=ge(d,"script")).length&&ye(s,!u&&ge(e,"script")),d},cleanData:function(e){for(var t,n,i,r=x.event.special,a=0;void 0!==(n=e[a]);a++)if(Y(n)){if(t=n[U.expando]){if(t.events)for(i in t.events)r[i]?x.event.remove(n,i):x.removeEvent(n,i,t.handle);n[U.expando]=void 0}n[J.expando]&&(n[J.expando]=void 0)}}}),x.fn.extend({detach:function(e){return ze(this,e,!0)},remove:function(e){return ze(this,e)},text:function(e){return R(this,(function(e){return void 0===e?x.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return je(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ie(this,e).appendChild(e)}))},prepend:function(){return je(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ie(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return je(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return je(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(x.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return x.clone(this,e,t)}))},html:function(e){return R(this,(function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Me.test(e)&&!ve[(fe.exec(e)||["",""])[1].toLowerCase()]){e=x.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(x.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return je(this,arguments,(function(t){var n=this.parentNode;x.inArray(this,e)<0&&(x.cleanData(ge(this)),n&&n.replaceChild(t,this))}),e)}}),x.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){x.fn[e]=function(e){for(var n,i=[],r=x(e),a=r.length-1,s=0;s<=a;s++)n=s===a?this:this.clone(!0),x(r[s])[t](n),o.apply(i,n.get());return this.pushStack(i)}}));var qe=new RegExp("^("+te+")(?!px)[a-z%]+$","i"),He=function(e){var n=e.ownerDocument.defaultView;return n&&n.opener||(n=t),n.getComputedStyle(e)},$e=function(e,t,n){var i,r,a={};for(r in t)a[r]=e.style[r],e.style[r]=t[r];for(r in i=n.call(e),t)e.style[r]=a[r];return i},Be=new RegExp(ie.join("|"),"i");function Fe(e,t,n){var i,r,a,s,o=e.style;return(n=n||He(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||ae(e)||(s=x.style(e,t)),!f.pixelBoxStyles()&&qe.test(s)&&Be.test(t)&&(i=o.width,r=o.minWidth,a=o.maxWidth,o.minWidth=o.maxWidth=o.width=s,s=n.width,o.width=i,o.minWidth=r,o.maxWidth=a)),void 0!==s?s+"":s}function Re(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(d){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",d.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",re.appendChild(c).appendChild(d);var e=t.getComputedStyle(d);i="1%"!==e.top,l=12===n(e.marginLeft),d.style.right="60%",s=36===n(e.right),r=36===n(e.width),d.style.position="absolute",a=12===n(d.offsetWidth/3),re.removeChild(c),d=null}}function n(e){return Math.round(parseFloat(e))}var i,r,a,s,o,l,c=g.createElement("div"),d=g.createElement("div");d.style&&(d.style.backgroundClip="content-box",d.cloneNode(!0).style.backgroundClip="",f.clearCloneStyle="content-box"===d.style.backgroundClip,x.extend(f,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),s},pixelPosition:function(){return e(),i},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),a},reliableTrDimensions:function(){var e,n,i,r;return null==o&&(e=g.createElement("table"),n=g.createElement("tr"),i=g.createElement("div"),e.style.cssText="position:absolute;left:-11111px",n.style.height="1px",i.style.height="9px",re.appendChild(e).appendChild(n).appendChild(i),r=t.getComputedStyle(n),o=3<parseInt(r.height),re.removeChild(e)),o}}))}();var Ge=["Webkit","Moz","ms"],We=g.createElement("div").style,Ve={};function Xe(e){return x.cssProps[e]||Ve[e]||(e in We?e:Ve[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ge.length;n--;)if((e=Ge[n]+t)in We)return e}(e)||e)}var Ye=/^(none|table(?!-c[ea]).+)/,Ke=/^--/,Ue={position:"absolute",visibility:"hidden",display:"block"},Je={letterSpacing:"0",fontWeight:"400"};function Qe(e,t,n){var i=ne.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function Ze(e,t,n,i,r,a){var s="width"===t?1:0,o=0,l=0;if(n===(i?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=x.css(e,n+ie[s],!0,r)),i?("content"===n&&(l-=x.css(e,"padding"+ie[s],!0,r)),"margin"!==n&&(l-=x.css(e,"border"+ie[s]+"Width",!0,r))):(l+=x.css(e,"padding"+ie[s],!0,r),"padding"!==n?l+=x.css(e,"border"+ie[s]+"Width",!0,r):o+=x.css(e,"border"+ie[s]+"Width",!0,r));return!i&&0<=a&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-a-l-o-.5))||0),l}function et(e,t,n){var i=He(e),r=(!f.boxSizingReliable()||n)&&"border-box"===x.css(e,"boxSizing",!1,i),a=r,s=Fe(e,t,i),o="offset"+t[0].toUpperCase()+t.slice(1);if(qe.test(s)){if(!n)return s;s="auto"}return(!f.boxSizingReliable()&&r||!f.reliableTrDimensions()&&k(e,"tr")||"auto"===s||!parseFloat(s)&&"inline"===x.css(e,"display",!1,i))&&e.getClientRects().length&&(r="border-box"===x.css(e,"boxSizing",!1,i),(a=o in e)&&(s=e[o])),(s=parseFloat(s)||0)+Ze(e,t,n||(r?"border":"content"),a,i,s)+"px"}function tt(e,t,n,i,r){return new tt.prototype.init(e,t,n,i,r)}x.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Fe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,n,i,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var a,s,o,l=X(n),c=Ke.test(n),d=t.style;if(c||(n=Xe(l)),o=x.cssHooks[n]||x.cssHooks[l],void 0===i)return o&&"get"in o&&void 0!==(a=o.get(t,!1,r))?a:d[n];"string"===(s=e(i))&&(a=ne.exec(i))&&a[1]&&(i=le(t,n,a),s="number"),null!=i&&i==i&&("number"!==s||c||(i+=a&&a[3]||(x.cssNumber[l]?"":"px")),f.clearCloneStyle||""!==i||0!==n.indexOf("background")||(d[n]="inherit"),o&&"set"in o&&void 0===(i=o.set(t,i,r))||(c?d.setProperty(n,i):d[n]=i))}},css:function(e,t,n,i){var r,a,s,o=X(t);return Ke.test(t)||(t=Xe(o)),(s=x.cssHooks[t]||x.cssHooks[o])&&"get"in s&&(r=s.get(e,!0,n)),void 0===r&&(r=Fe(e,t,i)),"normal"===r&&t in Je&&(r=Je[t]),""===n||n?(a=parseFloat(r),!0===n||isFinite(a)?a||0:r):r}}),x.each(["height","width"],(function(e,t){x.cssHooks[t]={get:function(e,n,i){if(n)return!Ye.test(x.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?et(e,t,i):$e(e,Ue,(function(){return et(e,t,i)}))},set:function(e,n,i){var r,a=He(e),s=!f.scrollboxSize()&&"absolute"===a.position,o=(s||i)&&"border-box"===x.css(e,"boxSizing",!1,a),l=i?Ze(e,t,i,o,a):0;return o&&s&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(a[t])-Ze(e,t,"border",!1,a)-.5)),l&&(r=ne.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=x.css(e,t)),Qe(0,n,l)}}})),x.cssHooks.marginLeft=Re(f.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Fe(e,"marginLeft"))||e.getBoundingClientRect().left-$e(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),x.each({margin:"",padding:"",border:"Width"},(function(e,t){x.cssHooks[e+t]={expand:function(n){for(var i=0,r={},a="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+ie[i]+t]=a[i]||a[i-2]||a[0];return r}},"margin"!==e&&(x.cssHooks[e+t].set=Qe)})),x.fn.extend({css:function(e,t){return R(this,(function(e,t,n){var i,r,a={},s=0;if(Array.isArray(t)){for(i=He(e),r=t.length;s<r;s++)a[t[s]]=x.css(e,t[s],!1,i);return a}return void 0!==n?x.style(e,t,n):x.css(e,t)}),e,t,1<arguments.length)}}),((x.Tween=tt).prototype={constructor:tt,init:function(e,t,n,i,r,a){this.elem=e,this.prop=n,this.easing=r||x.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=a||(x.cssNumber[n]?"":"px")},cur:function(){var e=tt.propHooks[this.prop];return e&&e.get?e.get(this):tt.propHooks._default.get(this)},run:function(e){var t,n=tt.propHooks[this.prop];return this.options.duration?this.pos=t=x.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):tt.propHooks._default.set(this),this}}).init.prototype=tt.prototype,(tt.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=x.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){x.fx.step[e.prop]?x.fx.step[e.prop](e):1!==e.elem.nodeType||!x.cssHooks[e.prop]&&null==e.elem.style[Xe(e.prop)]?e.elem[e.prop]=e.now:x.style(e.elem,e.prop,e.now+e.unit)}}}).scrollTop=tt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},x.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},(x.fx=tt.prototype.init).step={};var nt,it,rt,at,st=/^(?:toggle|show|hide)$/,ot=/queueHooks$/;function lt(){it&&(!1===g.hidden&&t.requestAnimationFrame?t.requestAnimationFrame(lt):t.setTimeout(lt,x.fx.interval),x.fx.tick())}function ct(){return t.setTimeout((function(){nt=void 0})),nt=Date.now()}function dt(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=ie[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function ut(e,t,n){for(var i,r=(pt.tweeners[t]||[]).concat(pt.tweeners["*"]),a=0,s=r.length;a<s;a++)if(i=r[a].call(n,t,e))return i}function pt(e,t,n){var i,r,a=0,s=pt.prefilters.length,o=x.Deferred().always((function(){delete l.elem})),l=function(){if(r)return!1;for(var t=nt||ct(),n=Math.max(0,c.startTime+c.duration-t),i=1-(n/c.duration||0),a=0,s=c.tweens.length;a<s;a++)c.tweens[a].run(i);return o.notifyWith(e,[c,i,n]),i<1&&s?n:(s||o.notifyWith(e,[c,1,0]),o.resolveWith(e,[c]),!1)},c=o.promise({elem:e,props:x.extend({},t),opts:x.extend(!0,{specialEasing:{},easing:x.easing._default},n),originalProperties:t,originalOptions:n,startTime:nt||ct(),duration:n.duration,tweens:[],createTween:function(t,n){var i=x.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var n=0,i=t?c.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)c.tweens[n].run(1);return t?(o.notifyWith(e,[c,1,0]),o.resolveWith(e,[c,t])):o.rejectWith(e,[c,t]),this}}),d=c.props;for(function(e,t){var n,i,r,a,s;for(n in e)if(r=t[i=X(n)],a=e[n],Array.isArray(a)&&(r=a[1],a=e[n]=a[0]),n!==i&&(e[i]=a,delete e[n]),(s=x.cssHooks[i])&&"expand"in s)for(n in a=s.expand(a),delete e[i],a)n in e||(e[n]=a[n],t[n]=r);else t[i]=r}(d,c.opts.specialEasing);a<s;a++)if(i=pt.prefilters[a].call(c,e,d,c.opts))return m(i.stop)&&(x._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return x.map(d,ut,c),m(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),x.fx.timer(x.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}x.Animation=x.extend(pt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return le(n.elem,e,ne.exec(t),n),n}]},tweener:function(e,t){m(e)?(t=e,e=["*"]):e=e.match(j);for(var n,i=0,r=e.length;i<r;i++)n=e[i],pt.tweeners[n]=pt.tweeners[n]||[],pt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,a,s,o,l,c,d,u="width"in t||"height"in t,p=this,h={},f=e.style,m=e.nodeType&&oe(e),v=U.get(e,"fxshow");for(i in n.queue||(null==(s=x._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,o=s.empty.fire,s.empty.fire=function(){s.unqueued||o()}),s.unqueued++,p.always((function(){p.always((function(){s.unqueued--,x.queue(e,"fx").length||s.empty.fire()}))}))),t)if(r=t[i],st.test(r)){if(delete t[i],a=a||"toggle"===r,r===(m?"hide":"show")){if("show"!==r||!v||void 0===v[i])continue;m=!0}h[i]=v&&v[i]||x.style(e,i)}if((l=!x.isEmptyObject(t))||!x.isEmptyObject(h))for(i in u&&1===e.nodeType&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=v&&v.display)&&(c=U.get(e,"display")),"none"===(d=x.css(e,"display"))&&(c?d=c:(de([e],!0),c=e.style.display||c,d=x.css(e,"display"),de([e]))),("inline"===d||"inline-block"===d&&null!=c)&&"none"===x.css(e,"float")&&(l||(p.done((function(){f.display=c})),null==c&&(d=f.display,c="none"===d?"":d)),f.display="inline-block")),n.overflow&&(f.overflow="hidden",p.always((function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]}))),l=!1,h)l||(v?"hidden"in v&&(m=v.hidden):v=U.access(e,"fxshow",{display:c}),a&&(v.hidden=!m),m&&de([e],!0),p.done((function(){for(i in m||de([e]),U.remove(e,"fxshow"),h)x.style(e,i,h[i])}))),l=ut(m?v[i]:0,i,p),i in v||(v[i]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?pt.prefilters.unshift(e):pt.prefilters.push(e)}}),x.speed=function(t,n,i){var r=t&&"object"==e(t)?x.extend({},t):{complete:i||!i&&n||m(t)&&t,duration:t,easing:i&&n||n&&!m(n)&&n};return x.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in x.fx.speeds?r.duration=x.fx.speeds[r.duration]:r.duration=x.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){m(r.old)&&r.old.call(this),r.queue&&x.dequeue(this,r.queue)},r},x.fn.extend({fadeTo:function(e,t,n,i){return this.filter(oe).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=x.isEmptyObject(e),a=x.speed(t,n,i),s=function(){var t=pt(this,x.extend({},e),a);(r||U.get(this,"finish"))&&t.stop(!0)};return s.finish=s,r||!1===a.queue?this.each(s):this.queue(a.queue,s)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||"fx",[]),this.each((function(){var t=!0,r=null!=e&&e+"queueHooks",a=x.timers,s=U.get(this);if(r)s[r]&&s[r].stop&&i(s[r]);else for(r in s)s[r]&&s[r].stop&&ot.test(r)&&i(s[r]);for(r=a.length;r--;)a[r].elem!==this||null!=e&&a[r].queue!==e||(a[r].anim.stop(n),t=!1,a.splice(r,1));!t&&n||x.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=U.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],a=x.timers,s=i?i.length:0;for(n.finish=!0,x.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=a.length;t--;)a[t].elem===this&&a[t].queue===e&&(a[t].anim.stop(!0),a.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish}))}}),x.each(["toggle","show","hide"],(function(e,t){var n=x.fn[t];x.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(dt(t,!0),e,i,r)}})),x.each({slideDown:dt("show"),slideUp:dt("hide"),slideToggle:dt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){x.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}})),x.timers=[],x.fx.tick=function(){var e,t=0,n=x.timers;for(nt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||x.fx.stop(),nt=void 0},x.fx.timer=function(e){x.timers.push(e),x.fx.start()},x.fx.interval=13,x.fx.start=function(){it||(it=!0,lt())},x.fx.stop=function(){it=null},x.fx.speeds={slow:600,fast:200,_default:400},x.fn.delay=function(e,n){return e=x.fx&&x.fx.speeds[e]||e,n=n||"fx",this.queue(n,(function(n,i){var r=t.setTimeout(n,e);i.stop=function(){t.clearTimeout(r)}}))},rt=g.createElement("input"),at=g.createElement("select").appendChild(g.createElement("option")),rt.type="checkbox",f.checkOn=""!==rt.value,f.optSelected=at.selected,(rt=g.createElement("input")).value="t",rt.type="radio",f.radioValue="t"===rt.value;var ht,ft=x.expr.attrHandle;x.fn.extend({attr:function(e,t){return R(this,x.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each((function(){x.removeAttr(this,e)}))}}),x.extend({attr:function(e,t,n){var i,r,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return void 0===e.getAttribute?x.prop(e,t,n):(1===a&&x.isXMLDoc(e)||(r=x.attrHooks[t.toLowerCase()]||(x.expr.match.bool.test(t)?ht:void 0)),void 0!==n?null===n?void x.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=x.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!f.radioValue&&"radio"===t&&k(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(j);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),ht={set:function(e,t,n){return!1===t?x.removeAttr(e,n):e.setAttribute(n,n),n}},x.each(x.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=ft[t]||x.find.attr;ft[t]=function(e,t,i){var r,a,s=t.toLowerCase();return i||(a=ft[s],ft[s]=r,r=null!=n(e,t,i)?s:null,ft[s]=a),r}}));var mt=/^(?:input|select|textarea|button)$/i,vt=/^(?:a|area)$/i;function gt(e){return(e.match(j)||[]).join(" ")}function yt(e){return e.getAttribute&&e.getAttribute("class")||""}function bt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(j)||[]}x.fn.extend({prop:function(e,t){return R(this,x.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each((function(){delete this[x.propFix[e]||e]}))}}),x.extend({prop:function(e,t,n){var i,r,a=e.nodeType;if(3!==a&&8!==a&&2!==a)return 1===a&&x.isXMLDoc(e)||(t=x.propFix[t]||t,r=x.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=x.find.attr(e,"tabindex");return t?parseInt(t,10):mt.test(e.nodeName)||vt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),f.optSelected||(x.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),x.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){x.propFix[this.toLowerCase()]=this})),x.fn.extend({addClass:function(e){var t,n,i,r,a,s,o,l=0;if(m(e))return this.each((function(t){x(this).addClass(e.call(this,t,yt(this)))}));if((t=bt(e)).length)for(;n=this[l++];)if(r=yt(n),i=1===n.nodeType&&" "+gt(r)+" "){for(s=0;a=t[s++];)i.indexOf(" "+a+" ")<0&&(i+=a+" ");r!==(o=gt(i))&&n.setAttribute("class",o)}return this},removeClass:function(e){var t,n,i,r,a,s,o,l=0;if(m(e))return this.each((function(t){x(this).removeClass(e.call(this,t,yt(this)))}));if(!arguments.length)return this.attr("class","");if((t=bt(e)).length)for(;n=this[l++];)if(r=yt(n),i=1===n.nodeType&&" "+gt(r)+" "){for(s=0;a=t[s++];)for(;-1<i.indexOf(" "+a+" ");)i=i.replace(" "+a+" "," ");r!==(o=gt(i))&&n.setAttribute("class",o)}return this},toggleClass:function(t,n){var i=e(t),r="string"===i||Array.isArray(t);return"boolean"==typeof n&&r?n?this.addClass(t):this.removeClass(t):m(t)?this.each((function(e){x(this).toggleClass(t.call(this,e,yt(this),n),n)})):this.each((function(){var e,n,a,s;if(r)for(n=0,a=x(this),s=bt(t);e=s[n++];)a.hasClass(e)?a.removeClass(e):a.addClass(e);else void 0!==t&&"boolean"!==i||((e=yt(this))&&U.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",e||!1===t?"":U.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&-1<(" "+gt(yt(n))+" ").indexOf(t))return!0;return!1}});var wt=/\r/g;x.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=m(e),this.each((function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,x(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=x.map(r,(function(e){return null==e?"":e+""}))),(t=x.valHooks[this.type]||x.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))}))):r?(t=x.valHooks[r.type]||x.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(wt,""):null==n?"":n:void 0}}),x.extend({valHooks:{option:{get:function(e){var t=x.find.attr(e,"value");return null!=t?t:gt(x.text(e))}},select:{get:function(e){var t,n,i,r=e.options,a=e.selectedIndex,s="select-one"===e.type,o=s?null:[],l=s?a+1:r.length;for(i=a<0?l:s?a:0;i<l;i++)if(((n=r[i]).selected||i===a)&&!n.disabled&&(!n.parentNode.disabled||!k(n.parentNode,"optgroup"))){if(t=x(n).val(),s)return t;o.push(t)}return o},set:function(e,t){for(var n,i,r=e.options,a=x.makeArray(t),s=r.length;s--;)((i=r[s]).selected=-1<x.inArray(x.valHooks.option.get(i),a))&&(n=!0);return n||(e.selectedIndex=-1),a}}}}),x.each(["radio","checkbox"],(function(){x.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<x.inArray(x(e).val(),t)}},f.checkOn||(x.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),f.focusin="onfocusin"in t;var Et=/^(?:focusinfocus|focusoutblur)$/,xt=function(e){e.stopPropagation()};x.extend(x.event,{trigger:function(n,i,r,a){var s,o,l,c,d,p,h,f,y=[r||g],b=u.call(n,"type")?n.type:n,w=u.call(n,"namespace")?n.namespace.split("."):[];if(o=f=l=r=r||g,3!==r.nodeType&&8!==r.nodeType&&!Et.test(b+x.event.triggered)&&(-1<b.indexOf(".")&&(b=(w=b.split(".")).shift(),w.sort()),d=b.indexOf(":")<0&&"on"+b,(n=n[x.expando]?n:new x.Event(b,"object"==e(n)&&n)).isTrigger=a?2:3,n.namespace=w.join("."),n.rnamespace=n.namespace?new RegExp("(^|\\.)"+w.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,n.result=void 0,n.target||(n.target=r),i=null==i?[n]:x.makeArray(i,[n]),h=x.event.special[b]||{},a||!h.trigger||!1!==h.trigger.apply(r,i))){if(!a&&!h.noBubble&&!v(r)){for(c=h.delegateType||b,Et.test(c+b)||(o=o.parentNode);o;o=o.parentNode)y.push(o),l=o;l===(r.ownerDocument||g)&&y.push(l.defaultView||l.parentWindow||t)}for(s=0;(o=y[s++])&&!n.isPropagationStopped();)f=o,n.type=1<s?c:h.bindType||b,(p=(U.get(o,"events")||Object.create(null))[n.type]&&U.get(o,"handle"))&&p.apply(o,i),(p=d&&o[d])&&p.apply&&Y(o)&&(n.result=p.apply(o,i),!1===n.result&&n.preventDefault());return n.type=b,a||n.isDefaultPrevented()||h._default&&!1!==h._default.apply(y.pop(),i)||!Y(r)||d&&m(r[b])&&!v(r)&&((l=r[d])&&(r[d]=null),x.event.triggered=b,n.isPropagationStopped()&&f.addEventListener(b,xt),r[b](),n.isPropagationStopped()&&f.removeEventListener(b,xt),x.event.triggered=void 0,l&&(r[d]=l)),n.result}},simulate:function(e,t,n){var i=x.extend(new x.Event,n,{type:e,isSimulated:!0});x.event.trigger(i,null,t)}}),x.fn.extend({trigger:function(e,t){return this.each((function(){x.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return x.event.trigger(e,t,n,!0)}}),f.focusin||x.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){x.event.simulate(t,e.target,x.event.fix(e))};x.event.special[t]={setup:function(){var i=this.ownerDocument||this.document||this,r=U.access(i,t);r||i.addEventListener(e,n,!0),U.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this.document||this,r=U.access(i,t)-1;r?U.access(i,t,r):(i.removeEventListener(e,n,!0),U.remove(i,t))}}}));var St=t.location,Tt={guid:Date.now()},Ct=/\?/;x.parseXML=function(e){var n;if(!e||"string"!=typeof e)return null;try{n=(new t.DOMParser).parseFromString(e,"text/xml")}catch(e){n=void 0}return n&&!n.getElementsByTagName("parsererror").length||x.error("Invalid XML: "+e),n};var _t=/\[\]$/,Lt=/\r?\n/g,kt=/^(?:submit|button|image|reset|file)$/i,Mt=/^(?:input|select|textarea|keygen)/i;function At(t,n,i,r){var a;if(Array.isArray(n))x.each(n,(function(n,a){i||_t.test(t)?r(t,a):At(t+"["+("object"==e(a)&&null!=a?n:"")+"]",a,i,r)}));else if(i||"object"!==w(n))r(t,n);else for(a in n)At(t+"["+a+"]",n[a],i,r)}x.param=function(e,t){var n,i=[],r=function(e,t){var n=m(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!x.isPlainObject(e))x.each(e,(function(){r(this.name,this.value)}));else for(n in e)At(n,e[n],t,r);return i.join("&")},x.fn.extend({serialize:function(){return x.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=x.prop(this,"elements");return e?x.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!x(this).is(":disabled")&&Mt.test(this.nodeName)&&!kt.test(e)&&(this.checked||!he.test(e))})).map((function(e,t){var n=x(this).val();return null==n?null:Array.isArray(n)?x.map(n,(function(e){return{name:t.name,value:e.replace(Lt,"\r\n")}})):{name:t.name,value:n.replace(Lt,"\r\n")}})).get()}});var Ot=/%20/g,It=/#.*$/,Pt=/([?&])_=[^&]*/,Dt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Nt=/^(?:GET|HEAD)$/,jt=/^\/\//,zt={},qt={},Ht="*/".concat("*"),$t=g.createElement("a");function Bt(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,a=t.toLowerCase().match(j)||[];if(m(n))for(;i=a[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function Ft(e,t,n,i){var r={},a=e===qt;function s(o){var l;return r[o]=!0,x.each(e[o]||[],(function(e,o){var c=o(t,n,i);return"string"!=typeof c||a||r[c]?a?!(l=c):void 0:(t.dataTypes.unshift(c),s(c),!1)})),l}return s(t.dataTypes[0])||!r["*"]&&s("*")}function Rt(e,t){var n,i,r=x.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&x.extend(!0,e,i),e}$t.href=St.href,x.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:St.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(St.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ht,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":x.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Rt(Rt(e,x.ajaxSettings),t):Rt(x.ajaxSettings,e)},ajaxPrefilter:Bt(zt),ajaxTransport:Bt(qt),ajax:function(n,i){"object"==e(n)&&(i=n,n=void 0);var r,a,s,o,l,c,d,u,p,h,f=x.ajaxSetup({},i=i||{}),m=f.context||f,v=f.context&&(m.nodeType||m.jquery)?x(m):x.event,y=x.Deferred(),b=x.Callbacks("once memory"),w=f.statusCode||{},E={},S={},T="canceled",C={readyState:0,getResponseHeader:function(e){var t;if(d){if(!o)for(o={};t=Dt.exec(s);)o[t[1].toLowerCase()+" "]=(o[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=o[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return d?s:null},setRequestHeader:function(e,t){return null==d&&(e=S[e.toLowerCase()]=S[e.toLowerCase()]||e,E[e]=t),this},overrideMimeType:function(e){return null==d&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(d)C.always(e[C.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||T;return r&&r.abort(t),_(0,t),this}};if(y.promise(C),f.url=((n||f.url||St.href)+"").replace(jt,St.protocol+"//"),f.type=i.method||i.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(j)||[""],null==f.crossDomain){c=g.createElement("a");try{c.href=f.url,c.href=c.href,f.crossDomain=$t.protocol+"//"+$t.host!=c.protocol+"//"+c.host}catch(n){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=x.param(f.data,f.traditional)),Ft(zt,f,i,C),d)return C;for(p in(u=x.event&&f.global)&&0==x.active++&&x.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Nt.test(f.type),a=f.url.replace(It,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace(Ot,"+")):(h=f.url.slice(a.length),f.data&&(f.processData||"string"==typeof f.data)&&(a+=(Ct.test(a)?"&":"?")+f.data,delete f.data),!1===f.cache&&(a=a.replace(Pt,"$1"),h=(Ct.test(a)?"&":"?")+"_="+Tt.guid+++h),f.url=a+h),f.ifModified&&(x.lastModified[a]&&C.setRequestHeader("If-Modified-Since",x.lastModified[a]),x.etag[a]&&C.setRequestHeader("If-None-Match",x.etag[a])),(f.data&&f.hasContent&&!1!==f.contentType||i.contentType)&&C.setRequestHeader("Content-Type",f.contentType),C.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Ht+"; q=0.01":""):f.accepts["*"]),f.headers)C.setRequestHeader(p,f.headers[p]);if(f.beforeSend&&(!1===f.beforeSend.call(m,C,f)||d))return C.abort();if(T="abort",b.add(f.complete),C.done(f.success),C.fail(f.error),r=Ft(qt,f,i,C)){if(C.readyState=1,u&&v.trigger("ajaxSend",[C,f]),d)return C;f.async&&0<f.timeout&&(l=t.setTimeout((function(){C.abort("timeout")}),f.timeout));try{d=!1,r.send(E,_)}catch(n){if(d)throw n;_(-1,n)}}else _(-1,"No Transport");function _(e,n,i,o){var c,p,h,g,E,S=n;d||(d=!0,l&&t.clearTimeout(l),r=void 0,s=o||"",C.readyState=0<e?4:0,c=200<=e&&e<300||304===e,i&&(g=function(e,t,n){for(var i,r,a,s,o=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in o)if(o[r]&&o[r].test(i)){l.unshift(r);break}if(l[0]in n)a=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){a=r;break}s||(s=r)}a=a||s}if(a)return a!==l[0]&&l.unshift(a),n[a]}(f,C,i)),!c&&-1<x.inArray("script",f.dataTypes)&&(f.converters["text script"]=function(){}),g=function(e,t,n,i){var r,a,s,o,l,c={},d=e.dataTypes.slice();if(d[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(a=d.shift();a;)if(e.responseFields[a]&&(n[e.responseFields[a]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=a,a=d.shift())if("*"===a)a=l;else if("*"!==l&&l!==a){if(!(s=c[l+" "+a]||c["* "+a]))for(r in c)if((o=r.split(" "))[1]===a&&(s=c[l+" "+o[0]]||c["* "+o[0]])){!0===s?s=c[r]:!0!==c[r]&&(a=o[0],d.unshift(o[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+a}}}return{state:"success",data:t}}(f,g,C,c),c?(f.ifModified&&((E=C.getResponseHeader("Last-Modified"))&&(x.lastModified[a]=E),(E=C.getResponseHeader("etag"))&&(x.etag[a]=E)),204===e||"HEAD"===f.type?S="nocontent":304===e?S="notmodified":(S=g.state,p=g.data,c=!(h=g.error))):(h=S,!e&&S||(S="error",e<0&&(e=0))),C.status=e,C.statusText=(n||S)+"",c?y.resolveWith(m,[p,S,C]):y.rejectWith(m,[C,S,h]),C.statusCode(w),w=void 0,u&&v.trigger(c?"ajaxSuccess":"ajaxError",[C,f,c?p:h]),b.fireWith(m,[C,S]),u&&(v.trigger("ajaxComplete",[C,f]),--x.active||x.event.trigger("ajaxStop")))}return C},getJSON:function(e,t,n){return x.get(e,t,n,"json")},getScript:function(e,t){return x.get(e,void 0,t,"script")}}),x.each(["get","post"],(function(e,t){x[t]=function(e,n,i,r){return m(n)&&(r=r||i,i=n,n=void 0),x.ajax(x.extend({url:e,type:t,dataType:r,data:n,success:i},x.isPlainObject(e)&&e))}})),x.ajaxPrefilter((function(e){var t;for(t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")})),x._evalUrl=function(e,t,n){return x.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){x.globalEval(e,t,n)}})},x.fn.extend({wrapAll:function(e){var t;return this[0]&&(m(e)&&(e=e.call(this[0])),t=x(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return m(e)?this.each((function(t){x(this).wrapInner(e.call(this,t))})):this.each((function(){var t=x(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=m(e);return this.each((function(n){x(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){x(this).replaceWith(this.childNodes)})),this}}),x.expr.pseudos.hidden=function(e){return!x.expr.pseudos.visible(e)},x.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},x.ajaxSettings.xhr=function(){try{return new t.XMLHttpRequest}catch(e){}};var Gt={0:200,1223:204},Wt=x.ajaxSettings.xhr();f.cors=!!Wt&&"withCredentials"in Wt,f.ajax=Wt=!!Wt,x.ajaxTransport((function(e){var n,i;if(f.cors||Wt&&!e.crossDomain)return{send:function(r,a){var s,o=e.xhr();if(o.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)o[s]=e.xhrFields[s];for(s in e.mimeType&&o.overrideMimeType&&o.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)o.setRequestHeader(s,r[s]);n=function(e){return function(){n&&(n=i=o.onload=o.onerror=o.onabort=o.ontimeout=o.onreadystatechange=null,"abort"===e?o.abort():"error"===e?"number"!=typeof o.status?a(0,"error"):a(o.status,o.statusText):a(Gt[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=n(),i=o.onerror=o.ontimeout=n("error"),void 0!==o.onabort?o.onabort=i:o.onreadystatechange=function(){4===o.readyState&&t.setTimeout((function(){n&&i()}))},n=n("abort");try{o.send(e.hasContent&&e.data||null)}catch(r){if(n)throw r}},abort:function(){n&&n()}}})),x.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),x.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return x.globalEval(e),e}}}),x.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),x.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(i,r){t=x("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),g.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Vt,Xt=[],Yt=/(=)\?(?=&|$)|\?\?/;x.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Xt.pop()||x.expando+"_"+Tt.guid++;return this[e]=!0,e}}),x.ajaxPrefilter("json jsonp",(function(e,n,i){var r,a,s,o=!1!==e.jsonp&&(Yt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Yt.test(e.data)&&"data");if(o||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=m(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,o?e[o]=e[o].replace(Yt,"$1"+r):!1!==e.jsonp&&(e.url+=(Ct.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return s||x.error(r+" was not called"),s[0]},e.dataTypes[0]="json",a=t[r],t[r]=function(){s=arguments},i.always((function(){void 0===a?x(t).removeProp(r):t[r]=a,e[r]&&(e.jsonpCallback=n.jsonpCallback,Xt.push(r)),s&&m(a)&&a(s[0]),s=a=void 0})),"script"})),f.createHTMLDocument=((Vt=g.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Vt.childNodes.length),x.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(f.createHTMLDocument?((i=(t=g.implementation.createHTMLDocument("")).createElement("base")).href=g.location.href,t.head.appendChild(i)):t=g),a=!n&&[],(r=M.exec(e))?[t.createElement(r[1])]:(r=we([e],t,a),a&&a.length&&x(a).remove(),x.merge([],r.childNodes)));var i,r,a},x.fn.load=function(t,n,i){var r,a,s,o=this,l=t.indexOf(" ");return-1<l&&(r=gt(t.slice(l)),t=t.slice(0,l)),m(n)?(i=n,n=void 0):n&&"object"==e(n)&&(a="POST"),0<o.length&&x.ajax({url:t,type:a||"GET",dataType:"html",data:n}).done((function(e){s=arguments,o.html(r?x("<div>").append(x.parseHTML(e)).find(r):e)})).always(i&&function(e,t){o.each((function(){i.apply(this,s||[e.responseText,t,e])}))}),this},x.expr.pseudos.animated=function(e){return x.grep(x.timers,(function(t){return e===t.elem})).length},x.offset={setOffset:function(e,t,n){var i,r,a,s,o,l,c=x.css(e,"position"),d=x(e),u={};"static"===c&&(e.style.position="relative"),o=d.offset(),a=x.css(e,"top"),l=x.css(e,"left"),("absolute"===c||"fixed"===c)&&-1<(a+l).indexOf("auto")?(s=(i=d.position()).top,r=i.left):(s=parseFloat(a)||0,r=parseFloat(l)||0),m(t)&&(t=t.call(e,n,x.extend({},o))),null!=t.top&&(u.top=t.top-o.top+s),null!=t.left&&(u.left=t.left-o.left+r),"using"in t?t.using.call(e,u):("number"==typeof u.top&&(u.top+="px"),"number"==typeof u.left&&(u.left+="px"),d.css(u))}},x.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){x.offset.setOffset(this,e,t)}));var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],r={top:0,left:0};if("fixed"===x.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===x.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((r=x(e).offset()).top+=x.css(e,"borderTopWidth",!0),r.left+=x.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-x.css(i,"marginTop",!0),left:t.left-r.left-x.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===x.css(e,"position");)e=e.offsetParent;return e||re}))}}),x.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;x.fn[e]=function(i){return R(this,(function(e,i,r){var a;if(v(e)?a=e:9===e.nodeType&&(a=e.defaultView),void 0===r)return a?a[t]:e[i];a?a.scrollTo(n?a.pageXOffset:r,n?r:a.pageYOffset):e[i]=r}),e,i,arguments.length)}})),x.each(["top","left"],(function(e,t){x.cssHooks[t]=Re(f.pixelPosition,(function(e,n){if(n)return n=Fe(e,t),qe.test(n)?x(e).position()[t]+"px":n}))})),x.each({Height:"height",Width:"width"},(function(e,t){x.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,i){x.fn[i]=function(r,a){var s=arguments.length&&(n||"boolean"!=typeof r),o=n||(!0===r||!0===a?"margin":"border");return R(this,(function(t,n,r){var a;return v(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(a=t.documentElement,Math.max(t.body["scroll"+e],a["scroll"+e],t.body["offset"+e],a["offset"+e],a["client"+e])):void 0===r?x.css(t,n,o):x.style(t,n,r,o)}),t,s?r:void 0,s)}}))})),x.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){x.fn[t]=function(e){return this.on(t,e)}})),x.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),x.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){x.fn[t]=function(e,n){return 0<arguments.length?this.on(t,null,e,n):this.trigger(t)}}));var Kt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;x.proxy=function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),m(e))return i=a.call(arguments,2),(r=function(){return e.apply(t||this,i.concat(a.call(arguments)))}).guid=e.guid=e.guid||x.guid++,r},x.holdReady=function(e){e?x.readyWait++:x.ready(!0)},x.isArray=Array.isArray,x.parseJSON=JSON.parse,x.nodeName=k,x.isFunction=m,x.isWindow=v,x.camelCase=X,x.type=w,x.now=Date.now,x.isNumeric=function(e){var t=x.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},x.trim=function(e){return null==e?"":(e+"").replace(Kt,"")},"function"==typeof define&&define.amd&&define("jquery",[],(function(){return x}));var Ut=t.jQuery,Jt=t.$;return x.noConflict=function(e){return t.$===x&&(t.$=Jt),e&&t.jQuery===x&&(t.jQuery=Ut),x},void 0===n&&(t.jQuery=t.$=x),x})),function(t,n){"object"==("undefined"==typeof exports?"undefined":e(exports))&&"undefined"!=typeof module?module.exports=n():"function"==typeof define&&define.amd?define(n):(t="undefined"!=typeof globalThis?globalThis:t||self).Swiper=n()}(void 0,(function(){function t(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function n(){return(n=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e}).apply(this,arguments)}function i(t){return null!==t&&"object"==e(t)&&"constructor"in t&&t.constructor===Object}function r(e,t){void 0===e&&(e={}),void 0===t&&(t={}),Object.keys(t).forEach((function(n){void 0===e[n]?e[n]=t[n]:i(t[n])&&i(e[n])&&Object.keys(t[n]).length>0&&r(e[n],t[n])}))}var a={body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},createElementNS:function(){return{}},importNode:function(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function s(){var e="undefined"!=typeof document?document:{};return r(e,a),e}var o={document:a,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState:function(){},pushState:function(){},go:function(){},back:function(){}},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){},matchMedia:function(){return{}},requestAnimationFrame:function(e){return"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0)},cancelAnimationFrame:function(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function l(){var e="undefined"!=typeof window?window:{};return r(e,o),e}function c(e){return(c=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function d(e,t){return(d=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(e){return!1}}function p(e,t,n){return(p=u()?Reflect.construct:function(e,t,n){var i=[null];i.push.apply(i,t);var r=new(Function.bind.apply(e,i));return n&&d(r,n.prototype),r}).apply(null,arguments)}function h(e){var t="function"==typeof Map?new Map:void 0;return(h=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,i)}function i(){return p(e,arguments,c(this).constructor)}return i.prototype=Object.create(e.prototype,{constructor:{value:i,enumerable:!1,writable:!0,configurable:!0}}),d(i,e)})(e)}var f=function(e){var t,n;function i(t){var n,i,r;return i=function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(n=e.call.apply(e,[this].concat(t))||this),r=i.__proto__,Object.defineProperty(i,"__proto__",{get:function(){return r},set:function(e){r.__proto__=e}}),n}return n=e,(t=i).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,i}(h(Array));function m(e){void 0===e&&(e=[]);var t=[];return e.forEach((function(e){Array.isArray(e)?t.push.apply(t,m(e)):t.push(e)})),t}function v(e,t){return Array.prototype.filter.call(e,t)}function g(e,t){var n=l(),i=s(),r=[];if(!t&&e instanceof f)return e;if(!e)return new f(r);if("string"==typeof e){var a=e.trim();if(a.indexOf("<")>=0&&a.indexOf(">")>=0){var o="div";0===a.indexOf("<li")&&(o="ul"),0===a.indexOf("<tr")&&(o="tbody"),0!==a.indexOf("<td")&&0!==a.indexOf("<th")||(o="tr"),0===a.indexOf("<tbody")&&(o="table"),0===a.indexOf("<option")&&(o="select");var c=i.createElement(o);c.innerHTML=a;for(var d=0;d<c.childNodes.length;d+=1)r.push(c.childNodes[d])}else r=function(e,t){if("string"!=typeof e)return[e];for(var n=[],i=t.querySelectorAll(e),r=0;r<i.length;r+=1)n.push(i[r]);return n}(e.trim(),t||i)}else if(e.nodeType||e===n||e===i)r.push(e);else if(Array.isArray(e)){if(e instanceof f)return e;r=e}return new f(function(e){for(var t=[],n=0;n<e.length;n+=1)-1===t.indexOf(e[n])&&t.push(e[n]);return t}(r))}g.fn=f.prototype;var y,b,w,E={addClass:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var i=m(t.map((function(e){return e.split(" ")})));return this.forEach((function(e){var t;(t=e.classList).add.apply(t,i)})),this},removeClass:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var i=m(t.map((function(e){return e.split(" ")})));return this.forEach((function(e){var t;(t=e.classList).remove.apply(t,i)})),this},hasClass:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var i=m(t.map((function(e){return e.split(" ")})));return v(this,(function(e){return i.filter((function(t){return e.classList.contains(t)})).length>0})).length>0},toggleClass:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var i=m(t.map((function(e){return e.split(" ")})));this.forEach((function(e){i.forEach((function(t){e.classList.toggle(t)}))}))},attr:function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(var n=0;n<this.length;n+=1)if(2===arguments.length)this[n].setAttribute(e,t);else for(var i in e)this[n][i]=e[i],this[n].setAttribute(i,e[i]);return this},removeAttr:function(e){for(var t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},transform:function(e){for(var t=0;t<this.length;t+=1)this[t].style.transform=e;return this},transition:function(e){for(var t=0;t<this.length;t+=1)this[t].style.transitionDuration="string"!=typeof e?e+"ms":e;return this},on:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var i=t[0],r=t[1],a=t[2],s=t[3];function o(e){var t=e.target;if(t){var n=e.target.dom7EventData||[];if(n.indexOf(e)<0&&n.unshift(e),g(t).is(r))a.apply(t,n);else for(var i=g(t).parents(),s=0;s<i.length;s+=1)g(i[s]).is(r)&&a.apply(i[s],n)}}function l(e){var t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),a.apply(this,t)}"function"==typeof t[1]&&(i=t[0],a=t[1],s=t[2],r=void 0),s||(s=!1);for(var c,d=i.split(" "),u=0;u<this.length;u+=1){var p=this[u];if(r)for(c=0;c<d.length;c+=1){var h=d[c];p.dom7LiveListeners||(p.dom7LiveListeners={}),p.dom7LiveListeners[h]||(p.dom7LiveListeners[h]=[]),p.dom7LiveListeners[h].push({listener:a,proxyListener:o}),p.addEventListener(h,o,s)}else for(c=0;c<d.length;c+=1){var f=d[c];p.dom7Listeners||(p.dom7Listeners={}),p.dom7Listeners[f]||(p.dom7Listeners[f]=[]),p.dom7Listeners[f].push({listener:a,proxyListener:l}),p.addEventListener(f,l,s)}}return this},off:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var i=t[0],r=t[1],a=t[2],s=t[3];"function"==typeof t[1]&&(i=t[0],a=t[1],s=t[2],r=void 0),s||(s=!1);for(var o=i.split(" "),l=0;l<o.length;l+=1)for(var c=o[l],d=0;d<this.length;d+=1){var u=this[d],p=void 0;if(!r&&u.dom7Listeners?p=u.dom7Listeners[c]:r&&u.dom7LiveListeners&&(p=u.dom7LiveListeners[c]),p&&p.length)for(var h=p.length-1;h>=0;h-=1){var f=p[h];a&&f.listener===a||a&&f.listener&&f.listener.dom7proxy&&f.listener.dom7proxy===a?(u.removeEventListener(c,f.proxyListener,s),p.splice(h,1)):a||(u.removeEventListener(c,f.proxyListener,s),p.splice(h,1))}}return this},trigger:function(){for(var e=l(),t=arguments.length,n=new Array(t),i=0;i<t;i++)n[i]=arguments[i];for(var r=n[0].split(" "),a=n[1],s=0;s<r.length;s+=1)for(var o=r[s],c=0;c<this.length;c+=1){var d=this[c];if(e.CustomEvent){var u=new e.CustomEvent(o,{detail:a,bubbles:!0,cancelable:!0});d.dom7EventData=n.filter((function(e,t){return t>0})),d.dispatchEvent(u),d.dom7EventData=[],delete d.dom7EventData}}return this},transitionEnd:function(e){var t=this;return e&&t.on("transitionend",(function n(i){i.target===this&&(e.call(this,i),t.off("transitionend",n))})),this},outerWidth:function(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue("margin-right"))+parseFloat(t.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(this.length>0){if(e){var t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue("margin-top"))+parseFloat(t.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},styles:function(){var e=l();return this[0]?e.getComputedStyle(this[0],null):{}},offset:function(){if(this.length>0){var e=l(),t=s(),n=this[0],i=n.getBoundingClientRect(),r=t.body,a=n.clientTop||r.clientTop||0,o=n.clientLeft||r.clientLeft||0,c=n===e?e.scrollY:n.scrollTop,d=n===e?e.scrollX:n.scrollLeft;return{top:i.top+c-a,left:i.left+d-o}}return null},css:function(e,t){var n,i=l();if(1===arguments.length){if("string"!=typeof e){for(n=0;n<this.length;n+=1)for(var r in e)this[n].style[r]=e[r];return this}if(this[0])return i.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(n=0;n<this.length;n+=1)this[n].style[e]=t;return this}return this},each:function(e){return e?(this.forEach((function(t,n){e.apply(t,[t,n])})),this):this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:null;for(var t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(var t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){var t,n,i=l(),r=s(),a=this[0];if(!a||void 0===e)return!1;if("string"==typeof e){if(a.matches)return a.matches(e);if(a.webkitMatchesSelector)return a.webkitMatchesSelector(e);if(a.msMatchesSelector)return a.msMatchesSelector(e);for(t=g(e),n=0;n<t.length;n+=1)if(t[n]===a)return!0;return!1}if(e===r)return a===r;if(e===i)return a===i;if(e.nodeType||e instanceof f){for(t=e.nodeType?[e]:e,n=0;n<t.length;n+=1)if(t[n]===a)return!0;return!1}return!1},index:function(){var e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;var t=this.length;if(e>t-1)return g([]);if(e<0){var n=t+e;return g(n<0?[]:[this[n]])}return g([this[e]])},append:function(){for(var e,t=s(),n=0;n<arguments.length;n+=1){e=n<0||arguments.length<=n?void 0:arguments[n];for(var i=0;i<this.length;i+=1)if("string"==typeof e){var r=t.createElement("div");for(r.innerHTML=e;r.firstChild;)this[i].appendChild(r.firstChild)}else if(e instanceof f)for(var a=0;a<e.length;a+=1)this[i].appendChild(e[a]);else this[i].appendChild(e)}return this},prepend:function(e){var t,n,i=s();for(t=0;t<this.length;t+=1)if("string"==typeof e){var r=i.createElement("div");for(r.innerHTML=e,n=r.childNodes.length-1;n>=0;n-=1)this[t].insertBefore(r.childNodes[n],this[t].childNodes[0])}else if(e instanceof f)for(n=0;n<e.length;n+=1)this[t].insertBefore(e[n],this[t].childNodes[0]);else this[t].insertBefore(e,this[t].childNodes[0]);return this},next:function(e){return this.length>0?e?this[0].nextElementSibling&&g(this[0].nextElementSibling).is(e)?g([this[0].nextElementSibling]):g([]):this[0].nextElementSibling?g([this[0].nextElementSibling]):g([]):g([])},nextAll:function(e){var t=[],n=this[0];if(!n)return g([]);for(;n.nextElementSibling;){var i=n.nextElementSibling;e?g(i).is(e)&&t.push(i):t.push(i),n=i}return g(t)},prev:function(e){if(this.length>0){var t=this[0];return e?t.previousElementSibling&&g(t.previousElementSibling).is(e)?g([t.previousElementSibling]):g([]):t.previousElementSibling?g([t.previousElementSibling]):g([])}return g([])},prevAll:function(e){var t=[],n=this[0];if(!n)return g([]);for(;n.previousElementSibling;){var i=n.previousElementSibling;e?g(i).is(e)&&t.push(i):t.push(i),n=i}return g(t)},parent:function(e){for(var t=[],n=0;n<this.length;n+=1)null!==this[n].parentNode&&(e?g(this[n].parentNode).is(e)&&t.push(this[n].parentNode):t.push(this[n].parentNode));return g(t)},parents:function(e){for(var t=[],n=0;n<this.length;n+=1)for(var i=this[n].parentNode;i;)e?g(i).is(e)&&t.push(i):t.push(i),i=i.parentNode;return g(t)},closest:function(e){var t=this;return void 0===e?g([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){for(var t=[],n=0;n<this.length;n+=1)for(var i=this[n].querySelectorAll(e),r=0;r<i.length;r+=1)t.push(i[r]);return g(t)},children:function(e){for(var t=[],n=0;n<this.length;n+=1)for(var i=this[n].children,r=0;r<i.length;r+=1)e&&!g(i[r]).is(e)||t.push(i[r]);return g(t)},filter:function(e){return g(v(this,e))},remove:function(){for(var e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this}};function x(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function S(){return Date.now()}function T(e,t){void 0===t&&(t="x");var n,i,r,a=l(),s=a.getComputedStyle(e,null);return a.WebKitCSSMatrix?((i=s.transform||s.webkitTransform).split(",").length>6&&(i=i.split(", ").map((function(e){return e.replace(",",".")})).join(", ")),r=new a.WebKitCSSMatrix("none"===i?"":i)):n=(r=s.MozTransform||s.OTransform||s.MsTransform||s.msTransform||s.transform||s.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(i=a.WebKitCSSMatrix?r.m41:16===n.length?parseFloat(n[12]):parseFloat(n[4])),"y"===t&&(i=a.WebKitCSSMatrix?r.m42:16===n.length?parseFloat(n[13]):parseFloat(n[5])),i||0}function C(t){return"object"==e(t)&&null!==t&&t.constructor&&t.constructor===Object}function _(){for(var e=Object(arguments.length<=0?void 0:arguments[0]),t=1;t<arguments.length;t+=1){var n=t<0||arguments.length<=t?void 0:arguments[t];if(null!=n)for(var i=Object.keys(Object(n)),r=0,a=i.length;r<a;r+=1){var s=i[r],o=Object.getOwnPropertyDescriptor(n,s);void 0!==o&&o.enumerable&&(C(e[s])&&C(n[s])?_(e[s],n[s]):!C(e[s])&&C(n[s])?(e[s]={},_(e[s],n[s])):e[s]=n[s])}}return e}function L(e,t){Object.keys(t).forEach((function(n){C(t[n])&&Object.keys(t[n]).forEach((function(i){"function"==typeof t[n][i]&&(t[n][i]=t[n][i].bind(e))})),e[n]=t[n]}))}function k(){return y||(y=function(){var e=l(),t=s();return{touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch),pointerEvents:!!e.PointerEvent&&"maxTouchPoints"in e.navigator&&e.navigator.maxTouchPoints>=0,observer:"MutationObserver"in e||"WebkitMutationObserver"in e,passiveListener:function(){var t=!1;try{var n=Object.defineProperty({},"passive",{get:function(){t=!0}});e.addEventListener("testPassiveListener",null,n)}catch(e){}return t}(),gestures:"ongesturestart"in e}}()),y}function M(e){return void 0===e&&(e={}),b||(b=function(e){var t=(void 0===e?{}:e).userAgent,n=k(),i=l(),r=i.navigator.platform,a=t||i.navigator.userAgent,s={ios:!1,android:!1},o=i.screen.width,c=i.screen.height,d=a.match(/(Android);?[\s\/]+([\d.]+)?/),u=a.match(/(iPad).*OS\s([\d_]+)/),p=a.match(/(iPod)(.*OS\s([\d_]+))?/),h=!u&&a.match(/(iPhone\sOS|iOS)\s([\d_]+)/),f="Win32"===r,m="MacIntel"===r;return!u&&m&&n.touch&&["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(o+"x"+c)>=0&&((u=a.match(/(Version)\/([\d.]+)/))||(u=[0,1,"13_0_0"]),m=!1),d&&!f&&(s.os="android",s.android=!0),(u||h||p)&&(s.os="ios",s.ios=!0),s}(e)),b}function A(){return w||(w=function(){var e,t=l();return{isEdge:!!t.navigator.userAgent.match(/Edge/g),isSafari:(e=t.navigator.userAgent.toLowerCase(),e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0),isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent)}}()),w}Object.keys(E).forEach((function(e){g.fn[e]=E[e]}));var O={name:"resize",create:function(){var e=this;_(e,{resize:{resizeHandler:function(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler:function(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init:function(e){var t=l();t.addEventListener("resize",e.resize.resizeHandler),t.addEventListener("orientationchange",e.resize.orientationChangeHandler)},destroy:function(e){var t=l();t.removeEventListener("resize",e.resize.resizeHandler),t.removeEventListener("orientationchange",e.resize.orientationChangeHandler)}}},I={attach:function(e,t){void 0===t&&(t={});var n=l(),i=this,r=new(n.MutationObserver||n.WebkitMutationObserver)((function(e){if(1!==e.length){var t=function(){i.emit("observerUpdate",e[0])};n.requestAnimationFrame?n.requestAnimationFrame(t):n.setTimeout(t,0)}else i.emit("observerUpdate",e[0])}));r.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),i.observer.observers.push(r)},init:function(){var e=this;if(e.support.observer&&e.params.observer){if(e.params.observeParents)for(var t=e.$el.parents(),n=0;n<t.length;n+=1)e.observer.attach(t[n]);e.observer.attach(e.$el[0],{childList:e.params.observeSlideChildren}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy:function(){this.observer.observers.forEach((function(e){e.disconnect()})),this.observer.observers=[]}},P={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create:function(){L(this,{observer:n({},I,{observers:[]})})},on:{init:function(e){e.observer.init()},destroy:function(e){e.observer.destroy()}}};function D(e){var t=this,n=s(),i=l(),r=t.touchEventsData,a=t.params,o=t.touches;if(!t.animating||!a.preventInteractionOnTransition){var c=e;c.originalEvent&&(c=c.originalEvent);var d=g(c.target);if(("wrapper"!==a.touchEventsTarget||d.closest(t.wrapperEl).length)&&(r.isTouchEvent="touchstart"===c.type,(r.isTouchEvent||!("which"in c)||3!==c.which)&&!(!r.isTouchEvent&&"button"in c&&c.button>0||r.isTouched&&r.isMoved)))if(!!a.noSwipingClass&&""!==a.noSwipingClass&&c.target&&c.target.shadowRoot&&e.path&&e.path[0]&&(d=g(e.path[0])),a.noSwiping&&d.closest(a.noSwipingSelector?a.noSwipingSelector:"."+a.noSwipingClass)[0])t.allowClick=!0;else if(!a.swipeHandler||d.closest(a.swipeHandler)[0]){o.currentX="touchstart"===c.type?c.targetTouches[0].pageX:c.pageX,o.currentY="touchstart"===c.type?c.targetTouches[0].pageY:c.pageY;var u=o.currentX,p=o.currentY,h=a.edgeSwipeDetection||a.iOSEdgeSwipeDetection,f=a.edgeSwipeThreshold||a.iOSEdgeSwipeThreshold;if(!h||!(u<=f||u>=i.innerWidth-f)){if(_(r,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),o.startX=u,o.startY=p,r.touchStartTime=S(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,a.threshold>0&&(r.allowThresholdMove=!1),"touchstart"!==c.type){var m=!0;d.is(r.formElements)&&(m=!1),n.activeElement&&g(n.activeElement).is(r.formElements)&&n.activeElement!==d[0]&&n.activeElement.blur();var v=m&&t.allowTouchMove&&a.touchStartPreventDefault;!a.touchStartForcePreventDefault&&!v||d[0].isContentEditable||c.preventDefault()}t.emit("touchStart",c)}}}}function N(e){var t=s(),n=this,i=n.touchEventsData,r=n.params,a=n.touches,o=n.rtlTranslate,l=e;if(l.originalEvent&&(l=l.originalEvent),i.isTouched){if(!i.isTouchEvent||"touchmove"===l.type){var c="touchmove"===l.type&&l.targetTouches&&(l.targetTouches[0]||l.changedTouches[0]),d="touchmove"===l.type?c.pageX:l.pageX,u="touchmove"===l.type?c.pageY:l.pageY;if(l.preventedByNestedSwiper)return a.startX=d,void(a.startY=u);if(!n.allowTouchMove)return n.allowClick=!1,void(i.isTouched&&(_(a,{startX:d,startY:u,currentX:d,currentY:u}),i.touchStartTime=S()));if(i.isTouchEvent&&r.touchReleaseOnEdges&&!r.loop)if(n.isVertical()){if(u<a.startY&&n.translate<=n.maxTranslate()||u>a.startY&&n.translate>=n.minTranslate())return i.isTouched=!1,void(i.isMoved=!1)}else if(d<a.startX&&n.translate<=n.maxTranslate()||d>a.startX&&n.translate>=n.minTranslate())return;if(i.isTouchEvent&&t.activeElement&&l.target===t.activeElement&&g(l.target).is(i.formElements))return i.isMoved=!0,void(n.allowClick=!1);if(i.allowTouchCallbacks&&n.emit("touchMove",l),!(l.targetTouches&&l.targetTouches.length>1)){a.currentX=d,a.currentY=u;var p,h=a.currentX-a.startX,f=a.currentY-a.startY;if(!(n.params.threshold&&Math.sqrt(Math.pow(h,2)+Math.pow(f,2))<n.params.threshold))if(void 0===i.isScrolling&&(n.isHorizontal()&&a.currentY===a.startY||n.isVertical()&&a.currentX===a.startX?i.isScrolling=!1:h*h+f*f>=25&&(p=180*Math.atan2(Math.abs(f),Math.abs(h))/Math.PI,i.isScrolling=n.isHorizontal()?p>r.touchAngle:90-p>r.touchAngle)),i.isScrolling&&n.emit("touchMoveOpposite",l),void 0===i.startMoving&&(a.currentX===a.startX&&a.currentY===a.startY||(i.startMoving=!0)),i.isScrolling)i.isTouched=!1;else if(i.startMoving){n.allowClick=!1,!r.cssMode&&l.cancelable&&l.preventDefault(),r.touchMoveStopPropagation&&!r.nested&&l.stopPropagation(),i.isMoved||(r.loop&&n.loopFix(),i.startTranslate=n.getTranslate(),n.setTransition(0),n.animating&&n.$wrapperEl.trigger("webkitTransitionEnd transitionend"),i.allowMomentumBounce=!1,!r.grabCursor||!0!==n.allowSlideNext&&!0!==n.allowSlidePrev||n.setGrabCursor(!0),n.emit("sliderFirstMove",l)),n.emit("sliderMove",l),i.isMoved=!0;var m=n.isHorizontal()?h:f;a.diff=m,m*=r.touchRatio,o&&(m=-m),n.swipeDirection=m>0?"prev":"next",i.currentTranslate=m+i.startTranslate;var v=!0,y=r.resistanceRatio;if(r.touchReleaseOnEdges&&(y=0),m>0&&i.currentTranslate>n.minTranslate()?(v=!1,r.resistance&&(i.currentTranslate=n.minTranslate()-1+Math.pow(-n.minTranslate()+i.startTranslate+m,y))):m<0&&i.currentTranslate<n.maxTranslate()&&(v=!1,r.resistance&&(i.currentTranslate=n.maxTranslate()+1-Math.pow(n.maxTranslate()-i.startTranslate-m,y))),v&&(l.preventedByNestedSwiper=!0),!n.allowSlideNext&&"next"===n.swipeDirection&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!n.allowSlidePrev&&"prev"===n.swipeDirection&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),r.threshold>0){if(!(Math.abs(m)>r.threshold||i.allowThresholdMove))return void(i.currentTranslate=i.startTranslate);if(!i.allowThresholdMove)return i.allowThresholdMove=!0,a.startX=a.currentX,a.startY=a.currentY,i.currentTranslate=i.startTranslate,void(a.diff=n.isHorizontal()?a.currentX-a.startX:a.currentY-a.startY)}r.followFinger&&!r.cssMode&&((r.freeMode||r.watchSlidesProgress||r.watchSlidesVisibility)&&(n.updateActiveIndex(),n.updateSlidesClasses()),r.freeMode&&(0===i.velocities.length&&i.velocities.push({position:a[n.isHorizontal()?"startX":"startY"],time:i.touchStartTime}),i.velocities.push({position:a[n.isHorizontal()?"currentX":"currentY"],time:S()})),n.updateProgress(i.currentTranslate),n.setTranslate(i.currentTranslate))}}}}else i.startMoving&&i.isScrolling&&n.emit("touchMoveOpposite",l)}function j(e){var t=this,n=t.touchEventsData,i=t.params,r=t.touches,a=t.rtlTranslate,s=t.$wrapperEl,o=t.slidesGrid,l=t.snapGrid,c=e;if(c.originalEvent&&(c=c.originalEvent),n.allowTouchCallbacks&&t.emit("touchEnd",c),n.allowTouchCallbacks=!1,!n.isTouched)return n.isMoved&&i.grabCursor&&t.setGrabCursor(!1),n.isMoved=!1,void(n.startMoving=!1);i.grabCursor&&n.isMoved&&n.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);var d,u=S(),p=u-n.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(c),t.emit("tap click",c),p<300&&u-n.lastClickTime<300&&t.emit("doubleTap doubleClick",c)),n.lastClickTime=S(),x((function(){t.destroyed||(t.allowClick=!0)})),!n.isTouched||!n.isMoved||!t.swipeDirection||0===r.diff||n.currentTranslate===n.startTranslate)return n.isTouched=!1,n.isMoved=!1,void(n.startMoving=!1);if(n.isTouched=!1,n.isMoved=!1,n.startMoving=!1,d=i.followFinger?a?t.translate:-t.translate:-n.currentTranslate,!i.cssMode)if(i.freeMode){if(d<-t.minTranslate())return void t.slideTo(t.activeIndex);if(d>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(i.freeModeMomentum){if(n.velocities.length>1){var h=n.velocities.pop(),f=n.velocities.pop(),m=h.position-f.position,v=h.time-f.time;t.velocity=m/v,t.velocity/=2,Math.abs(t.velocity)<i.freeModeMinimumVelocity&&(t.velocity=0),(v>150||S()-h.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=i.freeModeMomentumVelocityRatio,n.velocities.length=0;var g=1e3*i.freeModeMomentumRatio,y=t.velocity*g,b=t.translate+y;a&&(b=-b);var w,E,T=!1,C=20*Math.abs(t.velocity)*i.freeModeMomentumBounceRatio;if(b<t.maxTranslate())i.freeModeMomentumBounce?(b+t.maxTranslate()<-C&&(b=t.maxTranslate()-C),w=t.maxTranslate(),T=!0,n.allowMomentumBounce=!0):b=t.maxTranslate(),i.loop&&i.centeredSlides&&(E=!0);else if(b>t.minTranslate())i.freeModeMomentumBounce?(b-t.minTranslate()>C&&(b=t.minTranslate()+C),w=t.minTranslate(),T=!0,n.allowMomentumBounce=!0):b=t.minTranslate(),i.loop&&i.centeredSlides&&(E=!0);else if(i.freeModeSticky){for(var _,L=0;L<l.length;L+=1)if(l[L]>-b){_=L;break}b=-(b=Math.abs(l[_]-b)<Math.abs(l[_-1]-b)||"next"===t.swipeDirection?l[_]:l[_-1])}if(E&&t.once("transitionEnd",(function(){t.loopFix()})),0!==t.velocity){if(g=a?Math.abs((-b-t.translate)/t.velocity):Math.abs((b-t.translate)/t.velocity),i.freeModeSticky){var k=Math.abs((a?-b:b)-t.translate),M=t.slidesSizesGrid[t.activeIndex];g=k<M?i.speed:k<2*M?1.5*i.speed:2.5*i.speed}}else if(i.freeModeSticky)return void t.slideToClosest();i.freeModeMomentumBounce&&T?(t.updateProgress(w),t.setTransition(g),t.setTranslate(b),t.transitionStart(!0,t.swipeDirection),t.animating=!0,s.transitionEnd((function(){t&&!t.destroyed&&n.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(i.speed),setTimeout((function(){t.setTranslate(w),s.transitionEnd((function(){t&&!t.destroyed&&t.transitionEnd()}))}),0))}))):t.velocity?(t.updateProgress(b),t.setTransition(g),t.setTranslate(b),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,s.transitionEnd((function(){t&&!t.destroyed&&t.transitionEnd()})))):t.updateProgress(b),t.updateActiveIndex(),t.updateSlidesClasses()}else if(i.freeModeSticky)return void t.slideToClosest();(!i.freeModeMomentum||p>=i.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses())}else{for(var A=0,O=t.slidesSizesGrid[0],I=0;I<o.length;I+=I<i.slidesPerGroupSkip?1:i.slidesPerGroup){var P=I<i.slidesPerGroupSkip-1?1:i.slidesPerGroup;void 0!==o[I+P]?d>=o[I]&&d<o[I+P]&&(A=I,O=o[I+P]-o[I]):d>=o[I]&&(A=I,O=o[o.length-1]-o[o.length-2])}var D=(d-o[A])/O,N=A<i.slidesPerGroupSkip-1?1:i.slidesPerGroup;if(p>i.longSwipesMs){if(!i.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(D>=i.longSwipesRatio?t.slideTo(A+N):t.slideTo(A)),"prev"===t.swipeDirection&&(D>1-i.longSwipesRatio?t.slideTo(A+N):t.slideTo(A))}else{if(!i.shortSwipes)return void t.slideTo(t.activeIndex);!t.navigation||c.target!==t.navigation.nextEl&&c.target!==t.navigation.prevEl?("next"===t.swipeDirection&&t.slideTo(A+N),"prev"===t.swipeDirection&&t.slideTo(A)):c.target===t.navigation.nextEl?t.slideTo(A+N):t.slideTo(A)}}}function z(){var e=this,t=e.params,n=e.el;if(!n||0!==n.offsetWidth){t.breakpoints&&e.setBreakpoint();var i=e.allowSlideNext,r=e.allowSlidePrev,a=e.snapGrid;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses(),("auto"===t.slidesPerView||t.slidesPerView>1)&&e.isEnd&&!e.isBeginning&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.run(),e.allowSlidePrev=r,e.allowSlideNext=i,e.params.watchOverflow&&a!==e.snapGrid&&e.checkOverflow()}}function q(e){var t=this;t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}function H(){var e=this,t=e.wrapperEl,n=e.rtlTranslate;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=n?t.scrollWidth-t.offsetWidth-t.scrollLeft:-t.scrollLeft:e.translate=-t.scrollTop,-0===e.translate&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();var i=e.maxTranslate()-e.minTranslate();(0===i?0:(e.translate-e.minTranslate())/i)!==e.progress&&e.updateProgress(n?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}var $=!1;function B(){}var F={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,nested:!1,width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,slidesPerGroupSkip:0,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,loopPreventsSlide:!0,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0,_emitClasses:!1},R={modular:{useParams:function(e){var t=this;t.modules&&Object.keys(t.modules).forEach((function(n){var i=t.modules[n];i.params&&_(e,i.params)}))},useModules:function(e){void 0===e&&(e={});var t=this;t.modules&&Object.keys(t.modules).forEach((function(n){var i=t.modules[n],r=e[n]||{};i.on&&t.on&&Object.keys(i.on).forEach((function(e){t.on(e,i.on[e])})),i.create&&i.create.bind(t)(r)}))}},eventsEmitter:{on:function(e,t,n){var i=this;if("function"!=typeof t)return i;var r=n?"unshift":"push";return e.split(" ").forEach((function(e){i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e][r](t)})),i},once:function(e,t,n){var i=this;if("function"!=typeof t)return i;function r(){i.off(e,r),r.__emitterProxy&&delete r.__emitterProxy;for(var n=arguments.length,a=new Array(n),s=0;s<n;s++)a[s]=arguments[s];t.apply(i,a)}return r.__emitterProxy=t,i.on(e,r,n)},onAny:function(e,t){var n=this;if("function"!=typeof e)return n;var i=t?"unshift":"push";return n.eventsAnyListeners.indexOf(e)<0&&n.eventsAnyListeners[i](e),n},offAny:function(e){var t=this;if(!t.eventsAnyListeners)return t;var n=t.eventsAnyListeners.indexOf(e);return n>=0&&t.eventsAnyListeners.splice(n,1),t},off:function(e,t){var n=this;return n.eventsListeners?(e.split(" ").forEach((function(e){void 0===t?n.eventsListeners[e]=[]:n.eventsListeners[e]&&n.eventsListeners[e].forEach((function(i,r){(i===t||i.__emitterProxy&&i.__emitterProxy===t)&&n.eventsListeners[e].splice(r,1)}))})),n):n},emit:function(){var e,t,n,i=this;if(!i.eventsListeners)return i;for(var r=arguments.length,a=new Array(r),s=0;s<r;s++)a[s]=arguments[s];"string"==typeof a[0]||Array.isArray(a[0])?(e=a[0],t=a.slice(1,a.length),n=i):(e=a[0].events,t=a[0].data,n=a[0].context||i),t.unshift(n);var o=Array.isArray(e)?e:e.split(" ");return o.forEach((function(e){i.eventsAnyListeners&&i.eventsAnyListeners.length&&i.eventsAnyListeners.forEach((function(i){i.apply(n,[e].concat(t))})),i.eventsListeners&&i.eventsListeners[e]&&i.eventsListeners[e].forEach((function(e){e.apply(n,t)}))})),i}},update:{updateSize:function(){var e,t,n=this,i=n.$el;e=void 0!==n.params.width&&null!==n.params.width?n.params.width:i[0].clientWidth,t=void 0!==n.params.height&&null!==n.params.height?n.params.height:i[0].clientHeight,0===e&&n.isHorizontal()||0===t&&n.isVertical()||(e=e-parseInt(i.css("padding-left")||0,10)-parseInt(i.css("padding-right")||0,10),t=t-parseInt(i.css("padding-top")||0,10)-parseInt(i.css("padding-bottom")||0,10),Number.isNaN(e)&&(e=0),Number.isNaN(t)&&(t=0),_(n,{width:e,height:t,size:n.isHorizontal()?e:t}))},updateSlides:function(){var e=this,t=l(),n=e.params,i=e.$wrapperEl,r=e.size,a=e.rtlTranslate,s=e.wrongRTL,o=e.virtual&&n.virtual.enabled,c=o?e.virtual.slides.length:e.slides.length,d=i.children("."+e.params.slideClass),u=o?e.virtual.slides.length:d.length,p=[],h=[],f=[];function m(e,t){return!n.cssMode||t!==d.length-1}var v=n.slidesOffsetBefore;"function"==typeof v&&(v=n.slidesOffsetBefore.call(e));var g=n.slidesOffsetAfter;"function"==typeof g&&(g=n.slidesOffsetAfter.call(e));var y=e.snapGrid.length,b=e.slidesGrid.length,w=n.spaceBetween,E=-v,x=0,S=0;if(void 0!==r){var T,C;"string"==typeof w&&w.indexOf("%")>=0&&(w=parseFloat(w.replace("%",""))/100*r),e.virtualSize=-w,a?d.css({marginLeft:"",marginTop:""}):d.css({marginRight:"",marginBottom:""}),n.slidesPerColumn>1&&(T=Math.floor(u/n.slidesPerColumn)===u/e.params.slidesPerColumn?u:Math.ceil(u/n.slidesPerColumn)*n.slidesPerColumn,"auto"!==n.slidesPerView&&"row"===n.slidesPerColumnFill&&(T=Math.max(T,n.slidesPerView*n.slidesPerColumn)));for(var L,k=n.slidesPerColumn,M=T/k,A=Math.floor(u/n.slidesPerColumn),O=0;O<u;O+=1){C=0;var I=d.eq(O);if(n.slidesPerColumn>1){var P=void 0,D=void 0,N=void 0;if("row"===n.slidesPerColumnFill&&n.slidesPerGroup>1){var j=Math.floor(O/(n.slidesPerGroup*n.slidesPerColumn)),z=O-n.slidesPerColumn*n.slidesPerGroup*j,q=0===j?n.slidesPerGroup:Math.min(Math.ceil((u-j*k*n.slidesPerGroup)/k),n.slidesPerGroup);P=(D=z-(N=Math.floor(z/q))*q+j*n.slidesPerGroup)+N*T/k,I.css({"-webkit-box-ordinal-group":P,"-moz-box-ordinal-group":P,"-ms-flex-order":P,"-webkit-order":P,order:P})}else"column"===n.slidesPerColumnFill?(N=O-(D=Math.floor(O/k))*k,(D>A||D===A&&N===k-1)&&(N+=1)>=k&&(N=0,D+=1)):D=O-(N=Math.floor(O/M))*M;I.css("margin-"+(e.isHorizontal()?"top":"left"),0!==N&&n.spaceBetween&&n.spaceBetween+"px")}if("none"!==I.css("display")){if("auto"===n.slidesPerView){var H=t.getComputedStyle(I[0],null),$=I[0].style.transform,B=I[0].style.webkitTransform;if($&&(I[0].style.transform="none"),B&&(I[0].style.webkitTransform="none"),n.roundLengths)C=e.isHorizontal()?I.outerWidth(!0):I.outerHeight(!0);else if(e.isHorizontal()){var F=parseFloat(H.getPropertyValue("width")||0),R=parseFloat(H.getPropertyValue("padding-left")||0),G=parseFloat(H.getPropertyValue("padding-right")||0),W=parseFloat(H.getPropertyValue("margin-left")||0),V=parseFloat(H.getPropertyValue("margin-right")||0),X=H.getPropertyValue("box-sizing");if(X&&"border-box"===X)C=F+W+V;else{var Y=I[0],K=Y.clientWidth;C=F+R+G+W+V+(Y.offsetWidth-K)}}else{var U=parseFloat(H.getPropertyValue("height")||0),J=parseFloat(H.getPropertyValue("padding-top")||0),Q=parseFloat(H.getPropertyValue("padding-bottom")||0),Z=parseFloat(H.getPropertyValue("margin-top")||0),ee=parseFloat(H.getPropertyValue("margin-bottom")||0),te=H.getPropertyValue("box-sizing");if(te&&"border-box"===te)C=U+Z+ee;else{var ne=I[0],ie=ne.clientHeight;C=U+J+Q+Z+ee+(ne.offsetHeight-ie)}}$&&(I[0].style.transform=$),B&&(I[0].style.webkitTransform=B),n.roundLengths&&(C=Math.floor(C))}else C=(r-(n.slidesPerView-1)*w)/n.slidesPerView,n.roundLengths&&(C=Math.floor(C)),d[O]&&(e.isHorizontal()?d[O].style.width=C+"px":d[O].style.height=C+"px");d[O]&&(d[O].swiperSlideSize=C),f.push(C),n.centeredSlides?(E=E+C/2+x/2+w,0===x&&0!==O&&(E=E-r/2-w),0===O&&(E=E-r/2-w),Math.abs(E)<.001&&(E=0),n.roundLengths&&(E=Math.floor(E)),S%n.slidesPerGroup==0&&p.push(E),h.push(E)):(n.roundLengths&&(E=Math.floor(E)),(S-Math.min(e.params.slidesPerGroupSkip,S))%e.params.slidesPerGroup==0&&p.push(E),h.push(E),E=E+C+w),e.virtualSize+=C+w,x=C,S+=1}}if(e.virtualSize=Math.max(e.virtualSize,r)+g,a&&s&&("slide"===n.effect||"coverflow"===n.effect)&&i.css({width:e.virtualSize+n.spaceBetween+"px"}),n.setWrapperSize&&(e.isHorizontal()?i.css({width:e.virtualSize+n.spaceBetween+"px"}):i.css({height:e.virtualSize+n.spaceBetween+"px"})),n.slidesPerColumn>1&&(e.virtualSize=(C+n.spaceBetween)*T,e.virtualSize=Math.ceil(e.virtualSize/n.slidesPerColumn)-n.spaceBetween,e.isHorizontal()?i.css({width:e.virtualSize+n.spaceBetween+"px"}):i.css({height:e.virtualSize+n.spaceBetween+"px"}),n.centeredSlides)){L=[];for(var re=0;re<p.length;re+=1){var ae=p[re];n.roundLengths&&(ae=Math.floor(ae)),p[re]<e.virtualSize+p[0]&&L.push(ae)}p=L}if(!n.centeredSlides){L=[];for(var se=0;se<p.length;se+=1){var oe=p[se];n.roundLengths&&(oe=Math.floor(oe)),p[se]<=e.virtualSize-r&&L.push(oe)}p=L,Math.floor(e.virtualSize-r)-Math.floor(p[p.length-1])>1&&p.push(e.virtualSize-r)}if(0===p.length&&(p=[0]),0!==n.spaceBetween&&(e.isHorizontal()?a?d.filter(m).css({marginLeft:w+"px"}):d.filter(m).css({marginRight:w+"px"}):d.filter(m).css({marginBottom:w+"px"})),n.centeredSlides&&n.centeredSlidesBounds){var le=0;f.forEach((function(e){le+=e+(n.spaceBetween?n.spaceBetween:0)}));var ce=(le-=n.spaceBetween)-r;p=p.map((function(e){return e<0?-v:e>ce?ce+g:e}))}if(n.centerInsufficientSlides){var de=0;if(f.forEach((function(e){de+=e+(n.spaceBetween?n.spaceBetween:0)})),(de-=n.spaceBetween)<r){var ue=(r-de)/2;p.forEach((function(e,t){p[t]=e-ue})),h.forEach((function(e,t){h[t]=e+ue}))}}_(e,{slides:d,snapGrid:p,slidesGrid:h,slidesSizesGrid:f}),u!==c&&e.emit("slidesLengthChange"),p.length!==y&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),h.length!==b&&e.emit("slidesGridLengthChange"),(n.watchSlidesProgress||n.watchSlidesVisibility)&&e.updateSlidesOffset()}},updateAutoHeight:function(e){var t,n=this,i=[],r=0;if("number"==typeof e?n.setTransition(e):!0===e&&n.setTransition(n.params.speed),"auto"!==n.params.slidesPerView&&n.params.slidesPerView>1)if(n.params.centeredSlides)n.visibleSlides.each((function(e){i.push(e)}));else for(t=0;t<Math.ceil(n.params.slidesPerView);t+=1){var a=n.activeIndex+t;if(a>n.slides.length)break;i.push(n.slides.eq(a)[0])}else i.push(n.slides.eq(n.activeIndex)[0]);for(t=0;t<i.length;t+=1)if(void 0!==i[t]){var s=i[t].offsetHeight;r=s>r?s:r}r&&n.$wrapperEl.css("height",r+"px")},updateSlidesOffset:function(){for(var e=this.slides,t=0;t<e.length;t+=1)e[t].swiperSlideOffset=this.isHorizontal()?e[t].offsetLeft:e[t].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);var t=this,n=t.params,i=t.slides,r=t.rtlTranslate;if(0!==i.length){void 0===i[0].swiperSlideOffset&&t.updateSlidesOffset();var a=-e;r&&(a=e),i.removeClass(n.slideVisibleClass),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(var s=0;s<i.length;s+=1){var o=i[s],l=(a+(n.centeredSlides?t.minTranslate():0)-o.swiperSlideOffset)/(o.swiperSlideSize+n.spaceBetween);if(n.watchSlidesVisibility||n.centeredSlides&&n.autoHeight){var c=-(a-o.swiperSlideOffset),d=c+t.slidesSizesGrid[s];(c>=0&&c<t.size-1||d>1&&d<=t.size||c<=0&&d>=t.size)&&(t.visibleSlides.push(o),t.visibleSlidesIndexes.push(s),i.eq(s).addClass(n.slideVisibleClass))}o.progress=r?-l:l}t.visibleSlides=g(t.visibleSlides)}},updateProgress:function(e){var t=this;if(void 0===e){var n=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*n||0}var i=t.params,r=t.maxTranslate()-t.minTranslate(),a=t.progress,s=t.isBeginning,o=t.isEnd,l=s,c=o;0===r?(a=0,s=!0,o=!0):(s=(a=(e-t.minTranslate())/r)<=0,o=a>=1),_(t,{progress:a,isBeginning:s,isEnd:o}),(i.watchSlidesProgress||i.watchSlidesVisibility||i.centeredSlides&&i.autoHeight)&&t.updateSlidesProgress(e),s&&!l&&t.emit("reachBeginning toEdge"),o&&!c&&t.emit("reachEnd toEdge"),(l&&!s||c&&!o)&&t.emit("fromEdge"),t.emit("progress",a)},updateSlidesClasses:function(){var e,t=this,n=t.slides,i=t.params,r=t.$wrapperEl,a=t.activeIndex,s=t.realIndex,o=t.virtual&&i.virtual.enabled;n.removeClass(i.slideActiveClass+" "+i.slideNextClass+" "+i.slidePrevClass+" "+i.slideDuplicateActiveClass+" "+i.slideDuplicateNextClass+" "+i.slideDuplicatePrevClass),(e=o?t.$wrapperEl.find("."+i.slideClass+'[data-swiper-slide-index="'+a+'"]'):n.eq(a)).addClass(i.slideActiveClass),i.loop&&(e.hasClass(i.slideDuplicateClass)?r.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+s+'"]').addClass(i.slideDuplicateActiveClass):r.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+s+'"]').addClass(i.slideDuplicateActiveClass));var l=e.nextAll("."+i.slideClass).eq(0).addClass(i.slideNextClass);i.loop&&0===l.length&&(l=n.eq(0)).addClass(i.slideNextClass);var c=e.prevAll("."+i.slideClass).eq(0).addClass(i.slidePrevClass);i.loop&&0===c.length&&(c=n.eq(-1)).addClass(i.slidePrevClass),i.loop&&(l.hasClass(i.slideDuplicateClass)?r.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass):r.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+l.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicateNextClass),c.hasClass(i.slideDuplicateClass)?r.children("."+i.slideClass+":not(."+i.slideDuplicateClass+')[data-swiper-slide-index="'+c.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass):r.children("."+i.slideClass+"."+i.slideDuplicateClass+'[data-swiper-slide-index="'+c.attr("data-swiper-slide-index")+'"]').addClass(i.slideDuplicatePrevClass)),t.emitSlidesClasses()},updateActiveIndex:function(e){var t,n=this,i=n.rtlTranslate?n.translate:-n.translate,r=n.slidesGrid,a=n.snapGrid,s=n.params,o=n.activeIndex,l=n.realIndex,c=n.snapIndex,d=e;if(void 0===d){for(var u=0;u<r.length;u+=1)void 0!==r[u+1]?i>=r[u]&&i<r[u+1]-(r[u+1]-r[u])/2?d=u:i>=r[u]&&i<r[u+1]&&(d=u+1):i>=r[u]&&(d=u);s.normalizeSlideIndex&&(d<0||void 0===d)&&(d=0)}if(a.indexOf(i)>=0)t=a.indexOf(i);else{var p=Math.min(s.slidesPerGroupSkip,d);t=p+Math.floor((d-p)/s.slidesPerGroup)}if(t>=a.length&&(t=a.length-1),d!==o){var h=parseInt(n.slides.eq(d).attr("data-swiper-slide-index")||d,10);_(n,{snapIndex:t,realIndex:h,previousIndex:o,activeIndex:d}),n.emit("activeIndexChange"),n.emit("snapIndexChange"),l!==h&&n.emit("realIndexChange"),(n.initialized||n.params.runCallbacksOnInit)&&n.emit("slideChange")}else t!==c&&(n.snapIndex=t,n.emit("snapIndexChange"))},updateClickedSlide:function(e){var t=this,n=t.params,i=g(e.target).closest("."+n.slideClass)[0],r=!1;if(i)for(var a=0;a<t.slides.length;a+=1)t.slides[a]===i&&(r=!0);if(!i||!r)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=i,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(g(i).attr("data-swiper-slide-index"),10):t.clickedIndex=g(i).index(),n.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}},translate:{getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");var t=this,n=t.params,i=t.rtlTranslate,r=t.translate,a=t.$wrapperEl;if(n.virtualTranslate)return i?-r:r;if(n.cssMode)return r;var s=T(a[0],e);return i&&(s=-s),s||0},setTranslate:function(e,t){var n=this,i=n.rtlTranslate,r=n.params,a=n.$wrapperEl,s=n.wrapperEl,o=n.progress,l=0,c=0;n.isHorizontal()?l=i?-e:e:c=e,r.roundLengths&&(l=Math.floor(l),c=Math.floor(c)),r.cssMode?s[n.isHorizontal()?"scrollLeft":"scrollTop"]=n.isHorizontal()?-l:-c:r.virtualTranslate||a.transform("translate3d("+l+"px, "+c+"px, 0px)"),n.previousTranslate=n.translate,n.translate=n.isHorizontal()?l:c;var d=n.maxTranslate()-n.minTranslate();(0===d?0:(e-n.minTranslate())/d)!==o&&n.updateProgress(e),n.emit("setTranslate",n.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,n,i,r){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===n&&(n=!0),void 0===i&&(i=!0);var a=this,s=a.params,o=a.wrapperEl;if(a.animating&&s.preventInteractionOnTransition)return!1;var l,c=a.minTranslate(),d=a.maxTranslate();if(l=i&&e>c?c:i&&e<d?d:e,a.updateProgress(l),s.cssMode){var u,p=a.isHorizontal();return 0===t?o[p?"scrollLeft":"scrollTop"]=-l:o.scrollTo?o.scrollTo(((u={})[p?"left":"top"]=-l,u.behavior="smooth",u)):o[p?"scrollLeft":"scrollTop"]=-l,!0}return 0===t?(a.setTransition(0),a.setTranslate(l),n&&(a.emit("beforeTransitionStart",t,r),a.emit("transitionEnd"))):(a.setTransition(t),a.setTranslate(l),n&&(a.emit("beforeTransitionStart",t,r),a.emit("transitionStart")),a.animating||(a.animating=!0,a.onTranslateToWrapperTransitionEnd||(a.onTranslateToWrapperTransitionEnd=function(e){a&&!a.destroyed&&e.target===this&&(a.$wrapperEl[0].removeEventListener("transitionend",a.onTranslateToWrapperTransitionEnd),a.$wrapperEl[0].removeEventListener("webkitTransitionEnd",a.onTranslateToWrapperTransitionEnd),a.onTranslateToWrapperTransitionEnd=null,delete a.onTranslateToWrapperTransitionEnd,n&&a.emit("transitionEnd"))}),a.$wrapperEl[0].addEventListener("transitionend",a.onTranslateToWrapperTransitionEnd),a.$wrapperEl[0].addEventListener("webkitTransitionEnd",a.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){var n=this;n.params.cssMode||n.$wrapperEl.transition(e),n.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);var n=this,i=n.activeIndex,r=n.params,a=n.previousIndex;if(!r.cssMode){r.autoHeight&&n.updateAutoHeight();var s=t;if(s||(s=i>a?"next":i<a?"prev":"reset"),n.emit("transitionStart"),e&&i!==a){if("reset"===s)return void n.emit("slideResetTransitionStart");n.emit("slideChangeTransitionStart"),"next"===s?n.emit("slideNextTransitionStart"):n.emit("slidePrevTransitionStart")}}},transitionEnd:function(e,t){void 0===e&&(e=!0);var n=this,i=n.activeIndex,r=n.previousIndex,a=n.params;if(n.animating=!1,!a.cssMode){n.setTransition(0);var s=t;if(s||(s=i>r?"next":i<r?"prev":"reset"),n.emit("transitionEnd"),e&&i!==r){if("reset"===s)return void n.emit("slideResetTransitionEnd");n.emit("slideChangeTransitionEnd"),"next"===s?n.emit("slideNextTransitionEnd"):n.emit("slidePrevTransitionEnd")}}}},slide:{slideTo:function(t,n,i,r){if(void 0===t&&(t=0),void 0===n&&(n=this.params.speed),void 0===i&&(i=!0),"number"!=typeof t&&"string"!=typeof t)throw new Error("The 'index' argument cannot have type other than 'number' or 'string'. ["+e(t)+"] given.");if("string"==typeof t){var a=parseInt(t,10);if(!isFinite(a))throw new Error("The passed-in 'index' (string) couldn't be converted to 'number'. ["+t+"] given.");t=a}var s=this,o=t;o<0&&(o=0);var l=s.params,c=s.snapGrid,d=s.slidesGrid,u=s.previousIndex,p=s.activeIndex,h=s.rtlTranslate,f=s.wrapperEl;if(s.animating&&l.preventInteractionOnTransition)return!1;var m=Math.min(s.params.slidesPerGroupSkip,o),v=m+Math.floor((o-m)/s.params.slidesPerGroup);v>=c.length&&(v=c.length-1),(p||l.initialSlide||0)===(u||0)&&i&&s.emit("beforeSlideChangeStart");var g,y=-c[v];if(s.updateProgress(y),l.normalizeSlideIndex)for(var b=0;b<d.length;b+=1)-Math.floor(100*y)>=Math.floor(100*d[b])&&(o=b);if(s.initialized&&o!==p){if(!s.allowSlideNext&&y<s.translate&&y<s.minTranslate())return!1;if(!s.allowSlidePrev&&y>s.translate&&y>s.maxTranslate()&&(p||0)!==o)return!1}if(g=o>p?"next":o<p?"prev":"reset",h&&-y===s.translate||!h&&y===s.translate)return s.updateActiveIndex(o),l.autoHeight&&s.updateAutoHeight(),s.updateSlidesClasses(),"slide"!==l.effect&&s.setTranslate(y),"reset"!==g&&(s.transitionStart(i,g),s.transitionEnd(i,g)),!1;if(l.cssMode){var w,E=s.isHorizontal(),x=-y;return h&&(x=f.scrollWidth-f.offsetWidth-x),0===n?f[E?"scrollLeft":"scrollTop"]=x:f.scrollTo?f.scrollTo(((w={})[E?"left":"top"]=x,w.behavior="smooth",w)):f[E?"scrollLeft":"scrollTop"]=x,!0}return 0===n?(s.setTransition(0),s.setTranslate(y),s.updateActiveIndex(o),s.updateSlidesClasses(),s.emit("beforeTransitionStart",n,r),s.transitionStart(i,g),s.transitionEnd(i,g)):(s.setTransition(n),s.setTranslate(y),s.updateActiveIndex(o),s.updateSlidesClasses(),s.emit("beforeTransitionStart",n,r),s.transitionStart(i,g),s.animating||(s.animating=!0,s.onSlideToWrapperTransitionEnd||(s.onSlideToWrapperTransitionEnd=function(e){s&&!s.destroyed&&e.target===this&&(s.$wrapperEl[0].removeEventListener("transitionend",s.onSlideToWrapperTransitionEnd),s.$wrapperEl[0].removeEventListener("webkitTransitionEnd",s.onSlideToWrapperTransitionEnd),s.onSlideToWrapperTransitionEnd=null,delete s.onSlideToWrapperTransitionEnd,s.transitionEnd(i,g))}),s.$wrapperEl[0].addEventListener("transitionend",s.onSlideToWrapperTransitionEnd),s.$wrapperEl[0].addEventListener("webkitTransitionEnd",s.onSlideToWrapperTransitionEnd))),!0},slideToLoop:function(e,t,n,i){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===n&&(n=!0);var r=this,a=e;return r.params.loop&&(a+=r.loopedSlides),r.slideTo(a,t,n,i)},slideNext:function(e,t,n){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var i=this,r=i.params,a=i.animating,s=i.activeIndex<r.slidesPerGroupSkip?1:r.slidesPerGroup;if(r.loop){if(a&&r.loopPreventsSlide)return!1;i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft}return i.slideTo(i.activeIndex+s,e,t,n)},slidePrev:function(e,t,n){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var i=this,r=i.params,a=i.animating,s=i.snapGrid,o=i.slidesGrid,l=i.rtlTranslate;if(r.loop){if(a&&r.loopPreventsSlide)return!1;i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft}function c(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}var d,u=c(l?i.translate:-i.translate),p=s.map((function(e){return c(e)})),h=(s[p.indexOf(u)],s[p.indexOf(u)-1]);return void 0===h&&r.cssMode&&s.forEach((function(e){!h&&u>=e&&(h=e)})),void 0!==h&&(d=o.indexOf(h))<0&&(d=i.activeIndex-1),i.slideTo(d,e,t,n)},slideReset:function(e,t,n){return void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),this.slideTo(this.activeIndex,e,t,n)},slideToClosest:function(e,t,n,i){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===i&&(i=.5);var r=this,a=r.activeIndex,s=Math.min(r.params.slidesPerGroupSkip,a),o=s+Math.floor((a-s)/r.params.slidesPerGroup),l=r.rtlTranslate?r.translate:-r.translate;if(l>=r.snapGrid[o]){var c=r.snapGrid[o];l-c>(r.snapGrid[o+1]-c)*i&&(a+=r.params.slidesPerGroup)}else{var d=r.snapGrid[o-1];l-d<=(r.snapGrid[o]-d)*i&&(a-=r.params.slidesPerGroup)}return a=Math.max(a,0),a=Math.min(a,r.slidesGrid.length-1),r.slideTo(a,e,t,n)},slideToClickedSlide:function(){var e,t=this,n=t.params,i=t.$wrapperEl,r="auto"===n.slidesPerView?t.slidesPerViewDynamic():n.slidesPerView,a=t.clickedIndex;if(n.loop){if(t.animating)return;e=parseInt(g(t.clickedSlide).attr("data-swiper-slide-index"),10),n.centeredSlides?a<t.loopedSlides-r/2||a>t.slides.length-t.loopedSlides+r/2?(t.loopFix(),a=i.children("."+n.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+n.slideDuplicateClass+")").eq(0).index(),x((function(){t.slideTo(a)}))):t.slideTo(a):a>t.slides.length-r?(t.loopFix(),a=i.children("."+n.slideClass+'[data-swiper-slide-index="'+e+'"]:not(.'+n.slideDuplicateClass+")").eq(0).index(),x((function(){t.slideTo(a)}))):t.slideTo(a)}else t.slideTo(a)}},loop:{loopCreate:function(){var e=this,t=s(),n=e.params,i=e.$wrapperEl;i.children("."+n.slideClass+"."+n.slideDuplicateClass).remove();var r=i.children("."+n.slideClass);if(n.loopFillGroupWithBlank){var a=n.slidesPerGroup-r.length%n.slidesPerGroup;if(a!==n.slidesPerGroup){for(var o=0;o<a;o+=1){var l=g(t.createElement("div")).addClass(n.slideClass+" "+n.slideBlankClass);i.append(l)}r=i.children("."+n.slideClass)}}"auto"!==n.slidesPerView||n.loopedSlides||(n.loopedSlides=r.length),e.loopedSlides=Math.ceil(parseFloat(n.loopedSlides||n.slidesPerView,10)),e.loopedSlides+=n.loopAdditionalSlides,e.loopedSlides>r.length&&(e.loopedSlides=r.length);var c=[],d=[];r.each((function(t,n){var i=g(t);n<e.loopedSlides&&d.push(t),n<r.length&&n>=r.length-e.loopedSlides&&c.push(t),i.attr("data-swiper-slide-index",n)}));for(var u=0;u<d.length;u+=1)i.append(g(d[u].cloneNode(!0)).addClass(n.slideDuplicateClass));for(var p=c.length-1;p>=0;p-=1)i.prepend(g(c[p].cloneNode(!0)).addClass(n.slideDuplicateClass))},loopFix:function(){var e=this;e.emit("beforeLoopFix");var t,n=e.activeIndex,i=e.slides,r=e.loopedSlides,a=e.allowSlidePrev,s=e.allowSlideNext,o=e.snapGrid,l=e.rtlTranslate;e.allowSlidePrev=!0,e.allowSlideNext=!0;var c=-o[n]-e.getTranslate();n<r?(t=i.length-3*r+n,t+=r,e.slideTo(t,0,!1,!0)&&0!==c&&e.setTranslate((l?-e.translate:e.translate)-c)):n>=i.length-r&&(t=-i.length+n+r,t+=r,e.slideTo(t,0,!1,!0)&&0!==c&&e.setTranslate((l?-e.translate:e.translate)-c)),e.allowSlidePrev=a,e.allowSlideNext=s,e.emit("loopFix")},loopDestroy:function(){var e=this,t=e.$wrapperEl,n=e.params,i=e.slides;t.children("."+n.slideClass+"."+n.slideDuplicateClass+",."+n.slideClass+"."+n.slideBlankClass).remove(),i.removeAttr("data-swiper-slide-index")}},grabCursor:{setGrabCursor:function(e){var t=this;if(!(t.support.touch||!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)){var n=t.el;n.style.cursor="move",n.style.cursor=e?"-webkit-grabbing":"-webkit-grab",n.style.cursor=e?"-moz-grabbin":"-moz-grab",n.style.cursor=e?"grabbing":"grab"}},unsetGrabCursor:function(){var e=this;e.support.touch||e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.el.style.cursor="")}},manipulation:{appendSlide:function(t){var n=this,i=n.$wrapperEl,r=n.params;if(r.loop&&n.loopDestroy(),"object"==e(t)&&"length"in t)for(var a=0;a<t.length;a+=1)t[a]&&i.append(t[a]);else i.append(t);r.loop&&n.loopCreate(),r.observer&&n.support.observer||n.update()},prependSlide:function(t){var n=this,i=n.params,r=n.$wrapperEl,a=n.activeIndex;i.loop&&n.loopDestroy();var s=a+1;if("object"==e(t)&&"length"in t){for(var o=0;o<t.length;o+=1)t[o]&&r.prepend(t[o]);s=a+t.length}else r.prepend(t);i.loop&&n.loopCreate(),i.observer&&n.support.observer||n.update(),n.slideTo(s,0,!1)},addSlide:function(t,n){var i=this,r=i.$wrapperEl,a=i.params,s=i.activeIndex;a.loop&&(s-=i.loopedSlides,i.loopDestroy(),i.slides=r.children("."+a.slideClass));var o=i.slides.length;if(t<=0)i.prependSlide(n);else if(t>=o)i.appendSlide(n);else{for(var l=s>t?s+1:s,c=[],d=o-1;d>=t;d-=1){var u=i.slides.eq(d);u.remove(),c.unshift(u)}if("object"==e(n)&&"length"in n){for(var p=0;p<n.length;p+=1)n[p]&&r.append(n[p]);l=s>t?s+n.length:s}else r.append(n);for(var h=0;h<c.length;h+=1)r.append(c[h]);a.loop&&i.loopCreate(),a.observer&&i.support.observer||i.update(),a.loop?i.slideTo(l+i.loopedSlides,0,!1):i.slideTo(l,0,!1)}},removeSlide:function(t){var n=this,i=n.params,r=n.$wrapperEl,a=n.activeIndex;i.loop&&(a-=n.loopedSlides,n.loopDestroy(),n.slides=r.children("."+i.slideClass));var s,o=a;if("object"==e(t)&&"length"in t){for(var l=0;l<t.length;l+=1)s=t[l],n.slides[s]&&n.slides.eq(s).remove(),s<o&&(o-=1);o=Math.max(o,0)}else s=t,n.slides[s]&&n.slides.eq(s).remove(),s<o&&(o-=1),o=Math.max(o,0);i.loop&&n.loopCreate(),i.observer&&n.support.observer||n.update(),i.loop?n.slideTo(o+n.loopedSlides,0,!1):n.slideTo(o,0,!1)},removeAllSlides:function(){for(var e=[],t=0;t<this.slides.length;t+=1)e.push(t);this.removeSlide(e)}},events:{attachEvents:function(){var e=this,t=s(),n=e.params,i=e.touchEvents,r=e.el,a=e.wrapperEl,o=e.device,l=e.support;e.onTouchStart=D.bind(e),e.onTouchMove=N.bind(e),e.onTouchEnd=j.bind(e),n.cssMode&&(e.onScroll=H.bind(e)),e.onClick=q.bind(e);var c=!!n.nested;if(!l.touch&&l.pointerEvents)r.addEventListener(i.start,e.onTouchStart,!1),t.addEventListener(i.move,e.onTouchMove,c),t.addEventListener(i.end,e.onTouchEnd,!1);else{if(l.touch){var d=!("touchstart"!==i.start||!l.passiveListener||!n.passiveListeners)&&{passive:!0,capture:!1};r.addEventListener(i.start,e.onTouchStart,d),r.addEventListener(i.move,e.onTouchMove,l.passiveListener?{passive:!1,capture:c}:c),r.addEventListener(i.end,e.onTouchEnd,d),i.cancel&&r.addEventListener(i.cancel,e.onTouchEnd,d),$||(t.addEventListener("touchstart",B),$=!0)}(n.simulateTouch&&!o.ios&&!o.android||n.simulateTouch&&!l.touch&&o.ios)&&(r.addEventListener("mousedown",e.onTouchStart,!1),t.addEventListener("mousemove",e.onTouchMove,c),t.addEventListener("mouseup",e.onTouchEnd,!1))}(n.preventClicks||n.preventClicksPropagation)&&r.addEventListener("click",e.onClick,!0),n.cssMode&&a.addEventListener("scroll",e.onScroll),n.updateOnWindowResize?e.on(o.ios||o.android?"resize orientationchange observerUpdate":"resize observerUpdate",z,!0):e.on("observerUpdate",z,!0)},detachEvents:function(){var e=this,t=s(),n=e.params,i=e.touchEvents,r=e.el,a=e.wrapperEl,o=e.device,l=e.support,c=!!n.nested;if(!l.touch&&l.pointerEvents)r.removeEventListener(i.start,e.onTouchStart,!1),t.removeEventListener(i.move,e.onTouchMove,c),t.removeEventListener(i.end,e.onTouchEnd,!1);else{if(l.touch){var d=!("onTouchStart"!==i.start||!l.passiveListener||!n.passiveListeners)&&{passive:!0,capture:!1};r.removeEventListener(i.start,e.onTouchStart,d),r.removeEventListener(i.move,e.onTouchMove,c),r.removeEventListener(i.end,e.onTouchEnd,d),i.cancel&&r.removeEventListener(i.cancel,e.onTouchEnd,d)}(n.simulateTouch&&!o.ios&&!o.android||n.simulateTouch&&!l.touch&&o.ios)&&(r.removeEventListener("mousedown",e.onTouchStart,!1),t.removeEventListener("mousemove",e.onTouchMove,c),t.removeEventListener("mouseup",e.onTouchEnd,!1))}(n.preventClicks||n.preventClicksPropagation)&&r.removeEventListener("click",e.onClick,!0),n.cssMode&&a.removeEventListener("scroll",e.onScroll),e.off(o.ios||o.android?"resize orientationchange observerUpdate":"resize observerUpdate",z)}},breakpoints:{setBreakpoint:function(){var e=this,t=e.activeIndex,n=e.initialized,i=e.loopedSlides,r=void 0===i?0:i,a=e.params,s=e.$el,o=a.breakpoints;if(o&&(!o||0!==Object.keys(o).length)){var l=e.getBreakpoint(o);if(l&&e.currentBreakpoint!==l){var c=l in o?o[l]:void 0;c&&["slidesPerView","spaceBetween","slidesPerGroup","slidesPerGroupSkip","slidesPerColumn"].forEach((function(e){var t=c[e];void 0!==t&&(c[e]="slidesPerView"!==e||"AUTO"!==t&&"auto"!==t?"slidesPerView"===e?parseFloat(t):parseInt(t,10):"auto")}));var d=c||e.originalParams,u=a.slidesPerColumn>1,p=d.slidesPerColumn>1;u&&!p?(s.removeClass(a.containerModifierClass+"multirow "+a.containerModifierClass+"multirow-column"),e.emitContainerClasses()):!u&&p&&(s.addClass(a.containerModifierClass+"multirow"),"column"===d.slidesPerColumnFill&&s.addClass(a.containerModifierClass+"multirow-column"),e.emitContainerClasses());var h=d.direction&&d.direction!==a.direction,f=a.loop&&(d.slidesPerView!==a.slidesPerView||h);h&&n&&e.changeDirection(),_(e.params,d),_(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),e.currentBreakpoint=l,e.emit("_beforeBreakpoint",d),f&&n&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-r+e.loopedSlides,0,!1)),e.emit("breakpoint",d)}}},getBreakpoint:function(e){var t=l();if(e){var n=!1,i=Object.keys(e).map((function(e){if("string"==typeof e&&0===e.indexOf("@")){var n=parseFloat(e.substr(1));return{value:t.innerHeight*n,point:e}}return{value:e,point:e}}));i.sort((function(e,t){return parseInt(e.value,10)-parseInt(t.value,10)}));for(var r=0;r<i.length;r+=1){var a=i[r],s=a.point;a.value<=t.innerWidth&&(n=s)}return n||"max"}}},checkOverflow:{checkOverflow:function(){var e=this,t=e.params,n=e.isLocked,i=e.slides.length>0&&t.slidesOffsetBefore+t.spaceBetween*(e.slides.length-1)+e.slides[0].offsetWidth*e.slides.length;t.slidesOffsetBefore&&t.slidesOffsetAfter&&i?e.isLocked=i<=e.size:e.isLocked=1===e.snapGrid.length,e.allowSlideNext=!e.isLocked,e.allowSlidePrev=!e.isLocked,n!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock"),n&&n!==e.isLocked&&(e.isEnd=!1,e.navigation&&e.navigation.update())}},classes:{addClasses:function(){var e=this,t=e.classNames,n=e.params,i=e.rtl,r=e.$el,a=e.device,s=[];s.push("initialized"),s.push(n.direction),n.freeMode&&s.push("free-mode"),n.autoHeight&&s.push("autoheight"),i&&s.push("rtl"),n.slidesPerColumn>1&&(s.push("multirow"),"column"===n.slidesPerColumnFill&&s.push("multirow-column")),a.android&&s.push("android"),a.ios&&s.push("ios"),n.cssMode&&s.push("css-mode"),s.forEach((function(e){t.push(n.containerModifierClass+e)})),r.addClass(t.join(" ")),e.emitContainerClasses()},removeClasses:function(){var e=this,t=e.$el,n=e.classNames;t.removeClass(n.join(" ")),e.emitContainerClasses()}},images:{loadImage:function(e,t,n,i,r,a){var s,o=l();function c(){a&&a()}g(e).parent("picture")[0]||e.complete&&r?c():t?((s=new o.Image).onload=c,s.onerror=c,i&&(s.sizes=i),n&&(s.srcset=n),t&&(s.src=t)):c()},preloadImages:function(){var e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(var n=0;n<e.imagesToLoad.length;n+=1){var i=e.imagesToLoad[n];e.loadImage(i,i.currentSrc||i.getAttribute("src"),i.srcset||i.getAttribute("srcset"),i.sizes||i.getAttribute("sizes"),!0,t)}}}},G={},W=function(){function n(){for(var t,i,r=arguments.length,a=new Array(r),s=0;s<r;s++)a[s]=arguments[s];1===a.length&&a[0].constructor&&a[0].constructor===Object?i=a[0]:(t=a[0],i=a[1]),i||(i={}),i=_({},i),t&&!i.el&&(i.el=t);var o=this;o.support=k(),o.device=M({userAgent:i.userAgent}),o.browser=A(),o.eventsListeners={},o.eventsAnyListeners=[],void 0===o.modules&&(o.modules={}),Object.keys(o.modules).forEach((function(t){var n=o.modules[t];if(n.params){var r=Object.keys(n.params)[0],a=n.params[r];if("object"!=e(a)||null===a)return;if(!(r in i)||!("enabled"in a))return;!0===i[r]&&(i[r]={enabled:!0}),"object"!=e(i[r])||"enabled"in i[r]||(i[r].enabled=!0),i[r]||(i[r]={enabled:!1})}}));var l=_({},F);o.useParams(l),o.params=_({},l,G,i),o.originalParams=_({},o.params),o.passedParams=_({},i),o.params&&o.params.on&&Object.keys(o.params.on).forEach((function(e){o.on(e,o.params.on[e])})),o.params&&o.params.onAny&&o.onAny(o.params.onAny),o.$=g;var c=g(o.params.el);if(t=c[0]){if(c.length>1){var d=[];return c.each((function(e){var t=_({},i,{el:e});d.push(new n(t))})),d}var u,p,h;return t.swiper=o,t&&t.shadowRoot&&t.shadowRoot.querySelector?(u=g(t.shadowRoot.querySelector("."+o.params.wrapperClass))).children=function(e){return c.children(e)}:u=c.children("."+o.params.wrapperClass),_(o,{$el:c,el:t,$wrapperEl:u,wrapperEl:u[0],classNames:[],slides:g(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:function(){return"horizontal"===o.params.direction},isVertical:function(){return"vertical"===o.params.direction},rtl:"rtl"===t.dir.toLowerCase()||"rtl"===c.css("direction"),rtlTranslate:"horizontal"===o.params.direction&&("rtl"===t.dir.toLowerCase()||"rtl"===c.css("direction")),wrongRTL:"-webkit-box"===u.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:o.params.allowSlideNext,allowSlidePrev:o.params.allowSlidePrev,touchEvents:(p=["touchstart","touchmove","touchend","touchcancel"],h=["mousedown","mousemove","mouseup"],o.support.pointerEvents&&(h=["pointerdown","pointermove","pointerup"]),o.touchEventsTouch={start:p[0],move:p[1],end:p[2],cancel:p[3]},o.touchEventsDesktop={start:h[0],move:h[1],end:h[2]},o.support.touch||!o.params.simulateTouch?o.touchEventsTouch:o.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video, label",lastClickTime:S(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:o.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),o.useModules(),o.emit("_swiper"),o.params.init&&o.init(),o}}var i,r,a=n.prototype;return a.emitContainerClasses=function(){var e=this;if(e.params._emitClasses&&e.el){var t=e.el.className.split(" ").filter((function(t){return 0===t.indexOf("swiper-container")||0===t.indexOf(e.params.containerModifierClass)}));e.emit("_containerClasses",t.join(" "))}},a.getSlideClasses=function(e){var t=this;return e.className.split(" ").filter((function(e){return 0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass)})).join(" ")},a.emitSlidesClasses=function(){var e=this;e.params._emitClasses&&e.el&&e.slides.each((function(t){var n=e.getSlideClasses(t);e.emit("_slideClass",t,n)}))},a.slidesPerViewDynamic=function(){var e=this,t=e.params,n=e.slides,i=e.slidesGrid,r=e.size,a=e.activeIndex,s=1;if(t.centeredSlides){for(var o,l=n[a].swiperSlideSize,c=a+1;c<n.length;c+=1)n[c]&&!o&&(s+=1,(l+=n[c].swiperSlideSize)>r&&(o=!0));for(var d=a-1;d>=0;d-=1)n[d]&&!o&&(s+=1,(l+=n[d].swiperSlideSize)>r&&(o=!0))}else for(var u=a+1;u<n.length;u+=1)i[u]-i[a]<r&&(s+=1);return s},a.update=function(){var e=this;if(e&&!e.destroyed){var t=e.snapGrid,n=e.params;n.breakpoints&&e.setBreakpoint(),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.params.freeMode?(i(),e.params.autoHeight&&e.updateAutoHeight()):(("auto"===e.params.slidesPerView||e.params.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0))||i(),n.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}function i(){var t=e.rtlTranslate?-1*e.translate:e.translate,n=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(n),e.updateActiveIndex(),e.updateSlidesClasses()}},a.changeDirection=function(e,t){void 0===t&&(t=!0);var n=this,i=n.params.direction;return e||(e="horizontal"===i?"vertical":"horizontal"),e===i||"horizontal"!==e&&"vertical"!==e||(n.$el.removeClass(""+n.params.containerModifierClass+i).addClass(""+n.params.containerModifierClass+e),n.emitContainerClasses(),n.params.direction=e,n.slides.each((function(t){"vertical"===e?t.style.width="":t.style.height=""})),n.emit("changeDirection"),t&&n.update()),n},a.init=function(){var e=this;e.initialized||(e.emit("beforeInit"),e.params.breakpoints&&e.setBreakpoint(),e.addClasses(),e.params.loop&&e.loopCreate(),e.updateSize(),e.updateSlides(),e.params.watchOverflow&&e.checkOverflow(),e.params.grabCursor&&e.setGrabCursor(),e.params.preloadImages&&e.preloadImages(),e.params.loop?e.slideTo(e.params.initialSlide+e.loopedSlides,0,e.params.runCallbacksOnInit):e.slideTo(e.params.initialSlide,0,e.params.runCallbacksOnInit),e.attachEvents(),e.initialized=!0,e.emit("init"),e.emit("afterInit"))},a.destroy=function(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);var n,i=this,r=i.params,a=i.$el,s=i.$wrapperEl,o=i.slides;return void 0===i.params||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),r.loop&&i.loopDestroy(),t&&(i.removeClasses(),a.removeAttr("style"),s.removeAttr("style"),o&&o.length&&o.removeClass([r.slideVisibleClass,r.slideActiveClass,r.slideNextClass,r.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")),i.emit("destroy"),Object.keys(i.eventsListeners).forEach((function(e){i.off(e)})),!1!==e&&(i.$el[0].swiper=null,n=i,Object.keys(n).forEach((function(e){try{n[e]=null}catch(e){}try{delete n[e]}catch(e){}}))),i.destroyed=!0),null},n.extendDefaults=function(e){_(G,e)},n.installModule=function(e){n.prototype.modules||(n.prototype.modules={});var t=e.name||Object.keys(n.prototype.modules).length+"_"+S();n.prototype.modules[t]=e},n.use=function(e){return Array.isArray(e)?(e.forEach((function(e){return n.installModule(e)})),n):(n.installModule(e),n)},i=n,r=[{key:"extendedDefaults",get:function(){return G}},{key:"defaults",get:function(){return F}}],null&&t(i.prototype,null),r&&t(i,r),n}();Object.keys(R).forEach((function(e){Object.keys(R[e]).forEach((function(t){W.prototype[t]=R[e][t]}))})),W.use([O,P]);var V={update:function(e){var t=this,n=t.params,i=n.slidesPerView,r=n.slidesPerGroup,a=n.centeredSlides,s=t.params.virtual,o=s.addSlidesBefore,l=s.addSlidesAfter,c=t.virtual,d=c.from,u=c.to,p=c.slides,h=c.slidesGrid,f=c.renderSlide,m=c.offset;t.updateActiveIndex();var v,g,y,b=t.activeIndex||0;v=t.rtlTranslate?"right":t.isHorizontal()?"left":"top",a?(g=Math.floor(i/2)+r+l,y=Math.floor(i/2)+r+o):(g=i+(r-1)+l,y=r+o);var w=Math.max((b||0)-y,0),E=Math.min((b||0)+g,p.length-1),x=(t.slidesGrid[w]||0)-(t.slidesGrid[0]||0);function S(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(_(t.virtual,{from:w,to:E,offset:x,slidesGrid:t.slidesGrid}),d===w&&u===E&&!e)return t.slidesGrid!==h&&x!==m&&t.slides.css(v,x+"px"),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:x,from:w,to:E,slides:function(){for(var e=[],t=w;t<=E;t+=1)e.push(p[t]);return e}()}),void(t.params.virtual.renderExternalUpdate&&S());var T=[],C=[];if(e)t.$wrapperEl.find("."+t.params.slideClass).remove();else for(var L=d;L<=u;L+=1)(L<w||L>E)&&t.$wrapperEl.find("."+t.params.slideClass+'[data-swiper-slide-index="'+L+'"]').remove();for(var k=0;k<p.length;k+=1)k>=w&&k<=E&&(void 0===u||e?C.push(k):(k>u&&C.push(k),k<d&&T.push(k)));C.forEach((function(e){t.$wrapperEl.append(f(p[e],e))})),T.sort((function(e,t){return t-e})).forEach((function(e){t.$wrapperEl.prepend(f(p[e],e))})),t.$wrapperEl.children(".swiper-slide").css(v,x+"px"),S()},renderSlide:function(e,t){var n=this,i=n.params.virtual;if(i.cache&&n.virtual.cache[t])return n.virtual.cache[t];var r=i.renderSlide?g(i.renderSlide.call(n,e,t)):g('<div class="'+n.params.slideClass+'" data-swiper-slide-index="'+t+'">'+e+"</div>");return r.attr("data-swiper-slide-index")||r.attr("data-swiper-slide-index",t),i.cache&&(n.virtual.cache[t]=r),r},appendSlide:function(t){var n=this;if("object"==e(t)&&"length"in t)for(var i=0;i<t.length;i+=1)t[i]&&n.virtual.slides.push(t[i]);else n.virtual.slides.push(t);n.virtual.update(!0)},prependSlide:function(e){var t=this,n=t.activeIndex,i=n+1,r=1;if(Array.isArray(e)){for(var a=0;a<e.length;a+=1)e[a]&&t.virtual.slides.unshift(e[a]);i=n+e.length,r=e.length}else t.virtual.slides.unshift(e);if(t.params.virtual.cache){var s=t.virtual.cache,o={};Object.keys(s).forEach((function(e){var t=s[e],n=t.attr("data-swiper-slide-index");n&&t.attr("data-swiper-slide-index",parseInt(n,10)+1),o[parseInt(e,10)+r]=t})),t.virtual.cache=o}t.virtual.update(!0),t.slideTo(i,0)},removeSlide:function(e){var t=this;if(null!=e){var n=t.activeIndex;if(Array.isArray(e))for(var i=e.length-1;i>=0;i-=1)t.virtual.slides.splice(e[i],1),t.params.virtual.cache&&delete t.virtual.cache[e[i]],e[i]<n&&(n-=1),n=Math.max(n,0);else t.virtual.slides.splice(e,1),t.params.virtual.cache&&delete t.virtual.cache[e],e<n&&(n-=1),n=Math.max(n,0);t.virtual.update(!0),t.slideTo(n,0)}},removeAllSlides:function(){var e=this;e.virtual.slides=[],e.params.virtual.cache&&(e.virtual.cache={}),e.virtual.update(!0),e.slideTo(0,0)}},X={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}},create:function(){L(this,{virtual:n({},V,{slides:this.params.virtual.slides,cache:{}})})},on:{beforeInit:function(e){if(e.params.virtual.enabled){e.classNames.push(e.params.containerModifierClass+"virtual");var t={watchSlidesProgress:!0};_(e.params,t),_(e.originalParams,t),e.params.initialSlide||e.virtual.update()}},setTranslate:function(e){e.params.virtual.enabled&&e.virtual.update()}}},Y={handle:function(e){var t=this,n=l(),i=s(),r=t.rtlTranslate,a=e;a.originalEvent&&(a=a.originalEvent);var o=a.keyCode||a.charCode,c=t.params.keyboard.pageUpDown,d=c&&33===o,u=c&&34===o,p=37===o,h=39===o,f=38===o,m=40===o;if(!t.allowSlideNext&&(t.isHorizontal()&&h||t.isVertical()&&m||u))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&p||t.isVertical()&&f||d))return!1;if(!(a.shiftKey||a.altKey||a.ctrlKey||a.metaKey||i.activeElement&&i.activeElement.nodeName&&("input"===i.activeElement.nodeName.toLowerCase()||"textarea"===i.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(d||u||p||h||f||m)){var v=!1;if(t.$el.parents("."+t.params.slideClass).length>0&&0===t.$el.parents("."+t.params.slideActiveClass).length)return;var g=n.innerWidth,y=n.innerHeight,b=t.$el.offset();r&&(b.left-=t.$el[0].scrollLeft);for(var w=[[b.left,b.top],[b.left+t.width,b.top],[b.left,b.top+t.height],[b.left+t.width,b.top+t.height]],E=0;E<w.length;E+=1){var x=w[E];if(x[0]>=0&&x[0]<=g&&x[1]>=0&&x[1]<=y){if(0===x[0]&&0===x[1])continue;v=!0}}if(!v)return}t.isHorizontal()?((d||u||p||h)&&(a.preventDefault?a.preventDefault():a.returnValue=!1),((u||h)&&!r||(d||p)&&r)&&t.slideNext(),((d||p)&&!r||(u||h)&&r)&&t.slidePrev()):((d||u||f||m)&&(a.preventDefault?a.preventDefault():a.returnValue=!1),(u||m)&&t.slideNext(),(d||f)&&t.slidePrev()),t.emit("keyPress",o)}},enable:function(){var e=this,t=s();e.keyboard.enabled||(g(t).on("keydown",e.keyboard.handle),e.keyboard.enabled=!0)},disable:function(){var e=this,t=s();e.keyboard.enabled&&(g(t).off("keydown",e.keyboard.handle),e.keyboard.enabled=!1)}},K={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}},create:function(){L(this,{keyboard:n({enabled:!1},Y)})},on:{init:function(e){e.params.keyboard.enabled&&e.keyboard.enable()},destroy:function(e){e.keyboard.enabled&&e.keyboard.disable()}}},U={lastScrollTime:S(),lastEventBeforeSnap:void 0,recentWheelEvents:[],event:function(){return l().navigator.userAgent.indexOf("firefox")>-1?"DOMMouseScroll":function(){var e=s(),t="onwheel",n=t in e;if(!n){var i=e.createElement("div");i.setAttribute(t,"return;"),n="function"==typeof i.onwheel}return!n&&e.implementation&&e.implementation.hasFeature&&!0!==e.implementation.hasFeature("","")&&(n=e.implementation.hasFeature("Events.wheel","3.0")),n}()?"wheel":"mousewheel"},normalize:function(e){var t=0,n=0,i=0,r=0;return"detail"in e&&(n=e.detail),"wheelDelta"in e&&(n=-e.wheelDelta/120),"wheelDeltaY"in e&&(n=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=n,n=0),i=10*t,r=10*n,"deltaY"in e&&(r=e.deltaY),"deltaX"in e&&(i=e.deltaX),e.shiftKey&&!i&&(i=r,r=0),(i||r)&&e.deltaMode&&(1===e.deltaMode?(i*=40,r*=40):(i*=800,r*=800)),i&&!t&&(t=i<1?-1:1),r&&!n&&(n=r<1?-1:1),{spinX:t,spinY:n,pixelX:i,pixelY:r}},handleMouseEnter:function(){this.mouseEntered=!0},handleMouseLeave:function(){this.mouseEntered=!1},handle:function(e){var t=e,n=this,i=n.params.mousewheel;n.params.cssMode&&t.preventDefault();var r=n.$el;if("container"!==n.params.mousewheel.eventsTarget&&(r=g(n.params.mousewheel.eventsTarget)),!n.mouseEntered&&!r[0].contains(t.target)&&!i.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);var a=0,s=n.rtlTranslate?-1:1,o=U.normalize(t);if(i.forceToAxis)if(n.isHorizontal()){if(!(Math.abs(o.pixelX)>Math.abs(o.pixelY)))return!0;a=-o.pixelX*s}else{if(!(Math.abs(o.pixelY)>Math.abs(o.pixelX)))return!0;a=-o.pixelY}else a=Math.abs(o.pixelX)>Math.abs(o.pixelY)?-o.pixelX*s:-o.pixelY;if(0===a)return!0;i.invert&&(a=-a);var l=n.getTranslate()+a*i.sensitivity;if(l>=n.minTranslate()&&(l=n.minTranslate()),l<=n.maxTranslate()&&(l=n.maxTranslate()),(!!n.params.loop||!(l===n.minTranslate()||l===n.maxTranslate()))&&n.params.nested&&t.stopPropagation(),n.params.freeMode){var c={time:S(),delta:Math.abs(a),direction:Math.sign(a)},d=n.mousewheel.lastEventBeforeSnap,u=d&&c.time<d.time+500&&c.delta<=d.delta&&c.direction===d.direction;if(!u){n.mousewheel.lastEventBeforeSnap=void 0,n.params.loop&&n.loopFix();var p=n.getTranslate()+a*i.sensitivity,h=n.isBeginning,f=n.isEnd;if(p>=n.minTranslate()&&(p=n.minTranslate()),p<=n.maxTranslate()&&(p=n.maxTranslate()),n.setTransition(0),n.setTranslate(p),n.updateProgress(),n.updateActiveIndex(),n.updateSlidesClasses(),(!h&&n.isBeginning||!f&&n.isEnd)&&n.updateSlidesClasses(),n.params.freeModeSticky){clearTimeout(n.mousewheel.timeout),n.mousewheel.timeout=void 0;var m=n.mousewheel.recentWheelEvents;m.length>=15&&m.shift();var v=m.length?m[m.length-1]:void 0,y=m[0];if(m.push(c),v&&(c.delta>v.delta||c.direction!==v.direction))m.splice(0);else if(m.length>=15&&c.time-y.time<500&&y.delta-c.delta>=1&&c.delta<=6){var b=a>0?.8:.2;n.mousewheel.lastEventBeforeSnap=c,m.splice(0),n.mousewheel.timeout=x((function(){n.slideToClosest(n.params.speed,!0,void 0,b)}),0)}n.mousewheel.timeout||(n.mousewheel.timeout=x((function(){n.mousewheel.lastEventBeforeSnap=c,m.splice(0),n.slideToClosest(n.params.speed,!0,void 0,.5)}),500))}if(u||n.emit("scroll",t),n.params.autoplay&&n.params.autoplayDisableOnInteraction&&n.autoplay.stop(),p===n.minTranslate()||p===n.maxTranslate())return!0}}else{var w={time:S(),delta:Math.abs(a),direction:Math.sign(a),raw:e},E=n.mousewheel.recentWheelEvents;E.length>=2&&E.shift();var T=E.length?E[E.length-1]:void 0;if(E.push(w),T?(w.direction!==T.direction||w.delta>T.delta||w.time>T.time+150)&&n.mousewheel.animateSlider(w):n.mousewheel.animateSlider(w),n.mousewheel.releaseScroll(w))return!0}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},animateSlider:function(e){var t=this,n=l();return!(this.params.mousewheel.thresholdDelta&&e.delta<this.params.mousewheel.thresholdDelta||this.params.mousewheel.thresholdTime&&S()-t.mousewheel.lastScrollTime<this.params.mousewheel.thresholdTime||!(e.delta>=6&&S()-t.mousewheel.lastScrollTime<60)&&(e.direction<0?t.isEnd&&!t.params.loop||t.animating||(t.slideNext(),t.emit("scroll",e.raw)):t.isBeginning&&!t.params.loop||t.animating||(t.slidePrev(),t.emit("scroll",e.raw)),t.mousewheel.lastScrollTime=(new n.Date).getTime(),1))},releaseScroll:function(e){var t=this,n=t.params.mousewheel;if(e.direction<0){if(t.isEnd&&!t.params.loop&&n.releaseOnEdges)return!0}else if(t.isBeginning&&!t.params.loop&&n.releaseOnEdges)return!0;return!1},enable:function(){var e=this,t=U.event();if(e.params.cssMode)return e.wrapperEl.removeEventListener(t,e.mousewheel.handle),!0;if(!t)return!1;if(e.mousewheel.enabled)return!1;var n=e.$el;return"container"!==e.params.mousewheel.eventsTarget&&(n=g(e.params.mousewheel.eventsTarget)),n.on("mouseenter",e.mousewheel.handleMouseEnter),n.on("mouseleave",e.mousewheel.handleMouseLeave),n.on(t,e.mousewheel.handle),e.mousewheel.enabled=!0,!0},disable:function(){var e=this,t=U.event();if(e.params.cssMode)return e.wrapperEl.addEventListener(t,e.mousewheel.handle),!0;if(!t)return!1;if(!e.mousewheel.enabled)return!1;var n=e.$el;return"container"!==e.params.mousewheel.eventsTarget&&(n=g(e.params.mousewheel.eventsTarget)),n.off(t,e.mousewheel.handle),e.mousewheel.enabled=!1,!0}},J={update:function(){var e=this,t=e.params.navigation;if(!e.params.loop){var n=e.navigation,i=n.$nextEl,r=n.$prevEl;r&&r.length>0&&(e.isBeginning?r.addClass(t.disabledClass):r.removeClass(t.disabledClass),r[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass)),i&&i.length>0&&(e.isEnd?i.addClass(t.disabledClass):i.removeClass(t.disabledClass),i[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass))}},onPrevClick:function(e){var t=this;e.preventDefault(),t.isBeginning&&!t.params.loop||t.slidePrev()},onNextClick:function(e){var t=this;e.preventDefault(),t.isEnd&&!t.params.loop||t.slideNext()},init:function(){var e,t,n=this,i=n.params.navigation;(i.nextEl||i.prevEl)&&(i.nextEl&&(e=g(i.nextEl),n.params.uniqueNavElements&&"string"==typeof i.nextEl&&e.length>1&&1===n.$el.find(i.nextEl).length&&(e=n.$el.find(i.nextEl))),i.prevEl&&(t=g(i.prevEl),n.params.uniqueNavElements&&"string"==typeof i.prevEl&&t.length>1&&1===n.$el.find(i.prevEl).length&&(t=n.$el.find(i.prevEl))),e&&e.length>0&&e.on("click",n.navigation.onNextClick),t&&t.length>0&&t.on("click",n.navigation.onPrevClick),_(n.navigation,{$nextEl:e,nextEl:e&&e[0],$prevEl:t,prevEl:t&&t[0]}))},destroy:function(){var e=this,t=e.navigation,n=t.$nextEl,i=t.$prevEl;n&&n.length&&(n.off("click",e.navigation.onNextClick),n.removeClass(e.params.navigation.disabledClass)),i&&i.length&&(i.off("click",e.navigation.onPrevClick),i.removeClass(e.params.navigation.disabledClass))}},Q={update:function(){var e=this,t=e.rtl,n=e.params.pagination;if(n.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var i,r=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,a=e.pagination.$el,s=e.params.loop?Math.ceil((r-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?((i=Math.ceil((e.activeIndex-e.loopedSlides)/e.params.slidesPerGroup))>r-1-2*e.loopedSlides&&(i-=r-2*e.loopedSlides),i>s-1&&(i-=s),i<0&&"bullets"!==e.params.paginationType&&(i=s+i)):i=void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,"bullets"===n.type&&e.pagination.bullets&&e.pagination.bullets.length>0){var o,l,c,d=e.pagination.bullets;if(n.dynamicBullets&&(e.pagination.bulletSize=d.eq(0)[e.isHorizontal()?"outerWidth":"outerHeight"](!0),a.css(e.isHorizontal()?"width":"height",e.pagination.bulletSize*(n.dynamicMainBullets+4)+"px"),n.dynamicMainBullets>1&&void 0!==e.previousIndex&&(e.pagination.dynamicBulletIndex+=i-e.previousIndex,e.pagination.dynamicBulletIndex>n.dynamicMainBullets-1?e.pagination.dynamicBulletIndex=n.dynamicMainBullets-1:e.pagination.dynamicBulletIndex<0&&(e.pagination.dynamicBulletIndex=0)),o=i-e.pagination.dynamicBulletIndex,c=((l=o+(Math.min(d.length,n.dynamicMainBullets)-1))+o)/2),d.removeClass(n.bulletActiveClass+" "+n.bulletActiveClass+"-next "+n.bulletActiveClass+"-next-next "+n.bulletActiveClass+"-prev "+n.bulletActiveClass+"-prev-prev "+n.bulletActiveClass+"-main"),a.length>1)d.each((function(e){var t=g(e),r=t.index();r===i&&t.addClass(n.bulletActiveClass),n.dynamicBullets&&(r>=o&&r<=l&&t.addClass(n.bulletActiveClass+"-main"),r===o&&t.prev().addClass(n.bulletActiveClass+"-prev").prev().addClass(n.bulletActiveClass+"-prev-prev"),r===l&&t.next().addClass(n.bulletActiveClass+"-next").next().addClass(n.bulletActiveClass+"-next-next"))}));else{var u=d.eq(i),p=u.index();if(u.addClass(n.bulletActiveClass),n.dynamicBullets){for(var h=d.eq(o),f=d.eq(l),m=o;m<=l;m+=1)d.eq(m).addClass(n.bulletActiveClass+"-main");if(e.params.loop)if(p>=d.length-n.dynamicMainBullets){for(var v=n.dynamicMainBullets;v>=0;v-=1)d.eq(d.length-v).addClass(n.bulletActiveClass+"-main");d.eq(d.length-n.dynamicMainBullets-1).addClass(n.bulletActiveClass+"-prev")}else h.prev().addClass(n.bulletActiveClass+"-prev").prev().addClass(n.bulletActiveClass+"-prev-prev"),f.next().addClass(n.bulletActiveClass+"-next").next().addClass(n.bulletActiveClass+"-next-next");else h.prev().addClass(n.bulletActiveClass+"-prev").prev().addClass(n.bulletActiveClass+"-prev-prev"),f.next().addClass(n.bulletActiveClass+"-next").next().addClass(n.bulletActiveClass+"-next-next")}}if(n.dynamicBullets){var y=Math.min(d.length,n.dynamicMainBullets+4),b=(e.pagination.bulletSize*y-e.pagination.bulletSize)/2-c*e.pagination.bulletSize,w=t?"right":"left";d.css(e.isHorizontal()?w:"top",b+"px")}}if("fraction"===n.type&&(a.find("."+n.currentClass).text(n.formatFractionCurrent(i+1)),a.find("."+n.totalClass).text(n.formatFractionTotal(s))),"progressbar"===n.type){var E;E=n.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical";var x=(i+1)/s,S=1,T=1;"horizontal"===E?S=x:T=x,a.find("."+n.progressbarFillClass).transform("translate3d(0,0,0) scaleX("+S+") scaleY("+T+")").transition(e.params.speed)}"custom"===n.type&&n.renderCustom?(a.html(n.renderCustom(e,i+1,s)),e.emit("paginationRender",a[0])):e.emit("paginationUpdate",a[0]),a[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](n.lockClass)}},render:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var n=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,i=e.pagination.$el,r="";if("bullets"===t.type){for(var a=e.params.loop?Math.ceil((n-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length,s=0;s<a;s+=1)t.renderBullet?r+=t.renderBullet.call(e,s,t.bulletClass):r+="<"+t.bulletElement+' class="'+t.bulletClass+'"></'+t.bulletElement+">";i.html(r),e.pagination.bullets=i.find("."+t.bulletClass.replace(/ /g,"."))}"fraction"===t.type&&(r=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):'<span class="'+t.currentClass+'"></span> / <span class="'+t.totalClass+'"></span>',i.html(r)),"progressbar"===t.type&&(r=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):'<span class="'+t.progressbarFillClass+'"></span>',i.html(r)),"custom"!==t.type&&e.emit("paginationRender",e.pagination.$el[0])}},init:function(){var e=this,t=e.params.pagination;if(t.el){var n=g(t.el);0!==n.length&&(e.params.uniqueNavElements&&"string"==typeof t.el&&n.length>1&&(n=e.$el.find(t.el)),"bullets"===t.type&&t.clickable&&n.addClass(t.clickableClass),n.addClass(t.modifierClass+t.type),"bullets"===t.type&&t.dynamicBullets&&(n.addClass(""+t.modifierClass+t.type+"-dynamic"),e.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&n.addClass(t.progressbarOppositeClass),t.clickable&&n.on("click","."+t.bulletClass.replace(/ /g,"."),(function(t){t.preventDefault();var n=g(this).index()*e.params.slidesPerGroup;e.params.loop&&(n+=e.loopedSlides),e.slideTo(n)})),_(e.pagination,{$el:n,el:n[0]}))}},destroy:function(){var e=this,t=e.params.pagination;if(t.el&&e.pagination.el&&e.pagination.$el&&0!==e.pagination.$el.length){var n=e.pagination.$el;n.removeClass(t.hiddenClass),n.removeClass(t.modifierClass+t.type),e.pagination.bullets&&e.pagination.bullets.removeClass(t.bulletActiveClass),t.clickable&&n.off("click","."+t.bulletClass.replace(/ /g,"."))}}},Z={setTranslate:function(){var e=this;if(e.params.scrollbar.el&&e.scrollbar.el){var t=e.scrollbar,n=e.rtlTranslate,i=e.progress,r=t.dragSize,a=t.trackSize,s=t.$dragEl,o=t.$el,l=e.params.scrollbar,c=r,d=(a-r)*i;n?(d=-d)>0?(c=r-d,d=0):-d+r>a&&(c=a+d):d<0?(c=r+d,d=0):d+r>a&&(c=a-d),e.isHorizontal()?(s.transform("translate3d("+d+"px, 0, 0)"),s[0].style.width=c+"px"):(s.transform("translate3d(0px, "+d+"px, 0)"),s[0].style.height=c+"px"),l.hide&&(clearTimeout(e.scrollbar.timeout),o[0].style.opacity=1,e.scrollbar.timeout=setTimeout((function(){o[0].style.opacity=0,o.transition(400)}),1e3))}},setTransition:function(e){var t=this;t.params.scrollbar.el&&t.scrollbar.el&&t.scrollbar.$dragEl.transition(e)},updateSize:function(){var e=this;if(e.params.scrollbar.el&&e.scrollbar.el){var t=e.scrollbar,n=t.$dragEl,i=t.$el;n[0].style.width="",n[0].style.height="";var r,a=e.isHorizontal()?i[0].offsetWidth:i[0].offsetHeight,s=e.size/e.virtualSize,o=s*(a/e.size);r="auto"===e.params.scrollbar.dragSize?a*s:parseInt(e.params.scrollbar.dragSize,10),e.isHorizontal()?n[0].style.width=r+"px":n[0].style.height=r+"px",i[0].style.display=s>=1?"none":"",e.params.scrollbar.hide&&(i[0].style.opacity=0),_(t,{trackSize:a,divider:s,moveDivider:o,dragSize:r}),t.$el[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](e.params.scrollbar.lockClass)}},getPointerPosition:function(e){return this.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientX:e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].clientY:e.clientY},setDragPosition:function(e){var t,n=this,i=n.scrollbar,r=n.rtlTranslate,a=i.$el,s=i.dragSize,o=i.trackSize,l=i.dragStartPos;t=(i.getPointerPosition(e)-a.offset()[n.isHorizontal()?"left":"top"]-(null!==l?l:s/2))/(o-s),t=Math.max(Math.min(t,1),0),r&&(t=1-t);var c=n.minTranslate()+(n.maxTranslate()-n.minTranslate())*t;n.updateProgress(c),n.setTranslate(c),n.updateActiveIndex(),n.updateSlidesClasses()},onDragStart:function(e){var t=this,n=t.params.scrollbar,i=t.scrollbar,r=t.$wrapperEl,a=i.$el,s=i.$dragEl;t.scrollbar.isTouched=!0,t.scrollbar.dragStartPos=e.target===s[0]||e.target===s?i.getPointerPosition(e)-e.target.getBoundingClientRect()[t.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),r.transition(100),s.transition(100),i.setDragPosition(e),clearTimeout(t.scrollbar.dragTimeout),a.transition(0),n.hide&&a.css("opacity",1),t.params.cssMode&&t.$wrapperEl.css("scroll-snap-type","none"),t.emit("scrollbarDragStart",e)},onDragMove:function(e){var t=this,n=t.scrollbar,i=t.$wrapperEl,r=n.$el,a=n.$dragEl;t.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,n.setDragPosition(e),i.transition(0),r.transition(0),a.transition(0),t.emit("scrollbarDragMove",e))},onDragEnd:function(e){var t=this,n=t.params.scrollbar,i=t.scrollbar,r=t.$wrapperEl,a=i.$el;t.scrollbar.isTouched&&(t.scrollbar.isTouched=!1,t.params.cssMode&&(t.$wrapperEl.css("scroll-snap-type",""),r.transition("")),n.hide&&(clearTimeout(t.scrollbar.dragTimeout),t.scrollbar.dragTimeout=x((function(){a.css("opacity",0),a.transition(400)}),1e3)),t.emit("scrollbarDragEnd",e),n.snapOnRelease&&t.slideToClosest())},enableDraggable:function(){var e=this;if(e.params.scrollbar.el){var t=s(),n=e.scrollbar,i=e.touchEventsTouch,r=e.touchEventsDesktop,a=e.params,o=e.support,l=n.$el[0],c=!(!o.passiveListener||!a.passiveListeners)&&{passive:!1,capture:!1},d=!(!o.passiveListener||!a.passiveListeners)&&{passive:!0,capture:!1};o.touch?(l.addEventListener(i.start,e.scrollbar.onDragStart,c),l.addEventListener(i.move,e.scrollbar.onDragMove,c),l.addEventListener(i.end,e.scrollbar.onDragEnd,d)):(l.addEventListener(r.start,e.scrollbar.onDragStart,c),t.addEventListener(r.move,e.scrollbar.onDragMove,c),t.addEventListener(r.end,e.scrollbar.onDragEnd,d))}},disableDraggable:function(){var e=this;if(e.params.scrollbar.el){var t=s(),n=e.scrollbar,i=e.touchEventsTouch,r=e.touchEventsDesktop,a=e.params,o=e.support,l=n.$el[0],c=!(!o.passiveListener||!a.passiveListeners)&&{passive:!1,capture:!1},d=!(!o.passiveListener||!a.passiveListeners)&&{passive:!0,capture:!1};o.touch?(l.removeEventListener(i.start,e.scrollbar.onDragStart,c),l.removeEventListener(i.move,e.scrollbar.onDragMove,c),l.removeEventListener(i.end,e.scrollbar.onDragEnd,d)):(l.removeEventListener(r.start,e.scrollbar.onDragStart,c),t.removeEventListener(r.move,e.scrollbar.onDragMove,c),t.removeEventListener(r.end,e.scrollbar.onDragEnd,d))}},init:function(){var e=this;if(e.params.scrollbar.el){var t=e.scrollbar,n=e.$el,i=e.params.scrollbar,r=g(i.el);e.params.uniqueNavElements&&"string"==typeof i.el&&r.length>1&&1===n.find(i.el).length&&(r=n.find(i.el));var a=r.find("."+e.params.scrollbar.dragClass);0===a.length&&(a=g('<div class="'+e.params.scrollbar.dragClass+'"></div>'),r.append(a)),_(t,{$el:r,el:r[0],$dragEl:a,dragEl:a[0]}),i.draggable&&t.enableDraggable()}},destroy:function(){this.scrollbar.disableDraggable()}},ee={setTransform:function(e,t){var n=this.rtl,i=g(e),r=n?-1:1,a=i.attr("data-swiper-parallax")||"0",s=i.attr("data-swiper-parallax-x"),o=i.attr("data-swiper-parallax-y"),l=i.attr("data-swiper-parallax-scale"),c=i.attr("data-swiper-parallax-opacity");if(s||o?(s=s||"0",o=o||"0"):this.isHorizontal()?(s=a,o="0"):(o=a,s="0"),s=s.indexOf("%")>=0?parseInt(s,10)*t*r+"%":s*t*r+"px",o=o.indexOf("%")>=0?parseInt(o,10)*t+"%":o*t+"px",null!=c){var d=c-(c-1)*(1-Math.abs(t));i[0].style.opacity=d}if(null==l)i.transform("translate3d("+s+", "+o+", 0px)");else{var u=l-(l-1)*(1-Math.abs(t));i.transform("translate3d("+s+", "+o+", 0px) scale("+u+")")}},setTranslate:function(){var e=this,t=e.$el,n=e.slides,i=e.progress,r=e.snapGrid;t.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((function(t){e.parallax.setTransform(t,i)})),n.each((function(t,n){var a=t.progress;e.params.slidesPerGroup>1&&"auto"!==e.params.slidesPerView&&(a+=Math.ceil(n/2)-i*(r.length-1)),a=Math.min(Math.max(a,-1),1),g(t).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((function(t){e.parallax.setTransform(t,a)}))}))},setTransition:function(e){void 0===e&&(e=this.params.speed),this.$el.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each((function(t){var n=g(t),i=parseInt(n.attr("data-swiper-parallax-duration"),10)||e;0===e&&(i=0),n.transition(i)}))}},te={getDistanceBetweenTouches:function(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,n=e.targetTouches[0].pageY,i=e.targetTouches[1].pageX,r=e.targetTouches[1].pageY;return Math.sqrt(Math.pow(i-t,2)+Math.pow(r-n,2))},onGestureStart:function(e){var t=this,n=t.support,i=t.params.zoom,r=t.zoom,a=r.gesture;if(r.fakeGestureTouched=!1,r.fakeGestureMoved=!1,!n.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;r.fakeGestureTouched=!0,a.scaleStart=te.getDistanceBetweenTouches(e)}a.$slideEl&&a.$slideEl.length||(a.$slideEl=g(e.target).closest("."+t.params.slideClass),0===a.$slideEl.length&&(a.$slideEl=t.slides.eq(t.activeIndex)),a.$imageEl=a.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),a.$imageWrapEl=a.$imageEl.parent("."+i.containerClass),a.maxRatio=a.$imageWrapEl.attr("data-swiper-zoom")||i.maxRatio,0!==a.$imageWrapEl.length)?(a.$imageEl&&a.$imageEl.transition(0),t.zoom.isScaling=!0):a.$imageEl=void 0},onGestureChange:function(e){var t=this,n=t.support,i=t.params.zoom,r=t.zoom,a=r.gesture;if(!n.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;r.fakeGestureMoved=!0,a.scaleMove=te.getDistanceBetweenTouches(e)}a.$imageEl&&0!==a.$imageEl.length?(n.gestures?r.scale=e.scale*r.currentScale:r.scale=a.scaleMove/a.scaleStart*r.currentScale,r.scale>a.maxRatio&&(r.scale=a.maxRatio-1+Math.pow(r.scale-a.maxRatio+1,.5)),r.scale<i.minRatio&&(r.scale=i.minRatio+1-Math.pow(i.minRatio-r.scale+1,.5)),a.$imageEl.transform("translate3d(0,0,0) scale("+r.scale+")")):"gesturechange"===e.type&&r.onGestureStart(e)},onGestureEnd:function(e){var t=this,n=t.device,i=t.support,r=t.params.zoom,a=t.zoom,s=a.gesture;if(!i.gestures){if(!a.fakeGestureTouched||!a.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!n.android)return;a.fakeGestureTouched=!1,a.fakeGestureMoved=!1}s.$imageEl&&0!==s.$imageEl.length&&(a.scale=Math.max(Math.min(a.scale,s.maxRatio),r.minRatio),s.$imageEl.transition(t.params.speed).transform("translate3d(0,0,0) scale("+a.scale+")"),a.currentScale=a.scale,a.isScaling=!1,1===a.scale&&(s.$slideEl=void 0))},onTouchStart:function(e){var t=this.device,n=this.zoom,i=n.gesture,r=n.image;i.$imageEl&&0!==i.$imageEl.length&&(r.isTouched||(t.android&&e.cancelable&&e.preventDefault(),r.isTouched=!0,r.touchesStart.x="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,r.touchesStart.y="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove:function(e){var t=this,n=t.zoom,i=n.gesture,r=n.image,a=n.velocity;if(i.$imageEl&&0!==i.$imageEl.length&&(t.allowClick=!1,r.isTouched&&i.$slideEl)){r.isMoved||(r.width=i.$imageEl[0].offsetWidth,r.height=i.$imageEl[0].offsetHeight,r.startX=T(i.$imageWrapEl[0],"x")||0,r.startY=T(i.$imageWrapEl[0],"y")||0,i.slideWidth=i.$slideEl[0].offsetWidth,i.slideHeight=i.$slideEl[0].offsetHeight,i.$imageWrapEl.transition(0),t.rtl&&(r.startX=-r.startX,r.startY=-r.startY));var s=r.width*n.scale,o=r.height*n.scale;if(!(s<i.slideWidth&&o<i.slideHeight)){if(r.minX=Math.min(i.slideWidth/2-s/2,0),r.maxX=-r.minX,r.minY=Math.min(i.slideHeight/2-o/2,0),r.maxY=-r.minY,r.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,r.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!r.isMoved&&!n.isScaling){if(t.isHorizontal()&&(Math.floor(r.minX)===Math.floor(r.startX)&&r.touchesCurrent.x<r.touchesStart.x||Math.floor(r.maxX)===Math.floor(r.startX)&&r.touchesCurrent.x>r.touchesStart.x))return void(r.isTouched=!1);if(!t.isHorizontal()&&(Math.floor(r.minY)===Math.floor(r.startY)&&r.touchesCurrent.y<r.touchesStart.y||Math.floor(r.maxY)===Math.floor(r.startY)&&r.touchesCurrent.y>r.touchesStart.y))return void(r.isTouched=!1)}e.cancelable&&e.preventDefault(),e.stopPropagation(),r.isMoved=!0,r.currentX=r.touchesCurrent.x-r.touchesStart.x+r.startX,r.currentY=r.touchesCurrent.y-r.touchesStart.y+r.startY,r.currentX<r.minX&&(r.currentX=r.minX+1-Math.pow(r.minX-r.currentX+1,.8)),r.currentX>r.maxX&&(r.currentX=r.maxX-1+Math.pow(r.currentX-r.maxX+1,.8)),r.currentY<r.minY&&(r.currentY=r.minY+1-Math.pow(r.minY-r.currentY+1,.8)),r.currentY>r.maxY&&(r.currentY=r.maxY-1+Math.pow(r.currentY-r.maxY+1,.8)),a.prevPositionX||(a.prevPositionX=r.touchesCurrent.x),a.prevPositionY||(a.prevPositionY=r.touchesCurrent.y),a.prevTime||(a.prevTime=Date.now()),a.x=(r.touchesCurrent.x-a.prevPositionX)/(Date.now()-a.prevTime)/2,a.y=(r.touchesCurrent.y-a.prevPositionY)/(Date.now()-a.prevTime)/2,Math.abs(r.touchesCurrent.x-a.prevPositionX)<2&&(a.x=0),Math.abs(r.touchesCurrent.y-a.prevPositionY)<2&&(a.y=0),a.prevPositionX=r.touchesCurrent.x,a.prevPositionY=r.touchesCurrent.y,a.prevTime=Date.now(),i.$imageWrapEl.transform("translate3d("+r.currentX+"px, "+r.currentY+"px,0)")}}},onTouchEnd:function(){var e=this.zoom,t=e.gesture,n=e.image,i=e.velocity;if(t.$imageEl&&0!==t.$imageEl.length){if(!n.isTouched||!n.isMoved)return n.isTouched=!1,void(n.isMoved=!1);n.isTouched=!1,n.isMoved=!1;var r=300,a=300,s=i.x*r,o=n.currentX+s,l=i.y*a,c=n.currentY+l;0!==i.x&&(r=Math.abs((o-n.currentX)/i.x)),0!==i.y&&(a=Math.abs((c-n.currentY)/i.y));var d=Math.max(r,a);n.currentX=o,n.currentY=c;var u=n.width*e.scale,p=n.height*e.scale;n.minX=Math.min(t.slideWidth/2-u/2,0),n.maxX=-n.minX,n.minY=Math.min(t.slideHeight/2-p/2,0),n.maxY=-n.minY,n.currentX=Math.max(Math.min(n.currentX,n.maxX),n.minX),n.currentY=Math.max(Math.min(n.currentY,n.maxY),n.minY),t.$imageWrapEl.transition(d).transform("translate3d("+n.currentX+"px, "+n.currentY+"px,0)")}},onTransitionEnd:function(){var e=this,t=e.zoom,n=t.gesture;n.$slideEl&&e.previousIndex!==e.activeIndex&&(n.$imageEl&&n.$imageEl.transform("translate3d(0,0,0) scale(1)"),n.$imageWrapEl&&n.$imageWrapEl.transform("translate3d(0,0,0)"),t.scale=1,t.currentScale=1,n.$slideEl=void 0,n.$imageEl=void 0,n.$imageWrapEl=void 0)},toggle:function(e){var t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in:function(e){var t,n,i,r,a,s,o,l,c,d,u,p,h,f,m,v,g=this,y=g.zoom,b=g.params.zoom,w=y.gesture,E=y.image;w.$slideEl||(g.params.virtual&&g.params.virtual.enabled&&g.virtual?w.$slideEl=g.$wrapperEl.children("."+g.params.slideActiveClass):w.$slideEl=g.slides.eq(g.activeIndex),w.$imageEl=w.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),w.$imageWrapEl=w.$imageEl.parent("."+b.containerClass)),w.$imageEl&&0!==w.$imageEl.length&&(w.$slideEl.addClass(""+b.zoomedSlideClass),void 0===E.touchesStart.x&&e?(t="touchend"===e.type?e.changedTouches[0].pageX:e.pageX,n="touchend"===e.type?e.changedTouches[0].pageY:e.pageY):(t=E.touchesStart.x,n=E.touchesStart.y),y.scale=w.$imageWrapEl.attr("data-swiper-zoom")||b.maxRatio,y.currentScale=w.$imageWrapEl.attr("data-swiper-zoom")||b.maxRatio,e?(m=w.$slideEl[0].offsetWidth,v=w.$slideEl[0].offsetHeight,i=w.$slideEl.offset().left+m/2-t,r=w.$slideEl.offset().top+v/2-n,o=w.$imageEl[0].offsetWidth,l=w.$imageEl[0].offsetHeight,c=o*y.scale,d=l*y.scale,h=-(u=Math.min(m/2-c/2,0)),f=-(p=Math.min(v/2-d/2,0)),(a=i*y.scale)<u&&(a=u),a>h&&(a=h),(s=r*y.scale)<p&&(s=p),s>f&&(s=f)):(a=0,s=0),w.$imageWrapEl.transition(300).transform("translate3d("+a+"px, "+s+"px,0)"),w.$imageEl.transition(300).transform("translate3d(0,0,0) scale("+y.scale+")"))},out:function(){var e=this,t=e.zoom,n=e.params.zoom,i=t.gesture;i.$slideEl||(e.params.virtual&&e.params.virtual.enabled&&e.virtual?i.$slideEl=e.$wrapperEl.children("."+e.params.slideActiveClass):i.$slideEl=e.slides.eq(e.activeIndex),i.$imageEl=i.$slideEl.find("img, svg, canvas, picture, .swiper-zoom-target"),i.$imageWrapEl=i.$imageEl.parent("."+n.containerClass)),i.$imageEl&&0!==i.$imageEl.length&&(t.scale=1,t.currentScale=1,i.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),i.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),i.$slideEl.removeClass(""+n.zoomedSlideClass),i.$slideEl=void 0)},toggleGestures:function(e){var t=this,n=t.zoom,i=n.slideSelector,r=n.passiveListener;t.$wrapperEl[e]("gesturestart",i,n.onGestureStart,r),t.$wrapperEl[e]("gesturechange",i,n.onGestureChange,r),t.$wrapperEl[e]("gestureend",i,n.onGestureEnd,r)},enableGestures:function(){this.zoom.gesturesEnabled||(this.zoom.gesturesEnabled=!0,this.zoom.toggleGestures("on"))},disableGestures:function(){this.zoom.gesturesEnabled&&(this.zoom.gesturesEnabled=!1,this.zoom.toggleGestures("off"))},enable:function(){var e=this,t=e.support,n=e.zoom;if(!n.enabled){n.enabled=!0;var i=!("touchstart"!==e.touchEvents.start||!t.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1},r=!t.passiveListener||{passive:!1,capture:!0},a="."+e.params.slideClass;e.zoom.passiveListener=i,e.zoom.slideSelector=a,t.gestures?(e.$wrapperEl.on(e.touchEvents.start,e.zoom.enableGestures,i),e.$wrapperEl.on(e.touchEvents.end,e.zoom.disableGestures,i)):"touchstart"===e.touchEvents.start&&(e.$wrapperEl.on(e.touchEvents.start,a,n.onGestureStart,i),e.$wrapperEl.on(e.touchEvents.move,a,n.onGestureChange,r),e.$wrapperEl.on(e.touchEvents.end,a,n.onGestureEnd,i),e.touchEvents.cancel&&e.$wrapperEl.on(e.touchEvents.cancel,a,n.onGestureEnd,i)),e.$wrapperEl.on(e.touchEvents.move,"."+e.params.zoom.containerClass,n.onTouchMove,r)}},disable:function(){var e=this,t=e.zoom;if(t.enabled){var n=e.support;e.zoom.enabled=!1;var i=!("touchstart"!==e.touchEvents.start||!n.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1},r=!n.passiveListener||{passive:!1,capture:!0},a="."+e.params.slideClass;n.gestures?(e.$wrapperEl.off(e.touchEvents.start,e.zoom.enableGestures,i),e.$wrapperEl.off(e.touchEvents.end,e.zoom.disableGestures,i)):"touchstart"===e.touchEvents.start&&(e.$wrapperEl.off(e.touchEvents.start,a,t.onGestureStart,i),e.$wrapperEl.off(e.touchEvents.move,a,t.onGestureChange,r),e.$wrapperEl.off(e.touchEvents.end,a,t.onGestureEnd,i),e.touchEvents.cancel&&e.$wrapperEl.off(e.touchEvents.cancel,a,t.onGestureEnd,i)),e.$wrapperEl.off(e.touchEvents.move,"."+e.params.zoom.containerClass,t.onTouchMove,r)}}},ne={loadInSlide:function(e,t){void 0===t&&(t=!0);var n=this,i=n.params.lazy;if(void 0!==e&&0!==n.slides.length){var r=n.virtual&&n.params.virtual.enabled?n.$wrapperEl.children("."+n.params.slideClass+'[data-swiper-slide-index="'+e+'"]'):n.slides.eq(e),a=r.find("."+i.elementClass+":not(."+i.loadedClass+"):not(."+i.loadingClass+")");!r.hasClass(i.elementClass)||r.hasClass(i.loadedClass)||r.hasClass(i.loadingClass)||a.push(r[0]),0!==a.length&&a.each((function(e){var a=g(e);a.addClass(i.loadingClass);var s=a.attr("data-background"),o=a.attr("data-src"),l=a.attr("data-srcset"),c=a.attr("data-sizes"),d=a.parent("picture");n.loadImage(a[0],o||s,l,c,!1,(function(){if(null!=n&&n&&(!n||n.params)&&!n.destroyed){if(s?(a.css("background-image",'url("'+s+'")'),a.removeAttr("data-background")):(l&&(a.attr("srcset",l),a.removeAttr("data-srcset")),c&&(a.attr("sizes",c),a.removeAttr("data-sizes")),d.length&&d.children("source").each((function(e){var t=g(e);t.attr("data-srcset")&&(t.attr("srcset",t.attr("data-srcset")),t.removeAttr("data-srcset"))})),o&&(a.attr("src",o),a.removeAttr("data-src"))),a.addClass(i.loadedClass).removeClass(i.loadingClass),r.find("."+i.preloaderClass).remove(),n.params.loop&&t){var e=r.attr("data-swiper-slide-index");if(r.hasClass(n.params.slideDuplicateClass)){var u=n.$wrapperEl.children('[data-swiper-slide-index="'+e+'"]:not(.'+n.params.slideDuplicateClass+")");n.lazy.loadInSlide(u.index(),!1)}else{var p=n.$wrapperEl.children("."+n.params.slideDuplicateClass+'[data-swiper-slide-index="'+e+'"]');n.lazy.loadInSlide(p.index(),!1)}}n.emit("lazyImageReady",r[0],a[0]),n.params.autoHeight&&n.updateAutoHeight()}})),n.emit("lazyImageLoad",r[0],a[0])}))}},load:function(){var e=this,t=e.$wrapperEl,n=e.params,i=e.slides,r=e.activeIndex,a=e.virtual&&n.virtual.enabled,s=n.lazy,o=n.slidesPerView;function l(e){if(a){if(t.children("."+n.slideClass+'[data-swiper-slide-index="'+e+'"]').length)return!0}else if(i[e])return!0;return!1}function c(e){return a?g(e).attr("data-swiper-slide-index"):g(e).index()}if("auto"===o&&(o=0),e.lazy.initialImageLoaded||(e.lazy.initialImageLoaded=!0),e.params.watchSlidesVisibility)t.children("."+n.slideVisibleClass).each((function(t){var n=a?g(t).attr("data-swiper-slide-index"):g(t).index();e.lazy.loadInSlide(n)}));else if(o>1)for(var d=r;d<r+o;d+=1)l(d)&&e.lazy.loadInSlide(d);else e.lazy.loadInSlide(r);if(s.loadPrevNext)if(o>1||s.loadPrevNextAmount&&s.loadPrevNextAmount>1){for(var u=s.loadPrevNextAmount,p=o,h=Math.min(r+p+Math.max(u,p),i.length),f=Math.max(r-Math.max(p,u),0),m=r+o;m<h;m+=1)l(m)&&e.lazy.loadInSlide(m);for(var v=f;v<r;v+=1)l(v)&&e.lazy.loadInSlide(v)}else{var y=t.children("."+n.slideNextClass);y.length>0&&e.lazy.loadInSlide(c(y));var b=t.children("."+n.slidePrevClass);b.length>0&&e.lazy.loadInSlide(c(b))}},checkInViewOnLoad:function(){var e=l(),t=this;if(t&&!t.destroyed){var n=t.params.lazy.scrollingElement?g(t.params.lazy.scrollingElement):g(e),i=n[0]===e,r=i?e.innerWidth:n[0].offsetWidth,a=i?e.innerHeight:n[0].offsetHeight,s=t.$el.offset(),o=!1;t.rtlTranslate&&(s.left-=t.$el[0].scrollLeft);for(var c=[[s.left,s.top],[s.left+t.width,s.top],[s.left,s.top+t.height],[s.left+t.width,s.top+t.height]],d=0;d<c.length;d+=1){var u=c[d];if(u[0]>=0&&u[0]<=r&&u[1]>=0&&u[1]<=a){if(0===u[0]&&0===u[1])continue;o=!0}}o?(t.lazy.load(),n.off("scroll",t.lazy.checkInViewOnLoad)):t.lazy.scrollHandlerAttached||(t.lazy.scrollHandlerAttached=!0,n.on("scroll",t.lazy.checkInViewOnLoad))}}},ie={LinearSpline:function(e,t){var n,i,r,a,s;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(s=function(e,t){for(i=-1,n=e.length;n-i>1;)e[r=n+i>>1]<=t?i=r:n=r;return n}(this.x,e),a=s-1,(e-this.x[a])*(this.y[s]-this.y[a])/(this.x[s]-this.x[a])+this.y[a]):0},this},getInterpolateFunction:function(e){var t=this;t.controller.spline||(t.controller.spline=t.params.loop?new ie.LinearSpline(t.slidesGrid,e.slidesGrid):new ie.LinearSpline(t.snapGrid,e.snapGrid))},setTranslate:function(e,t){var n,i,r=this,a=r.controller.control,s=r.constructor;function o(e){var t=r.rtlTranslate?-r.translate:r.translate;"slide"===r.params.controller.by&&(r.controller.getInterpolateFunction(e),i=-r.controller.spline.interpolate(-t)),i&&"container"!==r.params.controller.by||(n=(e.maxTranslate()-e.minTranslate())/(r.maxTranslate()-r.minTranslate()),i=(t-r.minTranslate())*n+e.minTranslate()),r.params.controller.inverse&&(i=e.maxTranslate()-i),e.updateProgress(i),e.setTranslate(i,r),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(a))for(var l=0;l<a.length;l+=1)a[l]!==t&&a[l]instanceof s&&o(a[l]);else a instanceof s&&t!==a&&o(a)},setTransition:function(e,t){var n,i=this,r=i.constructor,a=i.controller.control;function s(t){t.setTransition(e,i),0!==e&&(t.transitionStart(),t.params.autoHeight&&x((function(){t.updateAutoHeight()})),t.$wrapperEl.transitionEnd((function(){a&&(t.params.loop&&"slide"===i.params.controller.by&&t.loopFix(),t.transitionEnd())})))}if(Array.isArray(a))for(n=0;n<a.length;n+=1)a[n]!==t&&a[n]instanceof r&&s(a[n]);else a instanceof r&&t!==a&&s(a)}},re={getRandomNumber:function(e){return void 0===e&&(e=16),"x".repeat(e).replace(/x/g,(function(){return Math.round(16*Math.random()).toString(16)}))},makeElFocusable:function(e){return e.attr("tabIndex","0"),e},makeElNotFocusable:function(e){return e.attr("tabIndex","-1"),e},addElRole:function(e,t){return e.attr("role",t),e},addElRoleDescription:function(e,t){return e.attr("aria-role-description",t),e},addElControls:function(e,t){return e.attr("aria-controls",t),e},addElLabel:function(e,t){return e.attr("aria-label",t),e},addElId:function(e,t){return e.attr("id",t),e},addElLive:function(e,t){return e.attr("aria-live",t),e},disableEl:function(e){return e.attr("aria-disabled",!0),e},enableEl:function(e){return e.attr("aria-disabled",!1),e},onEnterKey:function(e){var t=this,n=t.params.a11y;if(13===e.keyCode){var i=g(e.target);t.navigation&&t.navigation.$nextEl&&i.is(t.navigation.$nextEl)&&(t.isEnd&&!t.params.loop||t.slideNext(),t.isEnd?t.a11y.notify(n.lastSlideMessage):t.a11y.notify(n.nextSlideMessage)),t.navigation&&t.navigation.$prevEl&&i.is(t.navigation.$prevEl)&&(t.isBeginning&&!t.params.loop||t.slidePrev(),t.isBeginning?t.a11y.notify(n.firstSlideMessage):t.a11y.notify(n.prevSlideMessage)),t.pagination&&i.is("."+t.params.pagination.bulletClass.replace(/ /g,"."))&&i[0].click()}},notify:function(e){var t=this.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},updateNavigation:function(){var e=this;if(!e.params.loop&&e.navigation){var t=e.navigation,n=t.$nextEl,i=t.$prevEl;i&&i.length>0&&(e.isBeginning?(e.a11y.disableEl(i),e.a11y.makeElNotFocusable(i)):(e.a11y.enableEl(i),e.a11y.makeElFocusable(i))),n&&n.length>0&&(e.isEnd?(e.a11y.disableEl(n),e.a11y.makeElNotFocusable(n)):(e.a11y.enableEl(n),e.a11y.makeElFocusable(n)))}},updatePagination:function(){var e=this,t=e.params.a11y;e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.bullets.each((function(n){var i=g(n);e.a11y.makeElFocusable(i),e.params.pagination.renderBullet||(e.a11y.addElRole(i,"button"),e.a11y.addElLabel(i,t.paginationBulletMessage.replace(/\{\{index\}\}/,i.index()+1)))}))},init:function(){var e=this,t=e.params.a11y;e.$el.append(e.a11y.liveRegion);var n=e.$el;t.containerRoleDescriptionMessage&&e.a11y.addElRoleDescription(n,t.containerRoleDescriptionMessage),t.containerMessage&&e.a11y.addElLabel(n,t.containerMessage);var i,r,a,s=e.$wrapperEl,o=s.attr("id")||"swiper-wrapper-"+e.a11y.getRandomNumber(16);e.a11y.addElId(s,o),i=e.params.autoplay&&e.params.autoplay.enabled?"off":"polite",e.a11y.addElLive(s,i),t.itemRoleDescriptionMessage&&e.a11y.addElRoleDescription(g(e.slides),t.itemRoleDescriptionMessage),e.a11y.addElRole(g(e.slides),"group"),e.slides.each((function(t){var n=g(t);e.a11y.addElLabel(n,n.index()+1+" / "+e.slides.length)})),e.navigation&&e.navigation.$nextEl&&(r=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(a=e.navigation.$prevEl),r&&r.length&&(e.a11y.makeElFocusable(r),"BUTTON"!==r[0].tagName&&(e.a11y.addElRole(r,"button"),r.on("keydown",e.a11y.onEnterKey)),e.a11y.addElLabel(r,t.nextSlideMessage),e.a11y.addElControls(r,o)),a&&a.length&&(e.a11y.makeElFocusable(a),"BUTTON"!==a[0].tagName&&(e.a11y.addElRole(a,"button"),a.on("keydown",e.a11y.onEnterKey)),e.a11y.addElLabel(a,t.prevSlideMessage),e.a11y.addElControls(a,o)),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.on("keydown","."+e.params.pagination.bulletClass.replace(/ /g,"."),e.a11y.onEnterKey)},destroy:function(){var e,t,n=this;n.a11y.liveRegion&&n.a11y.liveRegion.length>0&&n.a11y.liveRegion.remove(),n.navigation&&n.navigation.$nextEl&&(e=n.navigation.$nextEl),n.navigation&&n.navigation.$prevEl&&(t=n.navigation.$prevEl),e&&e.off("keydown",n.a11y.onEnterKey),t&&t.off("keydown",n.a11y.onEnterKey),n.pagination&&n.params.pagination.clickable&&n.pagination.bullets&&n.pagination.bullets.length&&n.pagination.$el.off("keydown","."+n.params.pagination.bulletClass.replace(/ /g,"."),n.a11y.onEnterKey)}},ae={init:function(){var e=this,t=l();if(e.params.history){if(!t.history||!t.history.pushState)return e.params.history.enabled=!1,void(e.params.hashNavigation.enabled=!0);var n=e.history;n.initialized=!0,n.paths=ae.getPathValues(e.params.url),(n.paths.key||n.paths.value)&&(n.scrollToSlide(0,n.paths.value,e.params.runCallbacksOnInit),e.params.history.replaceState||t.addEventListener("popstate",e.history.setHistoryPopState))}},destroy:function(){var e=l();this.params.history.replaceState||e.removeEventListener("popstate",this.history.setHistoryPopState)},setHistoryPopState:function(){var e=this;e.history.paths=ae.getPathValues(e.params.url),e.history.scrollToSlide(e.params.speed,e.history.paths.value,!1)},getPathValues:function(e){var t=l(),n=(e?new URL(e):t.location).pathname.slice(1).split("/").filter((function(e){return""!==e})),i=n.length;return{key:n[i-2],value:n[i-1]}},setHistory:function(e,t){var n=this,i=l();if(n.history.initialized&&n.params.history.enabled){var r;r=n.params.url?new URL(n.params.url):i.location;var a=n.slides.eq(t),s=ae.slugify(a.attr("data-history"));r.pathname.includes(e)||(s=e+"/"+s);var o=i.history.state;o&&o.value===s||(n.params.history.replaceState?i.history.replaceState({value:s},null,s):i.history.pushState({value:s},null,s))}},slugify:function(e){return e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},scrollToSlide:function(e,t,n){var i=this;if(t)for(var r=0,a=i.slides.length;r<a;r+=1){var s=i.slides.eq(r);if(ae.slugify(s.attr("data-history"))===t&&!s.hasClass(i.params.slideDuplicateClass)){var o=s.index();i.slideTo(o,e,n)}}else i.slideTo(0,e,n)}},se={onHashCange:function(){var e=this,t=s();e.emit("hashChange");var n=t.location.hash.replace("#","");if(n!==e.slides.eq(e.activeIndex).attr("data-hash")){var i=e.$wrapperEl.children("."+e.params.slideClass+'[data-hash="'+n+'"]').index();if(void 0===i)return;e.slideTo(i)}},setHash:function(){var e=this,t=l(),n=s();if(e.hashNavigation.initialized&&e.params.hashNavigation.enabled)if(e.params.hashNavigation.replaceState&&t.history&&t.history.replaceState)t.history.replaceState(null,null,"#"+e.slides.eq(e.activeIndex).attr("data-hash")||""),e.emit("hashSet");else{var i=e.slides.eq(e.activeIndex),r=i.attr("data-hash")||i.attr("data-history");n.location.hash=r||"",e.emit("hashSet")}},init:function(){var e=this,t=s(),n=l();if(!(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)){e.hashNavigation.initialized=!0;var i=t.location.hash.replace("#","");if(i)for(var r=0,a=e.slides.length;r<a;r+=1){var o=e.slides.eq(r);if((o.attr("data-hash")||o.attr("data-history"))===i&&!o.hasClass(e.params.slideDuplicateClass)){var c=o.index();e.slideTo(c,0,e.params.runCallbacksOnInit,!0)}}e.params.hashNavigation.watchState&&g(n).on("hashchange",e.hashNavigation.onHashCange)}},destroy:function(){var e=l();this.params.hashNavigation.watchState&&g(e).off("hashchange",this.hashNavigation.onHashCange)}},oe={run:function(){var e=this,t=e.slides.eq(e.activeIndex),n=e.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(n=t.attr("data-swiper-autoplay")||e.params.autoplay.delay),clearTimeout(e.autoplay.timeout),e.autoplay.timeout=x((function(){var t;e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),t=e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(t=e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit("autoplay")):(t=e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.params.loop?(e.loopFix(),t=e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(t=e.slideTo(0,e.params.speed,!0,!0),e.emit("autoplay")):(t=e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")),(e.params.cssMode&&e.autoplay.running||!1===t)&&e.autoplay.run()}),n)},start:function(){var e=this;return void 0===e.autoplay.timeout&&!e.autoplay.running&&(e.autoplay.running=!0,e.emit("autoplayStart"),e.autoplay.run(),!0)},stop:function(){var e=this;return!!e.autoplay.running&&void 0!==e.autoplay.timeout&&(e.autoplay.timeout&&(clearTimeout(e.autoplay.timeout),e.autoplay.timeout=void 0),e.autoplay.running=!1,e.emit("autoplayStop"),!0)},pause:function(e){var t=this;t.autoplay.running&&(t.autoplay.paused||(t.autoplay.timeout&&clearTimeout(t.autoplay.timeout),t.autoplay.paused=!0,0!==e&&t.params.autoplay.waitForTransition?(t.$wrapperEl[0].addEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].addEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd)):(t.autoplay.paused=!1,t.autoplay.run())))},onVisibilityChange:function(){var e=this,t=s();"hidden"===t.visibilityState&&e.autoplay.running&&e.autoplay.pause(),"visible"===t.visibilityState&&e.autoplay.paused&&(e.autoplay.run(),e.autoplay.paused=!1)},onTransitionEnd:function(e){var t=this;t&&!t.destroyed&&t.$wrapperEl&&e.target===t.$wrapperEl[0]&&(t.$wrapperEl[0].removeEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].removeEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd),t.autoplay.paused=!1,t.autoplay.running?t.autoplay.run():t.autoplay.stop())}},le={setTranslate:function(){for(var e=this,t=e.slides,n=0;n<t.length;n+=1){var i=e.slides.eq(n),r=-i[0].swiperSlideOffset;e.params.virtualTranslate||(r-=e.translate);var a=0;e.isHorizontal()||(a=r,r=0);var s=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(i[0].progress),0):1+Math.min(Math.max(i[0].progress,-1),0);i.css({opacity:s}).transform("translate3d("+r+"px, "+a+"px, 0px)")}},setTransition:function(e){var t=this,n=t.slides,i=t.$wrapperEl;if(n.transition(e),t.params.virtualTranslate&&0!==e){var r=!1;n.transitionEnd((function(){if(!r&&t&&!t.destroyed){r=!0,t.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],n=0;n<e.length;n+=1)i.trigger(e[n])}}))}}},ce={setTranslate:function(){var e,t=this,n=t.$el,i=t.$wrapperEl,r=t.slides,a=t.width,s=t.height,o=t.rtlTranslate,l=t.size,c=t.browser,d=t.params.cubeEffect,u=t.isHorizontal(),p=t.virtual&&t.params.virtual.enabled,h=0;d.shadow&&(u?(0===(e=i.find(".swiper-cube-shadow")).length&&(e=g('<div class="swiper-cube-shadow"></div>'),i.append(e)),e.css({height:a+"px"})):0===(e=n.find(".swiper-cube-shadow")).length&&(e=g('<div class="swiper-cube-shadow"></div>'),n.append(e)));for(var f=0;f<r.length;f+=1){var m=r.eq(f),v=f;p&&(v=parseInt(m.attr("data-swiper-slide-index"),10));var y=90*v,b=Math.floor(y/360);o&&(y=-y,b=Math.floor(-y/360));var w=Math.max(Math.min(m[0].progress,1),-1),E=0,x=0,S=0;v%4==0?(E=4*-b*l,S=0):(v-1)%4==0?(E=0,S=4*-b*l):(v-2)%4==0?(E=l+4*b*l,S=l):(v-3)%4==0&&(E=-l,S=3*l+4*l*b),o&&(E=-E),u||(x=E,E=0);var T="rotateX("+(u?0:-y)+"deg) rotateY("+(u?y:0)+"deg) translate3d("+E+"px, "+x+"px, "+S+"px)";if(w<=1&&w>-1&&(h=90*v+90*w,o&&(h=90*-v-90*w)),m.transform(T),d.slideShadows){var C=u?m.find(".swiper-slide-shadow-left"):m.find(".swiper-slide-shadow-top"),_=u?m.find(".swiper-slide-shadow-right"):m.find(".swiper-slide-shadow-bottom");0===C.length&&(C=g('<div class="swiper-slide-shadow-'+(u?"left":"top")+'"></div>'),m.append(C)),0===_.length&&(_=g('<div class="swiper-slide-shadow-'+(u?"right":"bottom")+'"></div>'),m.append(_)),C.length&&(C[0].style.opacity=Math.max(-w,0)),_.length&&(_[0].style.opacity=Math.max(w,0))}}if(i.css({"-webkit-transform-origin":"50% 50% -"+l/2+"px","-moz-transform-origin":"50% 50% -"+l/2+"px","-ms-transform-origin":"50% 50% -"+l/2+"px","transform-origin":"50% 50% -"+l/2+"px"}),d.shadow)if(u)e.transform("translate3d(0px, "+(a/2+d.shadowOffset)+"px, "+-a/2+"px) rotateX(90deg) rotateZ(0deg) scale("+d.shadowScale+")");else{var L=Math.abs(h)-90*Math.floor(Math.abs(h)/90),k=1.5-(Math.sin(2*L*Math.PI/360)/2+Math.cos(2*L*Math.PI/360)/2),M=d.shadowScale,A=d.shadowScale/k,O=d.shadowOffset;e.transform("scale3d("+M+", 1, "+A+") translate3d(0px, "+(s/2+O)+"px, "+-s/2/A+"px) rotateX(-90deg)")}var I=c.isSafari||c.isWebView?-l/2:0;i.transform("translate3d(0px,0,"+I+"px) rotateX("+(t.isHorizontal()?0:h)+"deg) rotateY("+(t.isHorizontal()?-h:0)+"deg)")},setTransition:function(e){var t=this,n=t.$el;t.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),t.params.cubeEffect.shadow&&!t.isHorizontal()&&n.find(".swiper-cube-shadow").transition(e)}},de={setTranslate:function(){for(var e=this,t=e.slides,n=e.rtlTranslate,i=0;i<t.length;i+=1){var r=t.eq(i),a=r[0].progress;e.params.flipEffect.limitRotation&&(a=Math.max(Math.min(r[0].progress,1),-1));var s=-180*a,o=0,l=-r[0].swiperSlideOffset,c=0;if(e.isHorizontal()?n&&(s=-s):(c=l,l=0,o=-s,s=0),r[0].style.zIndex=-Math.abs(Math.round(a))+t.length,e.params.flipEffect.slideShadows){var d=e.isHorizontal()?r.find(".swiper-slide-shadow-left"):r.find(".swiper-slide-shadow-top"),u=e.isHorizontal()?r.find(".swiper-slide-shadow-right"):r.find(".swiper-slide-shadow-bottom");0===d.length&&(d=g('<div class="swiper-slide-shadow-'+(e.isHorizontal()?"left":"top")+'"></div>'),r.append(d)),0===u.length&&(u=g('<div class="swiper-slide-shadow-'+(e.isHorizontal()?"right":"bottom")+'"></div>'),r.append(u)),d.length&&(d[0].style.opacity=Math.max(-a,0)),u.length&&(u[0].style.opacity=Math.max(a,0))}r.transform("translate3d("+l+"px, "+c+"px, 0px) rotateX("+o+"deg) rotateY("+s+"deg)")}},setTransition:function(e){var t=this,n=t.slides,i=t.activeIndex,r=t.$wrapperEl;if(n.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),t.params.virtualTranslate&&0!==e){var a=!1;n.eq(i).transitionEnd((function(){if(!a&&t&&!t.destroyed){a=!0,t.animating=!1;for(var e=["webkitTransitionEnd","transitionend"],n=0;n<e.length;n+=1)r.trigger(e[n])}}))}}},ue={setTranslate:function(){for(var e=this,t=e.width,n=e.height,i=e.slides,r=e.slidesSizesGrid,a=e.params.coverflowEffect,s=e.isHorizontal(),o=e.translate,l=s?t/2-o:n/2-o,c=s?a.rotate:-a.rotate,d=a.depth,u=0,p=i.length;u<p;u+=1){var h=i.eq(u),f=r[u],m=(l-h[0].swiperSlideOffset-f/2)/f*a.modifier,v=s?c*m:0,y=s?0:c*m,b=-d*Math.abs(m),w=a.stretch;"string"==typeof w&&-1!==w.indexOf("%")&&(w=parseFloat(a.stretch)/100*f);var E=s?0:w*m,x=s?w*m:0,S=1-(1-a.scale)*Math.abs(m);Math.abs(x)<.001&&(x=0),Math.abs(E)<.001&&(E=0),Math.abs(b)<.001&&(b=0),Math.abs(v)<.001&&(v=0),Math.abs(y)<.001&&(y=0),Math.abs(S)<.001&&(S=0);var T="translate3d("+x+"px,"+E+"px,"+b+"px)  rotateX("+y+"deg) rotateY("+v+"deg) scale("+S+")";if(h.transform(T),h[0].style.zIndex=1-Math.abs(Math.round(m)),a.slideShadows){var C=s?h.find(".swiper-slide-shadow-left"):h.find(".swiper-slide-shadow-top"),_=s?h.find(".swiper-slide-shadow-right"):h.find(".swiper-slide-shadow-bottom");0===C.length&&(C=g('<div class="swiper-slide-shadow-'+(s?"left":"top")+'"></div>'),h.append(C)),0===_.length&&(_=g('<div class="swiper-slide-shadow-'+(s?"right":"bottom")+'"></div>'),h.append(_)),C.length&&(C[0].style.opacity=m>0?m:0),_.length&&(_[0].style.opacity=-m>0?-m:0)}}},setTransition:function(e){this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}},pe={init:function(){var e=this,t=e.params.thumbs;if(e.thumbs.initialized)return!1;e.thumbs.initialized=!0;var n=e.constructor;return t.swiper instanceof n?(e.thumbs.swiper=t.swiper,_(e.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),_(e.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):C(t.swiper)&&(e.thumbs.swiper=new n(_({},t.swiper,{watchSlidesVisibility:!0,watchSlidesProgress:!0,slideToClickedSlide:!1})),e.thumbs.swiperCreated=!0),e.thumbs.swiper.$el.addClass(e.params.thumbs.thumbsContainerClass),e.thumbs.swiper.on("tap",e.thumbs.onThumbClick),!0},onThumbClick:function(){var e=this,t=e.thumbs.swiper;if(t){var n=t.clickedIndex,i=t.clickedSlide;if(!(i&&g(i).hasClass(e.params.thumbs.slideThumbActiveClass)||null==n)){var r;if(r=t.params.loop?parseInt(g(t.clickedSlide).attr("data-swiper-slide-index"),10):n,e.params.loop){var a=e.activeIndex;e.slides.eq(a).hasClass(e.params.slideDuplicateClass)&&(e.loopFix(),e._clientLeft=e.$wrapperEl[0].clientLeft,a=e.activeIndex);var s=e.slides.eq(a).prevAll('[data-swiper-slide-index="'+r+'"]').eq(0).index(),o=e.slides.eq(a).nextAll('[data-swiper-slide-index="'+r+'"]').eq(0).index();r=void 0===s?o:void 0===o?s:o-a<a-s?o:s}e.slideTo(r)}}},update:function(e){var t=this,n=t.thumbs.swiper;if(n){var i="auto"===n.params.slidesPerView?n.slidesPerViewDynamic():n.params.slidesPerView,r=t.params.thumbs.autoScrollOffset,a=r&&!n.params.loop;if(t.realIndex!==n.realIndex||a){var s,o,l=n.activeIndex;if(n.params.loop){n.slides.eq(l).hasClass(n.params.slideDuplicateClass)&&(n.loopFix(),n._clientLeft=n.$wrapperEl[0].clientLeft,l=n.activeIndex);var c=n.slides.eq(l).prevAll('[data-swiper-slide-index="'+t.realIndex+'"]').eq(0).index(),d=n.slides.eq(l).nextAll('[data-swiper-slide-index="'+t.realIndex+'"]').eq(0).index();s=void 0===c?d:void 0===d?c:d-l==l-c?l:d-l<l-c?d:c,o=t.activeIndex>t.previousIndex?"next":"prev"}else o=(s=t.realIndex)>t.previousIndex?"next":"prev";a&&(s+="next"===o?r:-1*r),n.visibleSlidesIndexes&&n.visibleSlidesIndexes.indexOf(s)<0&&(n.params.centeredSlides?s=s>l?s-Math.floor(i/2)+1:s+Math.floor(i/2)-1:s>l&&(s=s-i+1),n.slideTo(s,e?0:void 0))}var u=1,p=t.params.thumbs.slideThumbActiveClass;if(t.params.slidesPerView>1&&!t.params.centeredSlides&&(u=t.params.slidesPerView),t.params.thumbs.multipleActiveThumbs||(u=1),u=Math.floor(u),n.slides.removeClass(p),n.params.loop||n.params.virtual&&n.params.virtual.enabled)for(var h=0;h<u;h+=1)n.$wrapperEl.children('[data-swiper-slide-index="'+(t.realIndex+h)+'"]').addClass(p);else for(var f=0;f<u;f+=1)n.slides.eq(t.realIndex+f).addClass(p)}}},he=[X,K,{name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:"container",thresholdDelta:null,thresholdTime:null}},create:function(){L(this,{mousewheel:{enabled:!1,lastScrollTime:S(),lastEventBeforeSnap:void 0,recentWheelEvents:[],enable:U.enable,disable:U.disable,handle:U.handle,handleMouseEnter:U.handleMouseEnter,handleMouseLeave:U.handleMouseLeave,animateSlider:U.animateSlider,releaseScroll:U.releaseScroll}})},on:{init:function(e){!e.params.mousewheel.enabled&&e.params.cssMode&&e.mousewheel.disable(),e.params.mousewheel.enabled&&e.mousewheel.enable()},destroy:function(e){e.params.cssMode&&e.mousewheel.enable(),e.mousewheel.enabled&&e.mousewheel.disable()}}},{name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create:function(){L(this,{navigation:n({},J)})},on:{init:function(e){e.navigation.init(),e.navigation.update()},toEdge:function(e){e.navigation.update()},fromEdge:function(e){e.navigation.update()},destroy:function(e){e.navigation.destroy()},click:function(e,t){var n,i=e.navigation,r=i.$nextEl,a=i.$prevEl;!e.params.navigation.hideOnClick||g(t.target).is(a)||g(t.target).is(r)||(r?n=r.hasClass(e.params.navigation.hiddenClass):a&&(n=a.hasClass(e.params.navigation.hiddenClass)),!0===n?e.emit("navigationShow"):e.emit("navigationHide"),r&&r.toggleClass(e.params.navigation.hiddenClass),a&&a.toggleClass(e.params.navigation.hiddenClass))}}},{name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:function(e){return e},formatFractionTotal:function(e){return e},bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create:function(){L(this,{pagination:n({dynamicBulletIndex:0},Q)})},on:{init:function(e){e.pagination.init(),e.pagination.render(),e.pagination.update()},activeIndexChange:function(e){(e.params.loop||void 0===e.snapIndex)&&e.pagination.update()},snapIndexChange:function(e){e.params.loop||e.pagination.update()},slidesLengthChange:function(e){e.params.loop&&(e.pagination.render(),e.pagination.update())},snapGridLengthChange:function(e){e.params.loop||(e.pagination.render(),e.pagination.update())},destroy:function(e){e.pagination.destroy()},click:function(e,t){e.params.pagination.el&&e.params.pagination.hideOnClick&&e.pagination.$el.length>0&&!g(t.target).hasClass(e.params.pagination.bulletClass)&&(!0===e.pagination.$el.hasClass(e.params.pagination.hiddenClass)?e.emit("paginationShow"):e.emit("paginationHide"),e.pagination.$el.toggleClass(e.params.pagination.hiddenClass))}}},{name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create:function(){L(this,{scrollbar:n({isTouched:!1,timeout:null,dragTimeout:null},Z)})},on:{init:function(e){e.scrollbar.init(),e.scrollbar.updateSize(),e.scrollbar.setTranslate()},update:function(e){e.scrollbar.updateSize()},resize:function(e){e.scrollbar.updateSize()},observerUpdate:function(e){e.scrollbar.updateSize()},setTranslate:function(e){e.scrollbar.setTranslate()},setTransition:function(e,t){e.scrollbar.setTransition(t)},destroy:function(e){e.scrollbar.destroy()}}},{name:"parallax",params:{parallax:{enabled:!1}},create:function(){L(this,{parallax:n({},ee)})},on:{beforeInit:function(e){e.params.parallax.enabled&&(e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},init:function(e){e.params.parallax.enabled&&e.parallax.setTranslate()},setTranslate:function(e){e.params.parallax.enabled&&e.parallax.setTranslate()},setTransition:function(e,t){e.params.parallax.enabled&&e.parallax.setTransition(t)}}},{name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create:function(){var e=this;L(e,{zoom:n({enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}},te)});var t=1;Object.defineProperty(e.zoom,"scale",{get:function(){return t},set:function(n){if(t!==n){var i=e.zoom.gesture.$imageEl?e.zoom.gesture.$imageEl[0]:void 0,r=e.zoom.gesture.$slideEl?e.zoom.gesture.$slideEl[0]:void 0;e.emit("zoomChange",n,i,r)}t=n}})},on:{init:function(e){e.params.zoom.enabled&&e.zoom.enable()},destroy:function(e){e.zoom.disable()},touchStart:function(e,t){e.zoom.enabled&&e.zoom.onTouchStart(t)},touchEnd:function(e,t){e.zoom.enabled&&e.zoom.onTouchEnd(t)},doubleTap:function(e,t){e.params.zoom.enabled&&e.zoom.enabled&&e.params.zoom.toggle&&e.zoom.toggle(t)},transitionEnd:function(e){e.zoom.enabled&&e.params.zoom.enabled&&e.zoom.onTransitionEnd()},slideChange:function(e){e.zoom.enabled&&e.params.zoom.enabled&&e.params.cssMode&&e.zoom.onTransitionEnd()}}},{name:"lazy",params:{lazy:{checkInView:!1,enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,scrollingElement:"",elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create:function(){L(this,{lazy:n({initialImageLoaded:!1},ne)})},on:{beforeInit:function(e){e.params.lazy.enabled&&e.params.preloadImages&&(e.params.preloadImages=!1)},init:function(e){e.params.lazy.enabled&&!e.params.loop&&0===e.params.initialSlide&&(e.params.lazy.checkInView?e.lazy.checkInViewOnLoad():e.lazy.load())},scroll:function(e){e.params.freeMode&&!e.params.freeModeSticky&&e.lazy.load()},resize:function(e){e.params.lazy.enabled&&e.lazy.load()},scrollbarDragMove:function(e){e.params.lazy.enabled&&e.lazy.load()},transitionStart:function(e){e.params.lazy.enabled&&(e.params.lazy.loadOnTransitionStart||!e.params.lazy.loadOnTransitionStart&&!e.lazy.initialImageLoaded)&&e.lazy.load()},transitionEnd:function(e){e.params.lazy.enabled&&!e.params.lazy.loadOnTransitionStart&&e.lazy.load()},slideChange:function(e){e.params.lazy.enabled&&e.params.cssMode&&e.lazy.load()}}},{name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create:function(){L(this,{controller:n({control:this.params.controller.control},ie)})},on:{update:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},resize:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},observerUpdate:function(e){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},setTranslate:function(e,t,n){e.controller.control&&e.controller.setTranslate(t,n)},setTransition:function(e,t,n){e.controller.control&&e.controller.setTransition(t,n)}}},{name:"a11y",params:{a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",containerMessage:null,containerRoleDescriptionMessage:null,itemRoleDescriptionMessage:null}},create:function(){L(this,{a11y:n({},re,{liveRegion:g('<span class="'+this.params.a11y.notificationClass+'" aria-live="assertive" aria-atomic="true"></span>')})})},on:{afterInit:function(e){e.params.a11y.enabled&&(e.a11y.init(),e.a11y.updateNavigation())},toEdge:function(e){e.params.a11y.enabled&&e.a11y.updateNavigation()},fromEdge:function(e){e.params.a11y.enabled&&e.a11y.updateNavigation()},paginationUpdate:function(e){e.params.a11y.enabled&&e.a11y.updatePagination()},destroy:function(e){e.params.a11y.enabled&&e.a11y.destroy()}}},{name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create:function(){L(this,{history:n({},ae)})},on:{init:function(e){e.params.history.enabled&&e.history.init()},destroy:function(e){e.params.history.enabled&&e.history.destroy()},transitionEnd:function(e){e.history.initialized&&e.history.setHistory(e.params.history.key,e.activeIndex)},slideChange:function(e){e.history.initialized&&e.params.cssMode&&e.history.setHistory(e.params.history.key,e.activeIndex)}}},{name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create:function(){L(this,{hashNavigation:n({initialized:!1},se)})},on:{init:function(e){e.params.hashNavigation.enabled&&e.hashNavigation.init()},destroy:function(e){e.params.hashNavigation.enabled&&e.hashNavigation.destroy()},transitionEnd:function(e){e.hashNavigation.initialized&&e.hashNavigation.setHash()},slideChange:function(e){e.hashNavigation.initialized&&e.params.cssMode&&e.hashNavigation.setHash()}}},{name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create:function(){L(this,{autoplay:n({},oe,{running:!1,paused:!1})})},on:{init:function(e){e.params.autoplay.enabled&&(e.autoplay.start(),s().addEventListener("visibilitychange",e.autoplay.onVisibilityChange))},beforeTransitionStart:function(e,t,n){e.autoplay.running&&(n||!e.params.autoplay.disableOnInteraction?e.autoplay.pause(t):e.autoplay.stop())},sliderFirstMove:function(e){e.autoplay.running&&(e.params.autoplay.disableOnInteraction?e.autoplay.stop():e.autoplay.pause())},touchEnd:function(e){e.params.cssMode&&e.autoplay.paused&&!e.params.autoplay.disableOnInteraction&&e.autoplay.run()},destroy:function(e){e.autoplay.running&&e.autoplay.stop(),s().removeEventListener("visibilitychange",e.autoplay.onVisibilityChange)}}},{name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create:function(){L(this,{fadeEffect:n({},le)})},on:{beforeInit:function(e){if("fade"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"fade");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};_(e.params,t),_(e.originalParams,t)}},setTranslate:function(e){"fade"===e.params.effect&&e.fadeEffect.setTranslate()},setTransition:function(e,t){"fade"===e.params.effect&&e.fadeEffect.setTransition(t)}}},{name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create:function(){L(this,{cubeEffect:n({},ce)})},on:{beforeInit:function(e){if("cube"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"cube"),e.classNames.push(e.params.containerModifierClass+"3d");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0};_(e.params,t),_(e.originalParams,t)}},setTranslate:function(e){"cube"===e.params.effect&&e.cubeEffect.setTranslate()},setTransition:function(e,t){"cube"===e.params.effect&&e.cubeEffect.setTransition(t)}}},{name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create:function(){L(this,{flipEffect:n({},de)})},on:{beforeInit:function(e){if("flip"===e.params.effect){e.classNames.push(e.params.containerModifierClass+"flip"),e.classNames.push(e.params.containerModifierClass+"3d");var t={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};_(e.params,t),_(e.originalParams,t)}},setTranslate:function(e){"flip"===e.params.effect&&e.flipEffect.setTranslate()},setTransition:function(e,t){"flip"===e.params.effect&&e.flipEffect.setTransition(t)}}},{name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}},create:function(){L(this,{coverflowEffect:n({},ue)})},on:{beforeInit:function(e){"coverflow"===e.params.effect&&(e.classNames.push(e.params.containerModifierClass+"coverflow"),e.classNames.push(e.params.containerModifierClass+"3d"),e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)},setTranslate:function(e){"coverflow"===e.params.effect&&e.coverflowEffect.setTranslate()},setTransition:function(e,t){"coverflow"===e.params.effect&&e.coverflowEffect.setTransition(t)}}},{name:"thumbs",params:{thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-container-thumbs"}},create:function(){L(this,{thumbs:n({swiper:null,initialized:!1},pe)})},on:{beforeInit:function(e){var t=e.params.thumbs;t&&t.swiper&&(e.thumbs.init(),e.thumbs.update(!0))},slideChange:function(e){e.thumbs.swiper&&e.thumbs.update()},update:function(e){e.thumbs.swiper&&e.thumbs.update()},resize:function(e){e.thumbs.swiper&&e.thumbs.update()},observerUpdate:function(e){e.thumbs.swiper&&e.thumbs.update()},setTransition:function(e,t){var n=e.thumbs.swiper;n&&n.setTransition(t)},beforeDestroy:function(e){var t=e.thumbs.swiper;t&&e.thumbs.swiperCreated&&t&&t.destroy()}}}];return W.use(he),W})),window.Choices=function(t){var n={};function i(e){if(n[e])return n[e].exports;var r=n[e]={i:e,l:!1,exports:{}};return t[e].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=t,i.c=n,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(t,n){if(1&n&&(t=i(t)),8&n)return t;if(4&n&&"object"==e(t)&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var a in t)i.d(r,a,function(e){return t[e]}.bind(null,a));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="/public/assets/scripts/",i(i.s=4)}([function(t,n,i){var r=function(t){return function(t){return!!t&&"object"==e(t)}(t)&&!function(e){var t=Object.prototype.toString.call(e);return"[object RegExp]"===t||"[object Date]"===t||function(e){return e.$$typeof===a}(e)}(t)},a="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function s(e,t){return!1!==t.clone&&t.isMergeableObject(e)?c((n=e,Array.isArray(n)?[]:{}),e,t):e;var n}function o(e,t,n){return e.concat(t).map((function(e){return s(e,n)}))}function l(e){return Object.keys(e).concat(function(e){return Object.getOwnPropertySymbols?Object.getOwnPropertySymbols(e).filter((function(t){return e.propertyIsEnumerable(t)})):[]}(e))}function c(e,t,n){(n=n||{}).arrayMerge=n.arrayMerge||o,n.isMergeableObject=n.isMergeableObject||r,n.cloneUnlessOtherwiseSpecified=s;var i=Array.isArray(t);return i===Array.isArray(e)?i?n.arrayMerge(e,t,n):function(e,t,n){var i={};return n.isMergeableObject(e)&&l(e).forEach((function(t){i[t]=s(e[t],n)})),l(t).forEach((function(r){(function(e,t){try{return t in e&&!(Object.hasOwnProperty.call(e,t)&&Object.propertyIsEnumerable.call(e,t))}catch(e){return!1}})(e,r)||(n.isMergeableObject(t[r])&&e[r]?i[r]=function(e,t){if(!t.customMerge)return c;var n=t.customMerge(e);return"function"==typeof n?n:c}(r,n)(e[r],t[r],n):i[r]=s(t[r],n))})),i}(e,t,n):s(t,n)}c.all=function(e,t){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce((function(e,n){return c(e,n,t)}),{})};var d=c;t.exports=d},function(e,t,n){(function(e,i){var r,a=n(3);r="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:i;var s=Object(a.a)(r);t.a=s}).call(this,n(5),n(6)(e))},function(t,n,i){
/*!
   * Fuse.js v3.4.5 - Lightweight fuzzy-search (http://fusejs.io)
   * 
   * Copyright (c) 2012-2017 Kirollos Risk (http://kiro.me)
   * All Rights Reserved. Apache Software License 2.0
   * 
   * http://www.apache.org/licenses/LICENSE-2.0
   */
t.exports=function(t){var n={};function i(e){if(n[e])return n[e].exports;var r=n[e]={i:e,l:!1,exports:{}};return t[e].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=t,i.c=n,i.d=function(e,t,n){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(t,n){if(1&n&&(t=i(t)),8&n)return t;if(4&n&&"object"==e(t)&&t&&t.__esModule)return t;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var a in t)i.d(r,a,function(e){return t[e]}.bind(null,a));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=1)}([function(e,t){e.exports=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===Object.prototype.toString.call(e)}},function(t,n,i){function r(t){return(r="function"==typeof Symbol&&"symbol"==e(Symbol.iterator)?function(t){return e(t)}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":e(t)})(t)}var a=i(2),s=i(8),o=i(0),l=function(){function e(t,n){var i=n.location,r=void 0===i?0:i,a=n.distance,o=void 0===a?100:a,l=n.threshold,c=void 0===l?.6:l,d=n.maxPatternLength,u=void 0===d?32:d,p=n.caseSensitive,h=void 0!==p&&p,f=n.tokenSeparator,m=void 0===f?/ +/g:f,v=n.findAllMatches,g=void 0!==v&&v,y=n.minMatchCharLength,b=void 0===y?1:y,w=n.id,E=void 0===w?null:w,x=n.keys,S=void 0===x?[]:x,T=n.shouldSort,C=void 0===T||T,_=n.getFn,L=void 0===_?s:_,k=n.sortFn,M=void 0===k?function(e,t){return e.score-t.score}:k,A=n.tokenize,O=void 0!==A&&A,I=n.matchAllTokens,P=void 0!==I&&I,D=n.includeMatches,N=void 0!==D&&D,j=n.includeScore,z=void 0!==j&&j,q=n.verbose,H=void 0!==q&&q;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.options={location:r,distance:o,threshold:c,maxPatternLength:u,isCaseSensitive:h,tokenSeparator:m,findAllMatches:g,minMatchCharLength:b,id:E,keys:S,includeMatches:N,includeScore:z,shouldSort:C,getFn:L,sortFn:M,verbose:H,tokenize:O,matchAllTokens:P},this.setCollection(t)}var t;return(t=[{key:"setCollection",value:function(e){return this.list=e,e}},{key:"search",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{limit:!1};this._log('---------\nSearch pattern: "'.concat(e,'"'));var n=this._prepareSearchers(e),i=n.tokenSearchers,r=n.fullSearcher,a=this._search(i,r),s=a.weights,o=a.results;return this._computeScore(s,o),this.options.shouldSort&&this._sort(o),t.limit&&"number"==typeof t.limit&&(o=o.slice(0,t.limit)),this._format(o)}},{key:"_prepareSearchers",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=[];if(this.options.tokenize)for(var n=e.split(this.options.tokenSeparator),i=0,r=n.length;i<r;i+=1)t.push(new a(n[i],this.options));return{tokenSearchers:t,fullSearcher:new a(e,this.options)}}},{key:"_search",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1?arguments[1]:void 0,n=this.list,i={},r=[];if("string"==typeof n[0]){for(var a=0,s=n.length;a<s;a+=1)this._analyze({key:"",value:n[a],record:a,index:a},{resultMap:i,results:r,tokenSearchers:e,fullSearcher:t});return{weights:null,results:r}}for(var o={},l=0,c=n.length;l<c;l+=1)for(var d=n[l],u=0,p=this.options.keys.length;u<p;u+=1){var h=this.options.keys[u];if("string"!=typeof h){if(o[h.name]={weight:1-h.weight||1},h.weight<=0||h.weight>1)throw new Error("Key weight has to be > 0 and <= 1");h=h.name}else o[h]={weight:1};this._analyze({key:h,value:this.options.getFn(d,h),record:d,index:l},{resultMap:i,results:r,tokenSearchers:e,fullSearcher:t})}return{weights:o,results:r}}},{key:"_analyze",value:function(e,t){var n=e.key,i=e.arrayIndex,r=void 0===i?-1:i,a=e.value,s=e.record,l=e.index,c=t.tokenSearchers,d=void 0===c?[]:c,u=t.fullSearcher,p=void 0===u?[]:u,h=t.resultMap,f=void 0===h?{}:h,m=t.results,v=void 0===m?[]:m;if(null!=a){var g=!1,y=-1,b=0;if("string"==typeof a){this._log("\nKey: ".concat(""===n?"-":n));var w=p.search(a);if(this._log('Full text: "'.concat(a,'", score: ').concat(w.score)),this.options.tokenize){for(var E=a.split(this.options.tokenSeparator),x=[],S=0;S<d.length;S+=1){var T=d[S];this._log('\nPattern: "'.concat(T.pattern,'"'));for(var C=!1,_=0;_<E.length;_+=1){var L=E[_],k=T.search(L),M={};k.isMatch?(M[L]=k.score,g=!0,C=!0,x.push(k.score)):(M[L]=1,this.options.matchAllTokens||x.push(1)),this._log('Token: "'.concat(L,'", score: ').concat(M[L]))}C&&(b+=1)}y=x[0];for(var A=x.length,O=1;O<A;O+=1)y+=x[O];y/=A,this._log("Token score average:",y)}var I=w.score;y>-1&&(I=(I+y)/2),this._log("Score average:",I);var P=!this.options.tokenize||!this.options.matchAllTokens||b>=d.length;if(this._log("\nCheck Matches: ".concat(P)),(g||w.isMatch)&&P){var D=f[l];D?D.output.push({key:n,arrayIndex:r,value:a,score:I,matchedIndices:w.matchedIndices}):(f[l]={item:s,output:[{key:n,arrayIndex:r,value:a,score:I,matchedIndices:w.matchedIndices}]},v.push(f[l]))}}else if(o(a))for(var N=0,j=a.length;N<j;N+=1)this._analyze({key:n,arrayIndex:N,value:a[N],record:s,index:l},{resultMap:f,results:v,tokenSearchers:d,fullSearcher:p})}}},{key:"_computeScore",value:function(e,t){this._log("\n\nComputing score:\n");for(var n=0,i=t.length;n<i;n+=1){for(var r=t[n].output,a=r.length,s=1,o=1,l=0;l<a;l+=1){var c=e?e[r[l].key].weight:1,d=(1===c?r[l].score:r[l].score||.001)*c;1!==c?o=Math.min(o,d):(r[l].nScore=d,s*=d)}t[n].score=1===o?s:o,this._log(t[n])}}},{key:"_sort",value:function(e){this._log("\n\nSorting...."),e.sort(this.options.sortFn)}},{key:"_format",value:function(e){var t=[];if(this.options.verbose){var n=[];this._log("\n\nOutput:\n\n",JSON.stringify(e,(function(e,t){if("object"===r(t)&&null!==t){if(-1!==n.indexOf(t))return;n.push(t)}return t}))),n=null}var i=[];this.options.includeMatches&&i.push((function(e,t){var n=e.output;t.matches=[];for(var i=0,r=n.length;i<r;i+=1){var a=n[i];if(0!==a.matchedIndices.length){var s={indices:a.matchedIndices,value:a.value};a.key&&(s.key=a.key),a.hasOwnProperty("arrayIndex")&&a.arrayIndex>-1&&(s.arrayIndex=a.arrayIndex),t.matches.push(s)}}})),this.options.includeScore&&i.push((function(e,t){t.score=e.score}));for(var a=0,s=e.length;a<s;a+=1){var o=e[a];if(this.options.id&&(o.item=this.options.getFn(o.item,this.options.id)[0]),i.length){for(var l={item:o.item},c=0,d=i.length;c<d;c+=1)i[c](o,l);t.push(l)}else t.push(o.item)}return t}},{key:"_log",value:function(){var e;this.options.verbose&&(e=console).log.apply(e,arguments)}}])&&function(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}(e.prototype,t),e}();t.exports=l},function(e,t,n){var i=n(3),r=n(4),a=n(7),s=function(){function e(t,n){var i=n.location,r=void 0===i?0:i,s=n.distance,o=void 0===s?100:s,l=n.threshold,c=void 0===l?.6:l,d=n.maxPatternLength,u=void 0===d?32:d,p=n.isCaseSensitive,h=void 0!==p&&p,f=n.tokenSeparator,m=void 0===f?/ +/g:f,v=n.findAllMatches,g=void 0!==v&&v,y=n.minMatchCharLength,b=void 0===y?1:y;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.options={location:r,distance:o,threshold:c,maxPatternLength:u,isCaseSensitive:h,tokenSeparator:m,findAllMatches:g,minMatchCharLength:b},this.pattern=this.options.isCaseSensitive?t:t.toLowerCase(),this.pattern.length<=u&&(this.patternAlphabet=a(this.pattern))}var t;return(t=[{key:"search",value:function(e){if(this.options.isCaseSensitive||(e=e.toLowerCase()),this.pattern===e)return{isMatch:!0,score:0,matchedIndices:[[0,e.length-1]]};var t=this.options,n=t.maxPatternLength,a=t.tokenSeparator;if(this.pattern.length>n)return i(e,this.pattern,a);var s=this.options,o=s.location,l=s.distance,c=s.threshold,d=s.findAllMatches,u=s.minMatchCharLength;return r(e,this.pattern,this.patternAlphabet,{location:o,distance:l,threshold:c,findAllMatches:d,minMatchCharLength:u})}}])&&function(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}(e.prototype,t),e}();e.exports=s},function(e,t){var n=/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g;e.exports=function(e,t){var i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:/ +/g,r=new RegExp(t.replace(n,"\\$&").replace(i,"|")),a=e.match(r),s=!!a,o=[];if(s)for(var l=0,c=a.length;l<c;l+=1){var d=a[l];o.push([e.indexOf(d),d.length-1])}return{score:s?.5:1,isMatch:s,matchedIndices:o}}},function(e,t,n){var i=n(5),r=n(6);e.exports=function(e,t,n,a){for(var s=a.location,o=void 0===s?0:s,l=a.distance,c=void 0===l?100:l,d=a.threshold,u=void 0===d?.6:d,p=a.findAllMatches,h=void 0!==p&&p,f=a.minMatchCharLength,m=void 0===f?1:f,v=o,g=e.length,y=u,b=e.indexOf(t,v),w=t.length,E=[],x=0;x<g;x+=1)E[x]=0;if(-1!==b){var S=i(t,{errors:0,currentLocation:b,expectedLocation:v,distance:c});if(y=Math.min(S,y),-1!==(b=e.lastIndexOf(t,v+w))){var T=i(t,{errors:0,currentLocation:b,expectedLocation:v,distance:c});y=Math.min(T,y)}}b=-1;for(var C=[],_=1,L=w+g,k=1<<w-1,M=0;M<w;M+=1){for(var A=0,O=L;A<O;)i(t,{errors:M,currentLocation:v+O,expectedLocation:v,distance:c})<=y?A=O:L=O,O=Math.floor((L-A)/2+A);L=O;var I=Math.max(1,v-O+1),P=h?g:Math.min(v+O,g)+w,D=Array(P+2);D[P+1]=(1<<M)-1;for(var N=P;N>=I;N-=1){var j=N-1,z=n[e.charAt(j)];if(z&&(E[j]=1),D[N]=(D[N+1]<<1|1)&z,0!==M&&(D[N]|=(C[N+1]|C[N])<<1|1|C[N+1]),D[N]&k&&(_=i(t,{errors:M,currentLocation:j,expectedLocation:v,distance:c}))<=y){if(y=_,(b=j)<=v)break;I=Math.max(1,2*v-b)}}if(i(t,{errors:M+1,currentLocation:v,expectedLocation:v,distance:c})>y)break;C=D}return{isMatch:b>=0,score:0===_?.001:_,matchedIndices:r(E,m)}}},function(e,t){e.exports=function(e,t){var n=t.errors,i=void 0===n?0:n,r=t.currentLocation,a=void 0===r?0:r,s=t.expectedLocation,o=void 0===s?0:s,l=t.distance,c=void 0===l?100:l,d=i/e.length,u=Math.abs(o-a);return c?d+u/c:u?1:d}},function(e,t){e.exports=function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=[],i=-1,r=-1,a=0,s=e.length;a<s;a+=1){var o=e[a];o&&-1===i?i=a:o||-1===i||((r=a-1)-i+1>=t&&n.push([i,r]),i=-1)}return e[a-1]&&a-i>=t&&n.push([i,a-1]),n}},function(e,t){e.exports=function(e){for(var t={},n=e.length,i=0;i<n;i+=1)t[e.charAt(i)]=0;for(var r=0;r<n;r+=1)t[e.charAt(r)]|=1<<n-r-1;return t}},function(e,t,n){var i=n(0);e.exports=function(e,t){return function e(t,n,r){if(n){var a=n.indexOf("."),s=n,o=null;-1!==a&&(s=n.slice(0,a),o=n.slice(a+1));var l=t[s];if(null!=l)if(o||"string"!=typeof l&&"number"!=typeof l)if(i(l))for(var c=0,d=l.length;c<d;c+=1)e(l[c],o,r);else o&&e(l,o,r);else r.push(l.toString())}else r.push(t);return r}(e,t,[])}}])},function(e,t,n){function i(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return i}))},function(e,t,n){e.exports=n(7)},function(t,n){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(t){"object"==("undefined"==typeof window?"undefined":e(window))&&(i=window)}t.exports=i},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(t,n,i){i.r(n);var r=i(2),a=i.n(r),s=i(0),o=i.n(s),l=i(1),c=function(){return Math.random().toString(36).substring(7).split("").join(".")},d={INIT:"@@redux/INIT"+c(),REPLACE:"@@redux/REPLACE"+c(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+c()}};function u(t){if("object"!=e(t)||null===t)return!1;for(var n=t;null!==Object.getPrototypeOf(n);)n=Object.getPrototypeOf(n);return Object.getPrototypeOf(t)===n}function p(t,n,i){var r;if("function"==typeof n&&"function"==typeof i||"function"==typeof i&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof n&&void 0===i&&(i=n,n=void 0),void 0!==i){if("function"!=typeof i)throw new Error("Expected the enhancer to be a function.");return i(p)(t,n)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var a=t,s=n,o=[],c=o,h=!1;function f(){c===o&&(c=o.slice())}function m(){if(h)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return s}function v(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(h)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return f(),c.push(e),function(){if(t){if(h)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,f();var n=c.indexOf(e);c.splice(n,1)}}}function g(e){if(!u(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(h)throw new Error("Reducers may not dispatch actions.");try{h=!0,s=a(s,e)}finally{h=!1}for(var t=o=c,n=0;n<t.length;n++)(0,t[n])();return e}return g({type:d.INIT}),(r={dispatch:g,subscribe:v,getState:m,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");a=e,g({type:d.REPLACE})}})[l.a]=function(){var t,n=v;return(t={subscribe:function(t){if("object"!=e(t)||null===t)throw new TypeError("Expected the observer to be an object.");function i(){t.next&&t.next(m())}return i(),{unsubscribe:n(i)}}})[l.a]=function(){return this},t},r}function h(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}var f,m=[],v=[],g=[],y={loading:!1},b=function(e){return Array.from({length:e},(function(){return(0,36,Math.floor(36*Math.random()+0)).toString(36)})).join("")},w=function(e){return Object.prototype.toString.call(e).slice(8,-1)},E=function(e,t){return null!=t&&w(t)===e},x=function(e){return"string"!=typeof e?e:e.replace(/&/g,"&amp;").replace(/>/g,"&rt;").replace(/</g,"&lt;").replace(/"/g,"&quot;")},S=(f=document.createElement("div"),function(e){var t=e.trim();f.innerHTML=t;for(var n=f.children[0];f.firstChild;)f.removeChild(f.firstChild);return n}),T=function(e,t){return e.score-t.score},C=function(e){return JSON.parse(JSON.stringify(e))},_=function(e){for(var t=Object.keys(e),n={},i=0;i<t.length;i++){var r=t[i];"function"==typeof e[r]&&(n[r]=e[r])}var a,s=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:d.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:d.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+d.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var i=!1,r={},o=0;o<s.length;o++){var l=s[o],c=n[l],d=e[l],u=c(d,t);if(void 0===u){var p=h(l,t);throw new Error(p)}r[l]=u,i=i||u!==d}return i?r:e}}({items:function(e,t){switch(void 0===e&&(e=m),t.type){case"ADD_ITEM":return[].concat(e,[{id:t.id,choiceId:t.choiceId,groupId:t.groupId,value:t.value,label:t.label,active:!0,highlighted:!1,customProperties:t.customProperties,placeholder:t.placeholder||!1,keyCode:null}]).map((function(e){var t=e;return t.highlighted=!1,t}));case"REMOVE_ITEM":return e.map((function(e){var n=e;return n.id===t.id&&(n.active=!1),n}));case"HIGHLIGHT_ITEM":return e.map((function(e){var n=e;return n.id===t.id&&(n.highlighted=t.highlighted),n}));default:return e}},groups:function(e,t){switch(void 0===e&&(e=v),t.type){case"ADD_GROUP":return[].concat(e,[{id:t.id,value:t.value,active:t.active,disabled:t.disabled}]);case"CLEAR_CHOICES":return[];default:return e}},choices:function(e,t){switch(void 0===e&&(e=g),t.type){case"ADD_CHOICE":return[].concat(e,[{id:t.id,elementId:t.elementId,groupId:t.groupId,value:t.value,label:t.label||t.value,disabled:t.disabled||!1,selected:!1,active:!0,score:9999,customProperties:t.customProperties,placeholder:t.placeholder||!1,keyCode:null}]);case"ADD_ITEM":return t.activateOptions?e.map((function(e){var n=e;return n.active=t.active,n})):t.choiceId>-1?e.map((function(e){var n=e;return n.id===parseInt(t.choiceId,10)&&(n.selected=!0),n})):e;case"REMOVE_ITEM":return t.choiceId>-1?e.map((function(e){var n=e;return n.id===parseInt(t.choiceId,10)&&(n.selected=!1),n})):e;case"FILTER_CHOICES":return e.map((function(e){var n=e;return n.active=t.results.some((function(e){var t=e.item,i=e.score;return t.id===n.id&&(n.score=i,!0)})),n}));case"ACTIVATE_CHOICES":return e.map((function(e){var n=e;return n.active=t.active,n}));case"CLEAR_CHOICES":return g;default:return e}},general:function(e,t){switch(void 0===e&&(e=y),t.type){case"SET_IS_LOADING":return{loading:t.isLoading};default:return e}}}),L=function(e,t){var n=e;if("CLEAR_ALL"===t.type)n=void 0;else if("RESET_TO"===t.type)return C(t.state);return _(n,t)};function k(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var M=function(){function e(){this._store=p(L,window.__REDUX_DEVTOOLS_EXTENSION__&&window.__REDUX_DEVTOOLS_EXTENSION__())}var t,n,i=e.prototype;return i.subscribe=function(e){this._store.subscribe(e)},i.dispatch=function(e){this._store.dispatch(e)},i.isLoading=function(){return this.state.general.loading},i.getChoiceById=function(e){return this.activeChoices.find((function(t){return t.id===parseInt(e,10)}))},i.getGroupById=function(e){return this.groups.find((function(t){return t.id===e}))},t=e,(n=[{key:"state",get:function(){return this._store.getState()}},{key:"items",get:function(){return this.state.items}},{key:"activeItems",get:function(){return this.items.filter((function(e){return!0===e.active}))}},{key:"highlightedActiveItems",get:function(){return this.items.filter((function(e){return e.active&&e.highlighted}))}},{key:"choices",get:function(){return this.state.choices}},{key:"activeChoices",get:function(){return this.choices.filter((function(e){return!0===e.active}))}},{key:"selectableChoices",get:function(){return this.choices.filter((function(e){return!0!==e.disabled}))}},{key:"searchableChoices",get:function(){return this.selectableChoices.filter((function(e){return!0!==e.placeholder}))}},{key:"placeholderChoice",get:function(){return[].concat(this.choices).reverse().find((function(e){return!0===e.placeholder}))}},{key:"groups",get:function(){return this.state.groups}},{key:"activeGroups",get:function(){var e=this.groups,t=this.choices;return e.filter((function(e){var n=!0===e.active&&!1===e.disabled,i=t.some((function(e){return!0===e.active&&!1===e.disabled}));return n&&i}),[])}}])&&k(t.prototype,n),e}();function A(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var O=function(){function e(e){var t=e.element,n=e.type,i=e.classNames;this.element=t,this.classNames=i,this.type=n,this.isActive=!1}var t,n,i=e.prototype;return i.getChild=function(e){return this.element.querySelector(e)},i.show=function(){return this.element.classList.add(this.classNames.activeState),this.element.setAttribute("aria-expanded","true"),this.isActive=!0,this},i.hide=function(){return this.element.classList.remove(this.classNames.activeState),this.element.setAttribute("aria-expanded","false"),this.isActive=!1,this},t=e,(n=[{key:"distanceFromTopWindow",get:function(){return this.element.getBoundingClientRect().bottom}}])&&A(t.prototype,n),e}(),I={items:[],choices:[],silent:!1,renderChoiceLimit:-1,maxItemCount:-1,addItems:!0,addItemFilter:null,removeItems:!0,removeItemButton:!1,editItems:!1,duplicateItemsAllowed:!0,delimiter:",",paste:!0,searchEnabled:!0,searchChoices:!0,searchFloor:1,searchResultLimit:4,searchFields:["label","value"],position:"auto",resetScrollPosition:!0,shouldSort:!0,shouldSortItems:!1,sorter:function(e,t){var n=e.value,i=e.label,r=void 0===i?n:i,a=t.value,s=t.label,o=void 0===s?a:s;return r.localeCompare(o,[],{sensitivity:"base",ignorePunctuation:!0,numeric:!0})},placeholder:!0,placeholderValue:null,searchPlaceholderValue:null,prependValue:null,appendValue:null,renderSelectedChoices:"auto",loadingText:"Loading...",noResultsText:"No results found",noChoicesText:"No choices to choose from",itemSelectText:"Press to select",uniqueItemText:"Only unique values can be added",customAddItemText:"Only values matching specific conditions can be added",addItemText:function(e){return'Press Enter to add <b>"'+x(e)+'"</b>'},maxItemText:function(e){return"Only "+e+" values can be added"},valueComparer:function(e,t){return e===t},fuseOptions:{includeScore:!0},callbackOnInit:null,callbackOnCreateTemplates:null,classNames:{containerOuter:"choices",containerInner:"choices__inner",input:"choices__input",inputCloned:"choices__input--cloned",list:"choices__list",listItems:"choices__list--multiple",listSingle:"choices__list--single",listDropdown:"choices__list--dropdown",item:"choices__item",itemSelectable:"choices__item--selectable",itemDisabled:"choices__item--disabled",itemChoice:"choices__item--choice",placeholder:"choices__placeholder",group:"choices__group",groupHeading:"choices__heading",button:"choices__button",activeState:"is-active",focusState:"is-focused",openState:"is-open",disabledState:"is-disabled",highlightedState:"is-highlighted",selectedState:"is-selected",flippedState:"is-flipped",loadingState:"is-loading",noResults:"has-no-results",noChoices:"has-no-choices"}},P="removeItem",D="highlightItem",N="text",j="select-one",z="select-multiple",q=function(){function e(e){var t=e.element,n=e.type,i=e.classNames,r=e.position;this.element=t,this.classNames=i,this.type=n,this.position=r,this.isOpen=!1,this.isFlipped=!1,this.isFocussed=!1,this.isDisabled=!1,this.isLoading=!1,this._onFocus=this._onFocus.bind(this),this._onBlur=this._onBlur.bind(this)}var t=e.prototype;return t.addEventListeners=function(){this.element.addEventListener("focus",this._onFocus),this.element.addEventListener("blur",this._onBlur)},t.removeEventListeners=function(){this.element.removeEventListener("focus",this._onFocus),this.element.removeEventListener("blur",this._onBlur)},t.shouldFlip=function(e){if("number"!=typeof e)return!1;var t=!1;return"auto"===this.position?t=!window.matchMedia("(min-height: "+(e+1)+"px)").matches:"top"===this.position&&(t=!0),t},t.setActiveDescendant=function(e){this.element.setAttribute("aria-activedescendant",e)},t.removeActiveDescendant=function(){this.element.removeAttribute("aria-activedescendant")},t.open=function(e){this.element.classList.add(this.classNames.openState),this.element.setAttribute("aria-expanded","true"),this.isOpen=!0,this.shouldFlip(e)&&(this.element.classList.add(this.classNames.flippedState),this.isFlipped=!0)},t.close=function(){this.element.classList.remove(this.classNames.openState),this.element.setAttribute("aria-expanded","false"),this.removeActiveDescendant(),this.isOpen=!1,this.isFlipped&&(this.element.classList.remove(this.classNames.flippedState),this.isFlipped=!1)},t.focus=function(){this.isFocussed||this.element.focus()},t.addFocusState=function(){this.element.classList.add(this.classNames.focusState)},t.removeFocusState=function(){this.element.classList.remove(this.classNames.focusState)},t.enable=function(){this.element.classList.remove(this.classNames.disabledState),this.element.removeAttribute("aria-disabled"),this.type===j&&this.element.setAttribute("tabindex","0"),this.isDisabled=!1},t.disable=function(){this.element.classList.add(this.classNames.disabledState),this.element.setAttribute("aria-disabled","true"),this.type===j&&this.element.setAttribute("tabindex","-1"),this.isDisabled=!0},t.wrap=function(e){!function(e,t){void 0===t&&(t=document.createElement("div")),e.nextSibling?e.parentNode.insertBefore(t,e.nextSibling):e.parentNode.appendChild(t),t.appendChild(e)}(e,this.element)},t.unwrap=function(e){this.element.parentNode.insertBefore(e,this.element),this.element.parentNode.removeChild(this.element)},t.addLoadingState=function(){this.element.classList.add(this.classNames.loadingState),this.element.setAttribute("aria-busy","true"),this.isLoading=!0},t.removeLoadingState=function(){this.element.classList.remove(this.classNames.loadingState),this.element.removeAttribute("aria-busy"),this.isLoading=!1},t._onFocus=function(){this.isFocussed=!0},t._onBlur=function(){this.isFocussed=!1},e}();function H(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var $=function(){function e(e){var t=e.element,n=e.type,i=e.classNames,r=e.preventPaste;this.element=t,this.type=n,this.classNames=i,this.preventPaste=r,this.isFocussed=this.element===document.activeElement,this.isDisabled=t.disabled,this._onPaste=this._onPaste.bind(this),this._onInput=this._onInput.bind(this),this._onFocus=this._onFocus.bind(this),this._onBlur=this._onBlur.bind(this)}var t,n,i=e.prototype;return i.addEventListeners=function(){this.element.addEventListener("paste",this._onPaste),this.element.addEventListener("input",this._onInput,{passive:!0}),this.element.addEventListener("focus",this._onFocus,{passive:!0}),this.element.addEventListener("blur",this._onBlur,{passive:!0})},i.removeEventListeners=function(){this.element.removeEventListener("input",this._onInput,{passive:!0}),this.element.removeEventListener("paste",this._onPaste),this.element.removeEventListener("focus",this._onFocus,{passive:!0}),this.element.removeEventListener("blur",this._onBlur,{passive:!0})},i.enable=function(){this.element.removeAttribute("disabled"),this.isDisabled=!1},i.disable=function(){this.element.setAttribute("disabled",""),this.isDisabled=!0},i.focus=function(){this.isFocussed||this.element.focus()},i.blur=function(){this.isFocussed&&this.element.blur()},i.clear=function(e){return void 0===e&&(e=!0),this.element.value&&(this.element.value=""),e&&this.setWidth(),this},i.setWidth=function(){var e=this.element,t=e.style,n=e.value,i=e.placeholder;t.minWidth=i.length+1+"ch",t.width=n.length+1+"ch"},i.setActiveDescendant=function(e){this.element.setAttribute("aria-activedescendant",e)},i.removeActiveDescendant=function(){this.element.removeAttribute("aria-activedescendant")},i._onInput=function(){this.type!==j&&this.setWidth()},i._onPaste=function(e){this.preventPaste&&e.preventDefault()},i._onFocus=function(){this.isFocussed=!0},i._onBlur=function(){this.isFocussed=!1},t=e,(n=[{key:"placeholder",set:function(e){this.element.placeholder=e}},{key:"value",get:function(){return x(this.element.value)},set:function(e){this.element.value=e}}])&&H(t.prototype,n),e}(),B=function(){function e(e){var t=e.element;this.element=t,this.scrollPos=this.element.scrollTop,this.height=this.element.offsetHeight}var t=e.prototype;return t.clear=function(){this.element.innerHTML=""},t.append=function(e){this.element.appendChild(e)},t.getChild=function(e){return this.element.querySelector(e)},t.hasChildren=function(){return this.element.hasChildNodes()},t.scrollToTop=function(){this.element.scrollTop=0},t.scrollToChildElement=function(e,t){var n=this;if(e){var i=this.element.offsetHeight,r=this.element.scrollTop+i,a=e.offsetHeight,s=e.offsetTop+a,o=t>0?this.element.scrollTop+s-r:e.offsetTop;requestAnimationFrame((function(){n._animateScroll(o,t)}))}},t._scrollDown=function(e,t,n){var i=(n-e)/t,r=i>1?i:1;this.element.scrollTop=e+r},t._scrollUp=function(e,t,n){var i=(e-n)/t,r=i>1?i:1;this.element.scrollTop=e-r},t._animateScroll=function(e,t){var n=this,i=this.element.scrollTop,r=!1;t>0?(this._scrollDown(i,4,e),i<e&&(r=!0)):(this._scrollUp(i,4,e),i>e&&(r=!0)),r&&requestAnimationFrame((function(){n._animateScroll(e,t)}))},e}();function F(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var R=function(){function e(e){var t=e.element,n=e.classNames;if(this.element=t,this.classNames=n,!(t instanceof HTMLInputElement||t instanceof HTMLSelectElement))throw new TypeError("Invalid element passed");this.isDisabled=!1}var t,n,i=e.prototype;return i.conceal=function(){this.element.classList.add(this.classNames.input),this.element.hidden=!0,this.element.tabIndex=-1;var e=this.element.getAttribute("style");e&&this.element.setAttribute("data-choice-orig-style",e),this.element.setAttribute("data-choice","active")},i.reveal=function(){this.element.classList.remove(this.classNames.input),this.element.hidden=!1,this.element.removeAttribute("tabindex");var e=this.element.getAttribute("data-choice-orig-style");e?(this.element.removeAttribute("data-choice-orig-style"),this.element.setAttribute("style",e)):this.element.removeAttribute("style"),this.element.removeAttribute("data-choice"),this.element.value=this.element.value},i.enable=function(){this.element.removeAttribute("disabled"),this.element.disabled=!1,this.isDisabled=!1},i.disable=function(){this.element.setAttribute("disabled",""),this.element.disabled=!0,this.isDisabled=!0},i.triggerEvent=function(e,t){!function(e,t,n){void 0===n&&(n=null);var i=new CustomEvent(t,{detail:n,bubbles:!0,cancelable:!0});e.dispatchEvent(i)}(this.element,e,t)},t=e,(n=[{key:"isActive",get:function(){return"active"===this.element.dataset.choice}},{key:"dir",get:function(){return this.element.dir}},{key:"value",get:function(){return this.element.value},set:function(e){this.element.value=e}}])&&F(t.prototype,n),e}();function G(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var W=function(e){var t,n,i,r;function a(t){var n,i=t.element,r=t.classNames,a=t.delimiter;return(n=e.call(this,{element:i,classNames:r})||this).delimiter=a,n}return n=e,(t=a).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,i=a,(r=[{key:"value",get:function(){return this.element.value},set:function(e){var t=e.map((function(e){return e.value})).join(this.delimiter);this.element.setAttribute("value",t),this.element.value=t}}])&&G(i.prototype,r),a}(R);function V(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var X=function(e){var t,n,i,r;function a(t){var n,i=t.element,r=t.classNames,a=t.template;return(n=e.call(this,{element:i,classNames:r})||this).template=a,n}return n=e,(t=a).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,a.prototype.appendDocFragment=function(e){this.element.innerHTML="",this.element.appendChild(e)},i=a,(r=[{key:"placeholderOption",get:function(){return this.element.querySelector('option[value=""]')||this.element.querySelector("option[placeholder]")}},{key:"optionGroups",get:function(){return Array.from(this.element.getElementsByTagName("OPTGROUP"))}},{key:"options",get:function(){return Array.from(this.element.options)},set:function(e){var t=this,n=document.createDocumentFragment();e.forEach((function(e){return i=e,r=t.template(i),void n.appendChild(r);var i,r})),this.appendDocFragment(n)}}])&&V(i.prototype,r),a}(R),Y={containerOuter:function(e,t,n,i,r,a){var s=e.containerOuter,o=Object.assign(document.createElement("div"),{className:s});return o.dataset.type=a,t&&(o.dir=t),i&&(o.tabIndex=0),n&&(o.setAttribute("role",r?"combobox":"listbox"),r&&o.setAttribute("aria-autocomplete","list")),o.setAttribute("aria-haspopup","true"),o.setAttribute("aria-expanded","false"),o},containerInner:function(e){var t=e.containerInner;return Object.assign(document.createElement("div"),{className:t})},itemList:function(e,t){var n=e.list,i=e.listSingle,r=e.listItems;return Object.assign(document.createElement("div"),{className:n+" "+(t?i:r)})},placeholder:function(e,t){var n=e.placeholder;return Object.assign(document.createElement("div"),{className:n,innerHTML:t})},item:function(e,t,n){var i=e.item,r=e.button,a=e.highlightedState,s=e.itemSelectable,o=e.placeholder,l=t.id,c=t.value,d=t.label,u=t.customProperties,p=t.active,h=t.disabled,f=t.highlighted,m=t.placeholder,v=Object.assign(document.createElement("div"),{className:i,innerHTML:d});if(Object.assign(v.dataset,{item:"",id:l,value:c,customProperties:u}),p&&v.setAttribute("aria-selected","true"),h&&v.setAttribute("aria-disabled","true"),m&&v.classList.add(o),v.classList.add(f?a:s),n){h&&v.classList.remove(s),v.dataset.deletable="";var g=Object.assign(document.createElement("button"),{type:"button",className:r,innerHTML:"Remove item"});g.setAttribute("aria-label","Remove item: '"+c+"'"),g.dataset.button="",v.appendChild(g)}return v},choiceList:function(e,t){var n=e.list,i=Object.assign(document.createElement("div"),{className:n});return t||i.setAttribute("aria-multiselectable","true"),i.setAttribute("role","listbox"),i},choiceGroup:function(e,t){var n=e.group,i=e.groupHeading,r=e.itemDisabled,a=t.id,s=t.value,o=t.disabled,l=Object.assign(document.createElement("div"),{className:n+" "+(o?r:"")});return l.setAttribute("role","group"),Object.assign(l.dataset,{group:"",id:a,value:s}),o&&l.setAttribute("aria-disabled","true"),l.appendChild(Object.assign(document.createElement("div"),{className:i,innerHTML:s})),l},choice:function(e,t,n){var i=e.item,r=e.itemChoice,a=e.itemSelectable,s=e.selectedState,o=e.itemDisabled,l=e.placeholder,c=t.id,d=t.value,u=t.label,p=t.groupId,h=t.elementId,f=t.disabled,m=t.selected,v=t.placeholder,g=Object.assign(document.createElement("div"),{id:h,innerHTML:u,className:i+" "+r});return m&&g.classList.add(s),v&&g.classList.add(l),g.setAttribute("role",p>0?"treeitem":"option"),Object.assign(g.dataset,{choice:"",id:c,value:d,selectText:n}),f?(g.classList.add(o),g.dataset.choiceDisabled="",g.setAttribute("aria-disabled","true")):(g.classList.add(a),g.dataset.choiceSelectable=""),g},input:function(e,t){var n=e.input,i=e.inputCloned,r=Object.assign(document.createElement("input"),{type:"text",className:n+" "+i,autocomplete:"off",autocapitalize:"off",spellcheck:!1});return r.setAttribute("role","textbox"),r.setAttribute("aria-autocomplete","list"),r.setAttribute("aria-label",t),r},dropdown:function(e){var t=e.list,n=e.listDropdown,i=document.createElement("div");return i.classList.add(t,n),i.setAttribute("aria-expanded","false"),i},notice:function(e,t,n){var i=e.item,r=e.itemChoice,a=e.noResults,s=e.noChoices;void 0===n&&(n="");var o=[i,r];return"no-choices"===n?o.push(s):"no-results"===n&&o.push(a),Object.assign(document.createElement("div"),{innerHTML:t,className:o.join(" ")})},option:function(e){var t=e.label,n=e.value,i=e.customProperties,r=e.active,a=e.disabled,s=new Option(t,n,!1,r);return i&&(s.dataset.customProperties=i),s.disabled=a,s}},K=function(e){return void 0===e&&(e=!0),{type:"ACTIVATE_CHOICES",active:e}},U=function(e,t){return{type:"HIGHLIGHT_ITEM",id:e,highlighted:t}},J=function(e){return{type:"ADD_GROUP",value:e.value,id:e.id,active:e.active,disabled:e.disabled}},Q=function(e){return{type:"SET_IS_LOADING",isLoading:e}};function Z(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var ee="-ms-scroll-limit"in document.documentElement.style&&"-ms-ime-align"in document.documentElement.style,te={},ne=function(){var t,n;function i(e,t){var n=this;void 0===e&&(e="[data-choice]"),void 0===t&&(t={}),this.config=o.a.all([I,i.defaults.options,t],{arrayMerge:function(e,t){return[].concat(t)}});var r=function(e,t){var n=Object.keys(e).sort(),i=Object.keys(t).sort();return n.filter((function(e){return i.indexOf(e)<0}))}(this.config,I);r.length&&console.warn("Unknown config option(s) passed",r.join(", "));var a="string"==typeof e?document.querySelector(e):e;if(!(a instanceof HTMLInputElement||a instanceof HTMLSelectElement))throw TypeError("Expected one of the following types text|select-one|select-multiple");if(this._isTextElement=a.type===N,this._isSelectOneElement=a.type===j,this._isSelectMultipleElement=a.type===z,this._isSelectElement=this._isSelectOneElement||this._isSelectMultipleElement,this.config.searchEnabled=this._isSelectMultipleElement||this.config.searchEnabled,["auto","always"].includes(this.config.renderSelectedChoices)||(this.config.renderSelectedChoices="auto"),t.addItemFilter&&"function"!=typeof t.addItemFilter){var s=t.addItemFilter instanceof RegExp?t.addItemFilter:new RegExp(t.addItemFilter);this.config.addItemFilter=s.test.bind(s)}if(this._isTextElement?this.passedElement=new W({element:a,classNames:this.config.classNames,delimiter:this.config.delimiter}):this.passedElement=new X({element:a,classNames:this.config.classNames,template:function(e){return n._templates.option(e)}}),this.initialised=!1,this._store=new M,this._initialState={},this._currentState={},this._prevState={},this._currentValue="",this._canSearch=this.config.searchEnabled,this._isScrollingOnIe=!1,this._highlightPosition=0,this._wasTap=!0,this._placeholderValue=this._generatePlaceholderValue(),this._baseId=function(e,t){var n=e.id||e.name&&e.name+"-"+b(2)||b(4);return t+"-"+n.replace(/(:|\.|\[|\]|,)/g,"")}(this.passedElement.element,"choices-"),this._direction=this.passedElement.dir,!this._direction){var l=window.getComputedStyle(this.passedElement.element).direction;l!==window.getComputedStyle(document.documentElement).direction&&(this._direction=l)}if(this._idNames={itemChoice:"item-choice"},this._presetGroups=this.passedElement.optionGroups,this._presetOptions=this.passedElement.options,this._presetChoices=this.config.choices,this._presetItems=this.config.items,this.passedElement.value&&(this._presetItems=this._presetItems.concat(this.passedElement.value.split(this.config.delimiter))),this.passedElement.options&&this.passedElement.options.forEach((function(e){n._presetChoices.push({value:e.value,label:e.innerHTML,selected:e.selected,disabled:e.disabled||e.parentNode.disabled,placeholder:""===e.value||e.hasAttribute("placeholder"),customProperties:e.getAttribute("data-custom-properties")})})),this._render=this._render.bind(this),this._onFocus=this._onFocus.bind(this),this._onBlur=this._onBlur.bind(this),this._onKeyUp=this._onKeyUp.bind(this),this._onKeyDown=this._onKeyDown.bind(this),this._onClick=this._onClick.bind(this),this._onTouchMove=this._onTouchMove.bind(this),this._onTouchEnd=this._onTouchEnd.bind(this),this._onMouseDown=this._onMouseDown.bind(this),this._onMouseOver=this._onMouseOver.bind(this),this._onFormReset=this._onFormReset.bind(this),this._onAKey=this._onAKey.bind(this),this._onEnterKey=this._onEnterKey.bind(this),this._onEscapeKey=this._onEscapeKey.bind(this),this._onDirectionKey=this._onDirectionKey.bind(this),this._onDeleteKey=this._onDeleteKey.bind(this),this.passedElement.isActive)return this.config.silent||console.warn("Trying to initialise Choices on element already initialised"),void(this.initialised=!0);this.init()}t=i,n=[{key:"defaults",get:function(){return Object.preventExtensions({get options(){return te},get templates(){return Y}})}}],null&&Z(t.prototype,null),n&&Z(t,n);var r=i.prototype;return r.init=function(){if(!this.initialised){this._createTemplates(),this._createElements(),this._createStructure(),this._initialState=C(this._store.state),this._store.subscribe(this._render),this._render(),this._addEventListeners(),(!this.config.addItems||this.passedElement.element.hasAttribute("disabled"))&&this.disable(),this.initialised=!0;var e=this.config.callbackOnInit;e&&"function"==typeof e&&e.call(this)}},r.destroy=function(){this.initialised&&(this._removeEventListeners(),this.passedElement.reveal(),this.containerOuter.unwrap(this.passedElement.element),this.clearStore(),this._isSelectElement&&(this.passedElement.options=this._presetOptions),this._templates=null,this.initialised=!1)},r.enable=function(){return this.passedElement.isDisabled&&this.passedElement.enable(),this.containerOuter.isDisabled&&(this._addEventListeners(),this.input.enable(),this.containerOuter.enable()),this},r.disable=function(){return this.passedElement.isDisabled||this.passedElement.disable(),this.containerOuter.isDisabled||(this._removeEventListeners(),this.input.disable(),this.containerOuter.disable()),this},r.highlightItem=function(e,t){if(void 0===t&&(t=!0),!e)return this;var n=e.id,i=e.groupId,r=void 0===i?-1:i,a=e.value,s=void 0===a?"":a,o=e.label,l=void 0===o?"":o,c=r>=0?this._store.getGroupById(r):null;return this._store.dispatch(U(n,!0)),t&&this.passedElement.triggerEvent(D,{id:n,value:s,label:l,groupValue:c&&c.value?c.value:null}),this},r.unhighlightItem=function(e){if(!e)return this;var t=e.id,n=e.groupId,i=void 0===n?-1:n,r=e.value,a=void 0===r?"":r,s=e.label,o=void 0===s?"":s,l=i>=0?this._store.getGroupById(i):null;return this._store.dispatch(U(t,!1)),this.passedElement.triggerEvent(D,{id:t,value:a,label:o,groupValue:l&&l.value?l.value:null}),this},r.highlightAll=function(){var e=this;return this._store.items.forEach((function(t){return e.highlightItem(t)})),this},r.unhighlightAll=function(){var e=this;return this._store.items.forEach((function(t){return e.unhighlightItem(t)})),this},r.removeActiveItemsByValue=function(e){var t=this;return this._store.activeItems.filter((function(t){return t.value===e})).forEach((function(e){return t._removeItem(e)})),this},r.removeActiveItems=function(e){var t=this;return this._store.activeItems.filter((function(t){return t.id!==e})).forEach((function(e){return t._removeItem(e)})),this},r.removeHighlightedItems=function(e){var t=this;return void 0===e&&(e=!1),this._store.highlightedActiveItems.forEach((function(n){t._removeItem(n),e&&t._triggerChange(n.value)})),this},r.showDropdown=function(e){var t=this;return this.dropdown.isActive||requestAnimationFrame((function(){t.dropdown.show(),t.containerOuter.open(t.dropdown.distanceFromTopWindow),!e&&t._canSearch&&t.input.focus(),t.passedElement.triggerEvent("showDropdown",{})})),this},r.hideDropdown=function(e){var t=this;return this.dropdown.isActive?(requestAnimationFrame((function(){t.dropdown.hide(),t.containerOuter.close(),!e&&t._canSearch&&(t.input.removeActiveDescendant(),t.input.blur()),t.passedElement.triggerEvent("hideDropdown",{})})),this):this},r.getValue=function(e){void 0===e&&(e=!1);var t=this._store.activeItems.reduce((function(t,n){var i=e?n.value:n;return t.push(i),t}),[]);return this._isSelectOneElement?t[0]:t},r.setValue=function(e){var t=this;return this.initialised?(e.forEach((function(e){return t._setChoiceOrItem(e)})),this):this},r.setChoiceByValue=function(e){var t=this;return!this.initialised||this._isTextElement||(Array.isArray(e)?e:[e]).forEach((function(e){return t._findAndSelectChoiceByValue(e)})),this},r.setChoices=function(t,n,i,r){var a=this;if(void 0===t&&(t=[]),void 0===n&&(n="value"),void 0===i&&(i="label"),void 0===r&&(r=!1),!this.initialised)throw new ReferenceError("setChoices was called on a non-initialized instance of Choices");if(!this._isSelectElement)throw new TypeError("setChoices can't be used with INPUT based Choices");if("string"!=typeof n||!n)throw new TypeError("value parameter must be a name of 'value' field in passed objects");if(r&&this.clearChoices(),"function"==typeof t){var s=t(this);if("function"==typeof Promise&&s instanceof Promise)return new Promise((function(e){return requestAnimationFrame(e)})).then((function(){return a._handleLoadingState(!0)})).then((function(){return s})).then((function(e){return a.setChoices(e,n,i,r)})).catch((function(e){a.config.silent||console.error(e)})).then((function(){return a._handleLoadingState(!1)})).then((function(){return a}));if(!Array.isArray(s))throw new TypeError(".setChoices first argument function must return either array of choices or Promise, got: "+e(s));return this.setChoices(s,n,i,!1)}if(!Array.isArray(t))throw new TypeError(".setChoices must be called either with array of choices with a function resulting into Promise of array of choices");return this.containerOuter.removeLoadingState(),this._startLoading(),t.forEach((function(e){e.choices?a._addGroup({id:parseInt(e.id,10)||null,group:e,valueKey:n,labelKey:i}):a._addChoice({value:e[n],label:e[i],isSelected:e.selected,isDisabled:e.disabled,customProperties:e.customProperties,placeholder:e.placeholder})})),this._stopLoading(),this},r.clearChoices=function(){return this._store.dispatch({type:"CLEAR_CHOICES"}),this},r.clearStore=function(){return this._store.dispatch({type:"CLEAR_ALL"}),this},r.clearInput=function(){var e=!this._isSelectOneElement;return this.input.clear(e),!this._isTextElement&&this._canSearch&&(this._isSearching=!1,this._store.dispatch(K(!0))),this},r._render=function(){if(!this._store.isLoading()){this._currentState=this._store.state;var e=this._currentState.choices!==this._prevState.choices||this._currentState.groups!==this._prevState.groups||this._currentState.items!==this._prevState.items,t=this._isSelectElement,n=this._currentState.items!==this._prevState.items;e&&(t&&this._renderChoices(),n&&this._renderItems(),this._prevState=this._currentState)}},r._renderChoices=function(){var e=this,t=this._store,n=t.activeGroups,i=t.activeChoices,r=document.createDocumentFragment();if(this.choiceList.clear(),this.config.resetScrollPosition&&requestAnimationFrame((function(){return e.choiceList.scrollToTop()})),n.length>=1&&!this._isSearching){var a=i.filter((function(e){return!0===e.placeholder&&-1===e.groupId}));a.length>=1&&(r=this._createChoicesFragment(a,r)),r=this._createGroupsFragment(n,i,r)}else i.length>=1&&(r=this._createChoicesFragment(i,r));if(r.childNodes&&r.childNodes.length>0){var s=this._store.activeItems,o=this._canAddItem(s,this.input.value);o.response?(this.choiceList.append(r),this._highlightChoice()):this.choiceList.append(this._getTemplate("notice",o.notice))}else{var l,c;this._isSearching?(c="function"==typeof this.config.noResultsText?this.config.noResultsText():this.config.noResultsText,l=this._getTemplate("notice",c,"no-results")):(c="function"==typeof this.config.noChoicesText?this.config.noChoicesText():this.config.noChoicesText,l=this._getTemplate("notice",c,"no-choices")),this.choiceList.append(l)}},r._renderItems=function(){var e=this._store.activeItems||[];this.itemList.clear();var t=this._createItemsFragment(e);t.childNodes&&this.itemList.append(t)},r._createGroupsFragment=function(e,t,n){var i=this;return void 0===n&&(n=document.createDocumentFragment()),this.config.shouldSort&&e.sort(this.config.sorter),e.forEach((function(e){var r=function(e){return t.filter((function(t){return i._isSelectOneElement?t.groupId===e.id:t.groupId===e.id&&("always"===i.config.renderSelectedChoices||!t.selected)}))}(e);if(r.length>=1){var a=i._getTemplate("choiceGroup",e);n.appendChild(a),i._createChoicesFragment(r,n,!0)}})),n},r._createChoicesFragment=function(e,t,n){var i=this;void 0===t&&(t=document.createDocumentFragment()),void 0===n&&(n=!1);var r=this.config,a=r.renderSelectedChoices,s=r.searchResultLimit,o=r.renderChoiceLimit,l=this._isSearching?T:this.config.sorter,c=function(e){if("auto"!==a||i._isSelectOneElement||!e.selected){var n=i._getTemplate("choice",e,i.config.itemSelectText);t.appendChild(n)}},d=e;"auto"!==a||this._isSelectOneElement||(d=e.filter((function(e){return!e.selected})));var u=d.reduce((function(e,t){return t.placeholder?e.placeholderChoices.push(t):e.normalChoices.push(t),e}),{placeholderChoices:[],normalChoices:[]}),p=u.placeholderChoices,h=u.normalChoices;(this.config.shouldSort||this._isSearching)&&h.sort(l);var f=d.length,m=this._isSelectOneElement?[].concat(p,h):h;this._isSearching?f=s:o&&o>0&&!n&&(f=o);for(var v=0;v<f;v+=1)m[v]&&c(m[v]);return t},r._createItemsFragment=function(e,t){var n=this;void 0===t&&(t=document.createDocumentFragment());var i=this.config,r=i.shouldSortItems,a=i.sorter,s=i.removeItemButton;return r&&!this._isSelectOneElement&&e.sort(a),this._isTextElement?this.passedElement.value=e:this.passedElement.options=e,e.forEach((function(e){var i=n._getTemplate("item",e,s);t.appendChild(i)})),t},r._triggerChange=function(e){null!=e&&this.passedElement.triggerEvent("change",{value:e})},r._selectPlaceholderChoice=function(){var e=this._store.placeholderChoice;e&&(this._addItem({value:e.value,label:e.label,choiceId:e.id,groupId:e.groupId,placeholder:e.placeholder}),this._triggerChange(e.value))},r._handleButtonAction=function(e,t){if(e&&t&&this.config.removeItems&&this.config.removeItemButton){var n=t.parentNode.getAttribute("data-id"),i=e.find((function(e){return e.id===parseInt(n,10)}));this._removeItem(i),this._triggerChange(i.value),this._isSelectOneElement&&this._selectPlaceholderChoice()}},r._handleItemAction=function(e,t,n){var i=this;if(void 0===n&&(n=!1),e&&t&&this.config.removeItems&&!this._isSelectOneElement){var r=t.getAttribute("data-id");e.forEach((function(e){e.id!==parseInt(r,10)||e.highlighted?!n&&e.highlighted&&i.unhighlightItem(e):i.highlightItem(e)})),this.input.focus()}},r._handleChoiceAction=function(e,t){if(e&&t){var n=t.dataset.id,i=this._store.getChoiceById(n);if(i){var r=e[0]&&e[0].keyCode?e[0].keyCode:null,a=this.dropdown.isActive;i.keyCode=r,this.passedElement.triggerEvent("choice",{choice:i}),i.selected||i.disabled||this._canAddItem(e,i.value).response&&(this._addItem({value:i.value,label:i.label,choiceId:i.id,groupId:i.groupId,customProperties:i.customProperties,placeholder:i.placeholder,keyCode:i.keyCode}),this._triggerChange(i.value)),this.clearInput(),a&&this._isSelectOneElement&&(this.hideDropdown(!0),this.containerOuter.focus())}}},r._handleBackspace=function(e){if(this.config.removeItems&&e){var t=e[e.length-1],n=e.some((function(e){return e.highlighted}));this.config.editItems&&!n&&t?(this.input.value=t.value,this.input.setWidth(),this._removeItem(t),this._triggerChange(t.value)):(n||this.highlightItem(t,!1),this.removeHighlightedItems(!0))}},r._startLoading=function(){this._store.dispatch(Q(!0))},r._stopLoading=function(){this._store.dispatch(Q(!1))},r._handleLoadingState=function(e){void 0===e&&(e=!0);var t=this.itemList.getChild("."+this.config.classNames.placeholder);e?(this.disable(),this.containerOuter.addLoadingState(),this._isSelectOneElement?t?t.innerHTML=this.config.loadingText:(t=this._getTemplate("placeholder",this.config.loadingText),this.itemList.append(t)):this.input.placeholder=this.config.loadingText):(this.enable(),this.containerOuter.removeLoadingState(),this._isSelectOneElement?t.innerHTML=this._placeholderValue||"":this.input.placeholder=this._placeholderValue||"")},r._handleSearch=function(e){if(e&&this.input.isFocussed){var t=this._store.choices,n=this.config,i=n.searchFloor,r=n.searchChoices,a=t.some((function(e){return!e.active}));if(e&&e.length>=i){var s=r?this._searchChoices(e):0;this.passedElement.triggerEvent("search",{value:e,resultCount:s})}else a&&(this._isSearching=!1,this._store.dispatch(K(!0)))}},r._canAddItem=function(e,t){var n=!0,i="function"==typeof this.config.addItemText?this.config.addItemText(t):this.config.addItemText;if(!this._isSelectOneElement){var r=function(e,t,n){return void 0===n&&(n="value"),e.some((function(e){return"string"==typeof t?e[n]===t.trim():e[n]===t}))}(e,t);this.config.maxItemCount>0&&this.config.maxItemCount<=e.length&&(n=!1,i="function"==typeof this.config.maxItemText?this.config.maxItemText(this.config.maxItemCount):this.config.maxItemText),!this.config.duplicateItemsAllowed&&r&&n&&(n=!1,i="function"==typeof this.config.uniqueItemText?this.config.uniqueItemText(t):this.config.uniqueItemText),this._isTextElement&&this.config.addItems&&n&&"function"==typeof this.config.addItemFilter&&!this.config.addItemFilter(t)&&(n=!1,i="function"==typeof this.config.customAddItemText?this.config.customAddItemText(t):this.config.customAddItemText)}return{response:n,notice:i}},r._searchChoices=function(e){var t="string"==typeof e?e.trim():e,n="string"==typeof this._currentValue?this._currentValue.trim():this._currentValue;if(t.length<1&&t===n+" ")return 0;var i=this._store.searchableChoices,r=t,s=[].concat(this.config.searchFields),o=Object.assign(this.config.fuseOptions,{keys:s}),l=new a.a(i,o).search(r);return this._currentValue=t,this._highlightPosition=0,this._isSearching=!0,this._store.dispatch(function(e){return{type:"FILTER_CHOICES",results:e}}(l)),l.length},r._addEventListeners=function(){var e=document.documentElement;e.addEventListener("touchend",this._onTouchEnd,!0),this.containerOuter.element.addEventListener("keydown",this._onKeyDown,!0),this.containerOuter.element.addEventListener("mousedown",this._onMouseDown,!0),e.addEventListener("click",this._onClick,{passive:!0}),e.addEventListener("touchmove",this._onTouchMove,{passive:!0}),this.dropdown.element.addEventListener("mouseover",this._onMouseOver,{passive:!0}),this._isSelectOneElement&&(this.containerOuter.element.addEventListener("focus",this._onFocus,{passive:!0}),this.containerOuter.element.addEventListener("blur",this._onBlur,{passive:!0})),this.input.element.addEventListener("keyup",this._onKeyUp,{passive:!0}),this.input.element.addEventListener("focus",this._onFocus,{passive:!0}),this.input.element.addEventListener("blur",this._onBlur,{passive:!0}),this.input.element.form&&this.input.element.form.addEventListener("reset",this._onFormReset,{passive:!0}),this.input.addEventListeners()},r._removeEventListeners=function(){var e=document.documentElement;e.removeEventListener("touchend",this._onTouchEnd,!0),this.containerOuter.element.removeEventListener("keydown",this._onKeyDown,!0),this.containerOuter.element.removeEventListener("mousedown",this._onMouseDown,!0),e.removeEventListener("click",this._onClick),e.removeEventListener("touchmove",this._onTouchMove),this.dropdown.element.removeEventListener("mouseover",this._onMouseOver),this._isSelectOneElement&&(this.containerOuter.element.removeEventListener("focus",this._onFocus),this.containerOuter.element.removeEventListener("blur",this._onBlur)),this.input.element.removeEventListener("keyup",this._onKeyUp),this.input.element.removeEventListener("focus",this._onFocus),this.input.element.removeEventListener("blur",this._onBlur),this.input.element.form&&this.input.element.form.removeEventListener("reset",this._onFormReset),this.input.removeEventListeners()},r._onKeyDown=function(e){var t,n=e.target,i=e.keyCode,r=e.ctrlKey,a=e.metaKey,s=this._store.activeItems,o=this.input.isFocussed,l=this.dropdown.isActive,c=this.itemList.hasChildren(),d=String.fromCharCode(i),u=r||a;!this._isTextElement&&/[a-zA-Z0-9-_ ]/.test(d)&&this.showDropdown();var p=((t={})[65]=this._onAKey,t[13]=this._onEnterKey,t[27]=this._onEscapeKey,t[38]=this._onDirectionKey,t[33]=this._onDirectionKey,t[40]=this._onDirectionKey,t[34]=this._onDirectionKey,t[8]=this._onDeleteKey,t[46]=this._onDeleteKey,t);p[i]&&p[i]({event:e,target:n,keyCode:i,metaKey:a,activeItems:s,hasFocusedInput:o,hasActiveDropdown:l,hasItems:c,hasCtrlDownKeyPressed:u})},r._onKeyUp=function(e){var t=e.target,n=e.keyCode,i=this.input.value,r=this._store.activeItems,a=this._canAddItem(r,i);if(this._isTextElement)if(a.notice&&i){var s=this._getTemplate("notice",a.notice);this.dropdown.element.innerHTML=s.outerHTML,this.showDropdown(!0)}else this.hideDropdown(!0);else{var o=(46===n||8===n)&&!t.value,l=!this._isTextElement&&this._isSearching,c=this._canSearch&&a.response;o&&l?(this._isSearching=!1,this._store.dispatch(K(!0))):c&&this._handleSearch(this.input.value)}this._canSearch=this.config.searchEnabled},r._onAKey=function(e){var t=e.hasItems;e.hasCtrlDownKeyPressed&&t&&(this._canSearch=!1,this.config.removeItems&&!this.input.value&&this.input.element===document.activeElement&&this.highlightAll())},r._onEnterKey=function(e){var t=e.event,n=e.target,i=e.activeItems,r=e.hasActiveDropdown,a=n.hasAttribute("data-button");if(this._isTextElement&&n.value){var s=this.input.value;this._canAddItem(i,s).response&&(this.hideDropdown(!0),this._addItem({value:s}),this._triggerChange(s),this.clearInput())}if(a&&(this._handleButtonAction(i,n),t.preventDefault()),r){var o=this.dropdown.getChild("."+this.config.classNames.highlightedState);o&&(i[0]&&(i[0].keyCode=13),this._handleChoiceAction(i,o)),t.preventDefault()}else this._isSelectOneElement&&(this.showDropdown(),t.preventDefault())},r._onEscapeKey=function(e){e.hasActiveDropdown&&(this.hideDropdown(!0),this.containerOuter.focus())},r._onDirectionKey=function(e){var t,n,i,r=e.event,a=e.hasActiveDropdown,s=e.keyCode,o=e.metaKey;if(a||this._isSelectOneElement){this.showDropdown(),this._canSearch=!1;var l,c=40===s||34===s?1:-1;if(o||34===s||33===s)l=c>0?this.dropdown.element.querySelector("[data-choice-selectable]:last-of-type"):this.dropdown.element.querySelector("[data-choice-selectable]");else{var d=this.dropdown.element.querySelector("."+this.config.classNames.highlightedState);l=d?function(e,t,n){if(void 0===n&&(n=1),e instanceof Element){for(var i=(n>0?"next":"previous")+"ElementSibling",r=e[i];r;){if(r.matches(t))return r;r=r[i]}return r}}(d,"[data-choice-selectable]",c):this.dropdown.element.querySelector("[data-choice-selectable]")}l&&(t=l,n=this.choiceList.element,void 0===(i=c)&&(i=1),t&&(i>0?n.scrollTop+n.offsetHeight>=t.offsetTop+t.offsetHeight:t.offsetTop>=n.scrollTop)||this.choiceList.scrollToChildElement(l,c),this._highlightChoice(l)),r.preventDefault()}},r._onDeleteKey=function(e){var t=e.event,n=e.target,i=e.hasFocusedInput,r=e.activeItems;!i||n.value||this._isSelectOneElement||(this._handleBackspace(r),t.preventDefault())},r._onTouchMove=function(){this._wasTap&&(this._wasTap=!1)},r._onTouchEnd=function(e){var t=(e||e.touches[0]).target;this._wasTap&&this.containerOuter.element.contains(t)&&((t===this.containerOuter.element||t===this.containerInner.element)&&(this._isTextElement?this.input.focus():this._isSelectMultipleElement&&this.showDropdown()),e.stopPropagation()),this._wasTap=!0},r._onMouseDown=function(e){var t=e.target;if(t instanceof HTMLElement){if(ee&&this.choiceList.element.contains(t)){var n=this.choiceList.element.firstElementChild,i="ltr"===this._direction?e.offsetX>=n.offsetWidth:e.offsetX<n.offsetLeft;this._isScrollingOnIe=i}if(t!==this.input.element){var r=t.closest("[data-button],[data-item],[data-choice]");if(r instanceof HTMLElement){var a=e.shiftKey,s=this._store.activeItems,o=r.dataset;"button"in o?this._handleButtonAction(s,r):"item"in o?this._handleItemAction(s,r,a):"choice"in o&&this._handleChoiceAction(s,r)}e.preventDefault()}}},r._onMouseOver=function(e){var t=e.target;t instanceof HTMLElement&&"choice"in t.dataset&&this._highlightChoice(t)},r._onClick=function(e){var t=e.target;this.containerOuter.element.contains(t)?this.dropdown.isActive||this.containerOuter.isDisabled?this._isSelectOneElement&&t!==this.input.element&&!this.dropdown.element.contains(t)&&this.hideDropdown():this._isTextElement?document.activeElement!==this.input.element&&this.input.focus():(this.showDropdown(),this.containerOuter.focus()):(this._store.highlightedActiveItems.length>0&&this.unhighlightAll(),this.containerOuter.removeFocusState(),this.hideDropdown(!0))},r._onFocus=function(e){var t,n=this,i=e.target;this.containerOuter.element.contains(i)&&((t={})[N]=function(){i===n.input.element&&n.containerOuter.addFocusState()},t[j]=function(){n.containerOuter.addFocusState(),i===n.input.element&&n.showDropdown(!0)},t[z]=function(){i===n.input.element&&(n.showDropdown(!0),n.containerOuter.addFocusState())},t)[this.passedElement.element.type]()},r._onBlur=function(e){var t=this,n=e.target;if(this.containerOuter.element.contains(n)&&!this._isScrollingOnIe){var i,r=this._store.activeItems.some((function(e){return e.highlighted}));((i={})[N]=function(){n===t.input.element&&(t.containerOuter.removeFocusState(),r&&t.unhighlightAll(),t.hideDropdown(!0))},i[j]=function(){t.containerOuter.removeFocusState(),(n===t.input.element||n===t.containerOuter.element&&!t._canSearch)&&t.hideDropdown(!0)},i[z]=function(){n===t.input.element&&(t.containerOuter.removeFocusState(),t.hideDropdown(!0),r&&t.unhighlightAll())},i)[this.passedElement.element.type]()}else this._isScrollingOnIe=!1,this.input.element.focus()},r._onFormReset=function(){this._store.dispatch({type:"RESET_TO",state:this._initialState})},r._highlightChoice=function(e){var t=this;void 0===e&&(e=null);var n=Array.from(this.dropdown.element.querySelectorAll("[data-choice-selectable]"));if(n.length){var i=e;Array.from(this.dropdown.element.querySelectorAll("."+this.config.classNames.highlightedState)).forEach((function(e){e.classList.remove(t.config.classNames.highlightedState),e.setAttribute("aria-selected","false")})),i?this._highlightPosition=n.indexOf(i):(i=n.length>this._highlightPosition?n[this._highlightPosition]:n[n.length-1])||(i=n[0]),i.classList.add(this.config.classNames.highlightedState),i.setAttribute("aria-selected","true"),this.passedElement.triggerEvent("highlightChoice",{el:i}),this.dropdown.isActive&&(this.input.setActiveDescendant(i.id),this.containerOuter.setActiveDescendant(i.id))}},r._addItem=function(e){var t=e.value,n=e.label,i=void 0===n?null:n,r=e.choiceId,a=void 0===r?-1:r,s=e.groupId,o=void 0===s?-1:s,l=e.customProperties,c=void 0===l?null:l,d=e.placeholder,u=void 0!==d&&d,p=e.keyCode,h=void 0===p?null:p,f="string"==typeof t?t.trim():t,m=h,v=c,g=this._store.items,y=i||f,b=a||-1,w=o>=0?this._store.getGroupById(o):null,E=g?g.length+1:1;return this.config.prependValue&&(f=this.config.prependValue+f.toString()),this.config.appendValue&&(f+=this.config.appendValue.toString()),this._store.dispatch(function(e){return{type:"ADD_ITEM",value:e.value,label:e.label,id:e.id,choiceId:e.choiceId,groupId:e.groupId,customProperties:e.customProperties,placeholder:e.placeholder,keyCode:e.keyCode}}({value:f,label:y,id:E,choiceId:b,groupId:o,customProperties:c,placeholder:u,keyCode:m})),this._isSelectOneElement&&this.removeActiveItems(E),this.passedElement.triggerEvent("addItem",{id:E,value:f,label:y,customProperties:v,groupValue:w&&w.value?w.value:void 0,keyCode:m}),this},r._removeItem=function(e){if(!e||!E("Object",e))return this;var t=e.id,n=e.value,i=e.label,r=e.choiceId,a=e.groupId,s=a>=0?this._store.getGroupById(a):null;return this._store.dispatch(function(e,t){return{type:"REMOVE_ITEM",id:e,choiceId:t}}(t,r)),s&&s.value?this.passedElement.triggerEvent(P,{id:t,value:n,label:i,groupValue:s.value}):this.passedElement.triggerEvent(P,{id:t,value:n,label:i}),this},r._addChoice=function(e){var t=e.value,n=e.label,i=void 0===n?null:n,r=e.isSelected,a=void 0!==r&&r,s=e.isDisabled,o=void 0!==s&&s,l=e.groupId,c=void 0===l?-1:l,d=e.customProperties,u=void 0===d?null:d,p=e.placeholder,h=void 0!==p&&p,f=e.keyCode,m=void 0===f?null:f;if(null!=t){var v=this._store.choices,g=i||t,y=v?v.length+1:1,b=this._baseId+"-"+this._idNames.itemChoice+"-"+y;this._store.dispatch(function(e){return{type:"ADD_CHOICE",value:e.value,label:e.label,id:e.id,groupId:e.groupId,disabled:e.disabled,elementId:e.elementId,customProperties:e.customProperties,placeholder:e.placeholder,keyCode:e.keyCode}}({id:y,groupId:c,elementId:b,value:t,label:g,disabled:o,customProperties:u,placeholder:h,keyCode:m})),a&&this._addItem({value:t,label:g,choiceId:y,customProperties:u,placeholder:h,keyCode:m})}},r._addGroup=function(e){var t=this,n=e.group,i=e.id,r=e.valueKey,a=void 0===r?"value":r,s=e.labelKey,o=void 0===s?"label":s,l=E("Object",n)?n.choices:Array.from(n.getElementsByTagName("OPTION")),c=i||Math.floor((new Date).valueOf()*Math.random()),d=!!n.disabled&&n.disabled;l?(this._store.dispatch(J({value:n.label,id:c,active:!0,disabled:d})),l.forEach((function(e){var n=e.disabled||e.parentNode&&e.parentNode.disabled;t._addChoice({value:e[a],label:E("Object",e)?e[o]:e.innerHTML,isSelected:e.selected,isDisabled:n,groupId:c,customProperties:e.customProperties,placeholder:e.placeholder})}))):this._store.dispatch(J({value:n.label,id:n.id,active:!1,disabled:n.disabled}))},r._getTemplate=function(e){var t;if(!e)return null;for(var n=this.config.classNames,i=arguments.length,r=new Array(i>1?i-1:0),a=1;a<i;a++)r[a-1]=arguments[a];return(t=this._templates[e]).call.apply(t,[this,n].concat(r))},r._createTemplates=function(){var e=this.config.callbackOnCreateTemplates,t={};e&&"function"==typeof e&&(t=e.call(this,S)),this._templates=o()(Y,t)},r._createElements=function(){this.containerOuter=new q({element:this._getTemplate("containerOuter",this._direction,this._isSelectElement,this._isSelectOneElement,this.config.searchEnabled,this.passedElement.element.type),classNames:this.config.classNames,type:this.passedElement.element.type,position:this.config.position}),this.containerInner=new q({element:this._getTemplate("containerInner"),classNames:this.config.classNames,type:this.passedElement.element.type,position:this.config.position}),this.input=new $({element:this._getTemplate("input",this._placeholderValue),classNames:this.config.classNames,type:this.passedElement.element.type,preventPaste:!this.config.paste}),this.choiceList=new B({element:this._getTemplate("choiceList",this._isSelectOneElement)}),this.itemList=new B({element:this._getTemplate("itemList",this._isSelectOneElement)}),this.dropdown=new O({element:this._getTemplate("dropdown"),classNames:this.config.classNames,type:this.passedElement.element.type})},r._createStructure=function(){this.passedElement.conceal(),this.containerInner.wrap(this.passedElement.element),this.containerOuter.wrap(this.containerInner.element),this._isSelectOneElement?this.input.placeholder=this.config.searchPlaceholderValue||"":this._placeholderValue&&(this.input.placeholder=this._placeholderValue,this.input.setWidth()),this.containerOuter.element.appendChild(this.containerInner.element),this.containerOuter.element.appendChild(this.dropdown.element),this.containerInner.element.appendChild(this.itemList.element),this._isTextElement||this.dropdown.element.appendChild(this.choiceList.element),this._isSelectOneElement?this.config.searchEnabled&&this.dropdown.element.insertBefore(this.input.element,this.dropdown.element.firstChild):this.containerInner.element.appendChild(this.input.element),this._isSelectElement&&(this._highlightPosition=0,this._isSearching=!1,this._startLoading(),this._presetGroups.length?this._addPredefinedGroups(this._presetGroups):this._addPredefinedChoices(this._presetChoices),this._stopLoading()),this._isTextElement&&this._addPredefinedItems(this._presetItems)},r._addPredefinedGroups=function(e){var t=this,n=this.passedElement.placeholderOption;n&&"SELECT"===n.parentNode.tagName&&this._addChoice({value:n.value,label:n.innerHTML,isSelected:n.selected,isDisabled:n.disabled,placeholder:!0}),e.forEach((function(e){return t._addGroup({group:e,id:e.id||null})}))},r._addPredefinedChoices=function(e){var t=this;this.config.shouldSort&&e.sort(this.config.sorter);var n=e.some((function(e){return e.selected})),i=e.findIndex((function(e){return void 0===e.disabled||!e.disabled}));e.forEach((function(e,r){var a=e.value,s=e.label,o=e.customProperties,l=e.placeholder;if(t._isSelectElement)if(e.choices)t._addGroup({group:e,id:e.id||null});else{var c=!(!t._isSelectOneElement||n||r!==i)||e.selected,d=e.disabled;t._addChoice({value:a,label:s,isSelected:c,isDisabled:d,customProperties:o,placeholder:l})}else t._addChoice({value:a,label:s,isSelected:e.selected,isDisabled:e.disabled,customProperties:o,placeholder:l})}))},r._addPredefinedItems=function(t){var n=this;t.forEach((function(t){"object"==e(t)&&t.value&&n._addItem({value:t.value,label:t.label,choiceId:t.id,customProperties:t.customProperties,placeholder:t.placeholder}),"string"==typeof t&&n._addItem({value:t})}))},r._setChoiceOrItem=function(e){var t=this;({object:function(){e.value&&(t._isTextElement?t._addItem({value:e.value,label:e.label,choiceId:e.id,customProperties:e.customProperties,placeholder:e.placeholder}):t._addChoice({value:e.value,label:e.label,isSelected:!0,isDisabled:!1,customProperties:e.customProperties,placeholder:e.placeholder}))},string:function(){t._isTextElement?t._addItem({value:e}):t._addChoice({value:e,label:e,isSelected:!0,isDisabled:!1})}})[w(e).toLowerCase()]()},r._findAndSelectChoiceByValue=function(e){var t=this,n=this._store.choices.find((function(n){return t.config.valueComparer(n.value,e)}));n&&!n.selected&&this._addItem({value:n.value,label:n.label,choiceId:n.id,groupId:n.groupId,customProperties:n.customProperties,placeholder:n.placeholder,keyCode:n.keyCode})},r._generatePlaceholderValue=function(){if(this._isSelectElement){var e=this.passedElement.placeholderOption;return!!e&&e.text}var t=this.config,n=t.placeholder,i=t.placeholderValue,r=this.passedElement.element.dataset;if(n){if(i)return i;if(r.placeholder)return r.placeholder}return!1},i}();n.default=ne}]).default,function(t,n){"object"==("undefined"==typeof exports?"undefined":e(exports))&&"undefined"!=typeof module?n():"function"==typeof define&&define.amd?define(n):n()}(0,(function(){function e(e){var t=!0,n=!1,i=null,r={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function a(e){return!!(e&&e!==document&&"HTML"!==e.nodeName&&"BODY"!==e.nodeName&&"classList"in e&&"contains"in e.classList)}function s(e){e.classList.contains("focus-visible")||(e.classList.add("focus-visible"),e.setAttribute("data-focus-visible-added",""))}function o(e){t=!1}function l(){document.addEventListener("mousemove",c),document.addEventListener("mousedown",c),document.addEventListener("mouseup",c),document.addEventListener("pointermove",c),document.addEventListener("pointerdown",c),document.addEventListener("pointerup",c),document.addEventListener("touchmove",c),document.addEventListener("touchstart",c),document.addEventListener("touchend",c)}function c(e){e.target.nodeName&&"html"===e.target.nodeName.toLowerCase()||(t=!1,document.removeEventListener("mousemove",c),document.removeEventListener("mousedown",c),document.removeEventListener("mouseup",c),document.removeEventListener("pointermove",c),document.removeEventListener("pointerdown",c),document.removeEventListener("pointerup",c),document.removeEventListener("touchmove",c),document.removeEventListener("touchstart",c),document.removeEventListener("touchend",c))}document.addEventListener("keydown",(function(n){n.metaKey||n.altKey||n.ctrlKey||(a(e.activeElement)&&s(e.activeElement),t=!0)}),!0),document.addEventListener("mousedown",o,!0),document.addEventListener("pointerdown",o,!0),document.addEventListener("touchstart",o,!0),document.addEventListener("visibilitychange",(function(e){"hidden"===document.visibilityState&&(n&&(t=!0),l())}),!0),l(),e.addEventListener("focus",(function(e){var n,i,o;a(e.target)&&(t||(i=(n=e.target).type,"INPUT"===(o=n.tagName)&&r[i]&&!n.readOnly||"TEXTAREA"===o&&!n.readOnly||n.isContentEditable))&&s(e.target)}),!0),e.addEventListener("blur",(function(e){var t;a(e.target)&&(e.target.classList.contains("focus-visible")||e.target.hasAttribute("data-focus-visible-added"))&&(n=!0,window.clearTimeout(i),i=window.setTimeout((function(){n=!1}),100),(t=e.target).hasAttribute("data-focus-visible-added")&&(t.classList.remove("focus-visible"),t.removeAttribute("data-focus-visible-added")))}),!0),e.nodeType===Node.DOCUMENT_FRAGMENT_NODE&&e.host?e.host.setAttribute("data-js-focus-visible",""):e.nodeType===Node.DOCUMENT_NODE&&(document.documentElement.classList.add("js-focus-visible"),document.documentElement.setAttribute("data-js-focus-visible",""))}if("undefined"!=typeof window&&"undefined"!=typeof document){var t;window.applyFocusVisiblePolyfill=e;try{t=new CustomEvent("focus-visible-polyfill-ready")}catch(e){(t=document.createEvent("CustomEvent")).initCustomEvent("focus-visible-polyfill-ready",!1,!1,{})}window.dispatchEvent(t)}"undefined"!=typeof document&&e(document)})),t=void 0,n=function(e){function t(e){var t=e.getBoundingClientRect();return{width:t.width,height:t.height,top:t.top,right:t.right,bottom:t.bottom,left:t.left,x:t.left,y:t.top}}function n(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function i(e){var t=n(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function r(e){return e instanceof n(e).Element||e instanceof Element}function a(e){return e instanceof n(e).HTMLElement||e instanceof HTMLElement}function s(e){return"undefined"!=typeof ShadowRoot&&(e instanceof n(e).ShadowRoot||e instanceof ShadowRoot)}function o(e){return e?(e.nodeName||"").toLowerCase():null}function l(e){return((r(e)?e.ownerDocument:e.document)||window.document).documentElement}function c(e){return t(l(e)).left+i(e).scrollLeft}function d(e){return n(e).getComputedStyle(e)}function u(e){var t=d(e),n=t.overflow,i=t.overflowX,r=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+r+i)}function p(e,r,s){void 0===s&&(s=!1);var d,p,h=l(r),f=t(e),m=a(r),v={scrollLeft:0,scrollTop:0},g={x:0,y:0};return(m||!m&&!s)&&(("body"!==o(r)||u(h))&&(v=(d=r)!==n(d)&&a(d)?{scrollLeft:(p=d).scrollLeft,scrollTop:p.scrollTop}:i(d)),a(r)?((g=t(r)).x+=r.clientLeft,g.y+=r.clientTop):h&&(g.x=c(h))),{x:f.left+v.scrollLeft-g.x,y:f.top+v.scrollTop-g.y,width:f.width,height:f.height}}function h(e){var n=t(e),i=e.offsetWidth,r=e.offsetHeight;return Math.abs(n.width-i)<=.5&&(i=n.width),Math.abs(n.height-r)<=.5&&(r=n.height),{x:e.offsetLeft,y:e.offsetTop,width:i,height:r}}function f(e){return"html"===o(e)?e:e.assignedSlot||e.parentNode||(s(e)?e.host:null)||l(e)}function m(e,t){var i;void 0===t&&(t=[]);var r=function e(t){return["html","body","#document"].indexOf(o(t))>=0?t.ownerDocument.body:a(t)&&u(t)?t:e(f(t))}(e),s=r===(null==(i=e.ownerDocument)?void 0:i.body),l=n(r),c=s?[l].concat(l.visualViewport||[],u(r)?r:[]):r,d=t.concat(c);return s?d:d.concat(m(f(c)))}function v(e){return["table","td","th"].indexOf(o(e))>=0}function g(e){return a(e)&&"fixed"!==d(e).position?e.offsetParent:null}function y(e){for(var t=n(e),i=g(e);i&&v(i)&&"static"===d(i).position;)i=g(i);return i&&("html"===o(i)||"body"===o(i)&&"static"===d(i).position)?t:i||function(e){for(var t=navigator.userAgent.toLowerCase().includes("firefox"),n=f(e);a(n)&&["html","body"].indexOf(o(n))<0;){var i=d(n);if("none"!==i.transform||"none"!==i.perspective||"paint"===i.contain||["transform","perspective"].includes(i.willChange)||t&&"filter"===i.willChange||t&&i.filter&&"none"!==i.filter)return n;n=n.parentNode}return null}(e)||t}var b="top",w="bottom",E="right",x="left",S=[b,w,E,x],T=S.reduce((function(e,t){return e.concat([t+"-start",t+"-end"])}),[]),C=[].concat(S,["auto"]).reduce((function(e,t){return e.concat([t,t+"-start",t+"-end"])}),[]),_=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function L(e){var t=new Map,n=new Set,i=[];return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||function e(r){n.add(r.name),[].concat(r.requires||[],r.requiresIfExists||[]).forEach((function(i){if(!n.has(i)){var r=t.get(i);r&&e(r)}})),i.push(r)}(e)})),i}function k(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),i=1;i<t;i++)n[i-1]=arguments[i];return[].concat(n).reduce((function(e,t){return e.replace(/%s/,t)}),e)}var M='Popper: modifier "%s" provided an invalid %s property, expected %s but got %s',A=["name","enabled","phase","fn","effect","requires","options"];function O(e){return e.split("-")[0]}var I=Math.max,P=Math.min,D=Math.round;function N(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&s(n)){var i=t;do{if(i&&e.isSameNode(i))return!0;i=i.parentNode||i.host}while(i)}return!1}function j(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function z(e,r){return"viewport"===r?j(function(e){var t=n(e),i=l(e),r=t.visualViewport,a=i.clientWidth,s=i.clientHeight,o=0,d=0;return r&&(a=r.width,s=r.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(o=r.offsetLeft,d=r.offsetTop)),{width:a,height:s,x:o+c(e),y:d}}(e)):a(r)?function(e){var n=t(e);return n.top=n.top+e.clientTop,n.left=n.left+e.clientLeft,n.bottom=n.top+e.clientHeight,n.right=n.left+e.clientWidth,n.width=e.clientWidth,n.height=e.clientHeight,n.x=n.left,n.y=n.top,n}(r):j(function(e){var t,n=l(e),r=i(e),a=null==(t=e.ownerDocument)?void 0:t.body,s=I(n.scrollWidth,n.clientWidth,a?a.scrollWidth:0,a?a.clientWidth:0),o=I(n.scrollHeight,n.clientHeight,a?a.scrollHeight:0,a?a.clientHeight:0),u=-r.scrollLeft+c(e),p=-r.scrollTop;return"rtl"===d(a||n).direction&&(u+=I(n.clientWidth,a?a.clientWidth:0)-s),{width:s,height:o,x:u,y:p}}(l(e)))}function q(e,t,n){var i="clippingParents"===t?function(e){var t=m(f(e)),n=["absolute","fixed"].indexOf(d(e).position)>=0&&a(e)?y(e):e;return r(n)?t.filter((function(e){return r(e)&&N(e,n)&&"body"!==o(e)})):[]}(e):[].concat(t),s=[].concat(i,[n]),l=s[0],c=s.reduce((function(t,n){var i=z(e,n);return t.top=I(i.top,t.top),t.right=P(i.right,t.right),t.bottom=P(i.bottom,t.bottom),t.left=I(i.left,t.left),t}),z(e,l));return c.width=c.right-c.left,c.height=c.bottom-c.top,c.x=c.left,c.y=c.top,c}function H(e){return e.split("-")[1]}function $(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function B(e){var t,n=e.reference,i=e.element,r=e.placement,a=r?O(r):null,s=r?H(r):null,o=n.x+n.width/2-i.width/2,l=n.y+n.height/2-i.height/2;switch(a){case b:t={x:o,y:n.y-i.height};break;case w:t={x:o,y:n.y+n.height};break;case E:t={x:n.x+n.width,y:l};break;case x:t={x:n.x-i.width,y:l};break;default:t={x:n.x,y:n.y}}var c=a?$(a):null;if(null!=c){var d="y"===c?"height":"width";switch(s){case"start":t[c]=t[c]-(n[d]/2-i[d]/2);break;case"end":t[c]=t[c]+(n[d]/2-i[d]/2)}}return t}function F(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function R(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}function G(e,n){void 0===n&&(n={});var i=n,a=i.placement,s=void 0===a?e.placement:a,o=i.boundary,c=void 0===o?"clippingParents":o,d=i.rootBoundary,u=void 0===d?"viewport":d,p=i.elementContext,h=void 0===p?"popper":p,f=i.altBoundary,m=void 0!==f&&f,v=i.padding,g=void 0===v?0:v,y=F("number"!=typeof g?g:R(g,S)),x="popper"===h?"reference":"popper",T=e.elements.reference,C=e.rects.popper,_=e.elements[m?x:h],L=q(r(_)?_:_.contextElement||l(e.elements.popper),c,u),k=t(T),M=B({reference:k,element:C,strategy:"absolute",placement:s}),A=j(Object.assign({},C,M)),O="popper"===h?A:k,I={top:L.top-O.top+y.top,bottom:O.bottom-L.bottom+y.bottom,left:L.left-O.left+y.left,right:O.right-L.right+y.right},P=e.modifiersData.offset;if("popper"===h&&P){var D=P[s];Object.keys(I).forEach((function(e){var t=[E,w].indexOf(e)>=0?1:-1,n=[b,w].indexOf(e)>=0?"y":"x";I[e]+=D[n]*t}))}return I}var W="Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.",V={placement:"bottom",modifiers:[],strategy:"absolute"};function X(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function Y(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,i=void 0===n?[]:n,a=t.defaultOptions,s=void 0===a?V:a;return function(e,t,n){void 0===n&&(n=s);var a,o,l={placement:"bottom",orderedModifiers:[],options:Object.assign({},V,s),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},c=[],u=!1,f={state:l,setOptions:function(n){v(),l.options=Object.assign({},s,l.options,n),l.scrollParents={reference:r(e)?m(e):e.contextElement?m(e.contextElement):[],popper:m(t)};var a=function(e){var t=L(e);return _.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}(function(e){var t=e.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e}),{});return Object.keys(t).map((function(e){return t[e]}))}([].concat(i,l.options.modifiers)));l.orderedModifiers=a.filter((function(e){return e.enabled})),function(e){e.forEach((function(t){Object.keys(t).forEach((function(n){switch(n){case"name":"string"!=typeof t.name&&console.error(k(M,String(t.name),'"name"','"string"','"'+String(t.name)+'"'));break;case"enabled":"boolean"!=typeof t.enabled&&console.error(k(M,t.name,'"enabled"','"boolean"','"'+String(t.enabled)+'"'));case"phase":_.indexOf(t.phase)<0&&console.error(k(M,t.name,'"phase"',"either "+_.join(", "),'"'+String(t.phase)+'"'));break;case"fn":"function"!=typeof t.fn&&console.error(k(M,t.name,'"fn"','"function"','"'+String(t.fn)+'"'));break;case"effect":"function"!=typeof t.effect&&console.error(k(M,t.name,'"effect"','"function"','"'+String(t.fn)+'"'));break;case"requires":Array.isArray(t.requires)||console.error(k(M,t.name,'"requires"','"array"','"'+String(t.requires)+'"'));break;case"requiresIfExists":Array.isArray(t.requiresIfExists)||console.error(k(M,t.name,'"requiresIfExists"','"array"','"'+String(t.requiresIfExists)+'"'));break;case"options":case"data":break;default:console.error('PopperJS: an invalid property has been provided to the "'+t.name+'" modifier, valid properties are '+A.map((function(e){return'"'+e+'"'})).join(", ")+'; but "'+n+'" was provided.')}t.requires&&t.requires.forEach((function(n){null==e.find((function(e){return e.name===n}))&&console.error(k('Popper: modifier "%s" requires "%s", but "%s" modifier is not available',String(t.name),n,n))}))}))}))}((o=[].concat(a,l.options.modifiers),u=function(e){return e.name},p=new Set,o.filter((function(e){var t=u(e);if(!p.has(t))return p.add(t),!0})))),"auto"===O(l.options.placement)&&(l.orderedModifiers.find((function(e){return"flip"===e.name}))||console.error(['Popper: "auto" placements require the "flip" modifier be',"present and enabled to work."].join(" ")));var o,u,p,h=d(t);return[h.marginTop,h.marginRight,h.marginBottom,h.marginLeft].some((function(e){return parseFloat(e)}))&&console.warn(['Popper: CSS "margin" styles cannot be used to apply padding',"between the popper and its reference element or boundary.","To replicate margin, use the `offset` modifier, as well as","the `padding` option in the `preventOverflow` and `flip`","modifiers."].join(" ")),l.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,i=void 0===n?{}:n,r=e.effect;if("function"==typeof r){var a=r({state:l,name:t,instance:f,options:i});c.push(a||function(){})}})),f.update()},forceUpdate:function(){if(!u){var e=l.elements,t=e.reference,n=e.popper;if(X(t,n)){l.rects={reference:p(t,y(n),"fixed"===l.options.strategy),popper:h(n)},l.reset=!1,l.placement=l.options.placement,l.orderedModifiers.forEach((function(e){return l.modifiersData[e.name]=Object.assign({},e.data)}));for(var i=0,r=0;r<l.orderedModifiers.length;r++){if((i+=1)>100){console.error("Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.");break}if(!0!==l.reset){var a=l.orderedModifiers[r],s=a.fn,o=a.options,c=void 0===o?{}:o,d=a.name;"function"==typeof s&&(l=s({state:l,options:c,name:d,instance:f})||l)}else l.reset=!1,r=-1}}else console.error(W)}},update:(a=function(){return new Promise((function(e){f.forceUpdate(),e(l)}))},function(){return o||(o=new Promise((function(e){Promise.resolve().then((function(){o=void 0,e(a())}))}))),o}),destroy:function(){v(),u=!0}};if(!X(e,t))return console.error(W),f;function v(){c.forEach((function(e){return e()})),c=[]}return f.setOptions(n).then((function(e){!u&&n.onFirstUpdate&&n.onFirstUpdate(e)})),f}}var K={passive:!0},U={name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,i=e.instance,r=e.options,a=r.scroll,s=void 0===a||a,o=r.resize,l=void 0===o||o,c=n(t.elements.popper),d=[].concat(t.scrollParents.reference,t.scrollParents.popper);return s&&d.forEach((function(e){e.addEventListener("scroll",i.update,K)})),l&&c.addEventListener("resize",i.update,K),function(){s&&d.forEach((function(e){e.removeEventListener("scroll",i.update,K)})),l&&c.removeEventListener("resize",i.update,K)}},data:{}},J={name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=B({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},Q={top:"auto",right:"auto",bottom:"auto",left:"auto"};function Z(e){var t,i=e.popper,r=e.popperRect,a=e.placement,s=e.offsets,o=e.position,c=e.gpuAcceleration,u=e.adaptive,p=e.roundOffsets,h=!0===p?function(e){var t=e.x,n=e.y,i=window.devicePixelRatio||1;return{x:D(D(t*i)/i)||0,y:D(D(n*i)/i)||0}}(s):"function"==typeof p?p(s):s,f=h.x,m=void 0===f?0:f,v=h.y,g=void 0===v?0:v,S=s.hasOwnProperty("x"),T=s.hasOwnProperty("y"),C=x,_=b,L=window;if(u){var k=y(i),M="clientHeight",A="clientWidth";k===n(i)&&"static"!==d(k=l(i)).position&&(M="scrollHeight",A="scrollWidth"),a===b&&(_=w,g-=k[M]-r.height,g*=c?1:-1),a===x&&(C=E,m-=k[A]-r.width,m*=c?1:-1)}var O,I=Object.assign({position:o},u&&Q);return c?Object.assign({},I,((O={})[_]=T?"0":"",O[C]=S?"0":"",O.transform=(L.devicePixelRatio||1)<2?"translate("+m+"px, "+g+"px)":"translate3d("+m+"px, "+g+"px, 0)",O)):Object.assign({},I,((t={})[_]=T?g+"px":"",t[C]=S?m+"px":"",t.transform="",t))}var ee={name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,i=n.gpuAcceleration,r=void 0===i||i,a=n.adaptive,s=void 0===a||a,o=n.roundOffsets,l=void 0===o||o,c=d(t.elements.popper).transitionProperty||"";s&&["transform","top","right","bottom","left"].some((function(e){return c.indexOf(e)>=0}))&&console.warn(["Popper: Detected CSS transitions on at least one of the following",'CSS properties: "transform", "top", "right", "bottom", "left".',"\n\n",'Disable the "computeStyles" modifier\'s `adaptive` option to allow',"for smooth transitions, or remove these properties from the CSS","transition declaration on the popper element if only transitioning","opacity or background-color for example.","\n\n","We recommend using the popper element as a wrapper around an inner","element that can have any CSS property transitioned for animations."].join(" "));var u={placement:O(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:r};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,Z(Object.assign({},u,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:s,roundOffsets:l})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,Z(Object.assign({},u,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}},te={name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},i=t.attributes[e]||{},r=t.elements[e];a(r)&&o(r)&&(Object.assign(r.style,n),Object.keys(i).forEach((function(e){var t=i[e];!1===t?r.removeAttribute(e):r.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.styles=n,t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var i=t.elements[e],r=t.attributes[e]||{},s=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});a(i)&&o(i)&&(Object.assign(i.style,s),Object.keys(r).forEach((function(e){i.removeAttribute(e)})))}))}},requires:["computeStyles"]},ne={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,i=e.name,r=n.offset,a=void 0===r?[0,0]:r,s=C.reduce((function(e,n){return e[n]=function(e,t,n){var i=O(e),r=[x,b].indexOf(i)>=0?-1:1,a="function"==typeof n?n(Object.assign({},t,{placement:e})):n,s=a[0],o=a[1];return s=s||0,o=(o||0)*r,[x,E].indexOf(i)>=0?{x:o,y:s}:{x:s,y:o}}(n,t.rects,a),e}),{}),o=s[t.placement],l=o.x,c=o.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=l,t.modifiersData.popperOffsets.y+=c),t.modifiersData[i]=s}},ie={left:"right",right:"left",bottom:"top",top:"bottom"};function re(e){return e.replace(/left|right|bottom|top/g,(function(e){return ie[e]}))}var ae={start:"end",end:"start"};function se(e){return e.replace(/start|end/g,(function(e){return ae[e]}))}function oe(e,t){void 0===t&&(t={});var n=t,i=n.placement,r=n.boundary,a=n.rootBoundary,s=n.padding,o=n.flipVariations,l=n.allowedAutoPlacements,c=void 0===l?C:l,d=H(i),u=d?o?T:T.filter((function(e){return H(e)===d})):S,p=u.filter((function(e){return c.indexOf(e)>=0}));0===p.length&&(p=u,console.error(["Popper: The `allowedAutoPlacements` option did not allow any","placements. Ensure the `placement` option matches the variation","of the allowed placements.",'For example, "auto" cannot be used to allow "bottom-start".','Use "auto-start" instead.'].join(" ")));var h=p.reduce((function(t,n){return t[n]=G(e,{placement:n,boundary:r,rootBoundary:a,padding:s})[O(n)],t}),{});return Object.keys(h).sort((function(e,t){return h[e]-h[t]}))}var le={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,i=e.name;if(!t.modifiersData[i]._skip){for(var r=n.mainAxis,a=void 0===r||r,s=n.altAxis,o=void 0===s||s,l=n.fallbackPlacements,c=n.padding,d=n.boundary,u=n.rootBoundary,p=n.altBoundary,h=n.flipVariations,f=void 0===h||h,m=n.allowedAutoPlacements,v=t.options.placement,g=O(v),y=l||(g!==v&&f?function(e){if("auto"===O(e))return[];var t=re(e);return[se(e),t,se(t)]}(v):[re(v)]),S=[v].concat(y).reduce((function(e,n){return e.concat("auto"===O(n)?oe(t,{placement:n,boundary:d,rootBoundary:u,padding:c,flipVariations:f,allowedAutoPlacements:m}):n)}),[]),T=t.rects.reference,C=t.rects.popper,_=new Map,L=!0,k=S[0],M=0;M<S.length;M++){var A=S[M],I=O(A),P="start"===H(A),D=[b,w].indexOf(I)>=0,N=D?"width":"height",j=G(t,{placement:A,boundary:d,rootBoundary:u,altBoundary:p,padding:c}),z=D?P?E:x:P?w:b;T[N]>C[N]&&(z=re(z));var q=re(z),$=[];if(a&&$.push(j[I]<=0),o&&$.push(j[z]<=0,j[q]<=0),$.every((function(e){return e}))){k=A,L=!1;break}_.set(A,$)}if(L)for(var B=function(e){var t=S.find((function(t){var n=_.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return k=t,"break"},F=f?3:1;F>0&&"break"!==B(F);F--);t.placement!==k&&(t.modifiersData[i]._skip=!0,t.placement=k,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function ce(e,t,n){return I(e,P(t,n))}var de={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,i=e.name,r=n.mainAxis,a=void 0===r||r,s=n.altAxis,o=void 0!==s&&s,l=n.boundary,c=n.rootBoundary,d=n.altBoundary,u=n.padding,p=n.tether,f=void 0===p||p,m=n.tetherOffset,v=void 0===m?0:m,g=G(t,{boundary:l,rootBoundary:c,padding:u,altBoundary:d}),S=O(t.placement),T=H(t.placement),C=!T,_=$(S),L="x"===_?"y":"x",k=t.modifiersData.popperOffsets,M=t.rects.reference,A=t.rects.popper,D="function"==typeof v?v(Object.assign({},t.rects,{placement:t.placement})):v,N={x:0,y:0};if(k){if(a||o){var j="y"===_?b:x,z="y"===_?w:E,q="y"===_?"height":"width",B=k[_],F=k[_]+g[j],R=k[_]-g[z],W=f?-A[q]/2:0,V="start"===T?M[q]:A[q],X="start"===T?-A[q]:-M[q],Y=t.elements.arrow,K=f&&Y?h(Y):{width:0,height:0},U=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},J=U[j],Q=U[z],Z=ce(0,M[q],K[q]),ee=C?M[q]/2-W-Z-J-D:V-Z-J-D,te=C?-M[q]/2+W+Z+Q+D:X+Z+Q+D,ne=t.elements.arrow&&y(t.elements.arrow),ie=ne?"y"===_?ne.clientTop||0:ne.clientLeft||0:0,re=t.modifiersData.offset?t.modifiersData.offset[t.placement][_]:0,ae=k[_]+ee-re-ie,se=k[_]+te-re;if(a){var oe=ce(f?P(F,ae):F,B,f?I(R,se):R);k[_]=oe,N[_]=oe-B}if(o){var le="x"===_?b:x,de="x"===_?w:E,ue=k[L],pe=ue+g[le],he=ue-g[de],fe=ce(f?P(pe,ae):pe,ue,f?I(he,se):he);k[L]=fe,N[L]=fe-ue}}t.modifiersData[i]=N}},requiresIfExists:["offset"]},ue={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,i=e.name,r=e.options,a=n.elements.arrow,s=n.modifiersData.popperOffsets,o=O(n.placement),l=$(o),c=[x,E].indexOf(o)>=0?"height":"width";if(a&&s){var d=function(e,t){return F("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:R(e,S))}(r.padding,n),u=h(a),p="y"===l?b:x,f="y"===l?w:E,m=n.rects.reference[c]+n.rects.reference[l]-s[l]-n.rects.popper[c],v=s[l]-n.rects.reference[l],g=y(a),T=g?"y"===l?g.clientHeight||0:g.clientWidth||0:0,C=m/2-v/2,_=d[p],L=T-u[c]-d[f],k=T/2-u[c]/2+C,M=ce(_,k,L),A=l;n.modifiersData[i]=((t={})[A]=M,t.centerOffset=M-k,t)}},effect:function(e){var t=e.state,n=e.options.element,i=void 0===n?"[data-popper-arrow]":n;null!=i&&("string"!=typeof i||(i=t.elements.popper.querySelector(i)))&&(a(i)||console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).',"To use an SVG arrow, wrap it in an HTMLElement that will be used as","the arrow."].join(" ")),N(t.elements.popper,i)?t.elements.arrow=i:console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper',"element."].join(" ")))},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function pe(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function he(e){return[b,E,w,x].some((function(t){return e[t]>=0}))}var fe={name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,i=t.rects.reference,r=t.rects.popper,a=t.modifiersData.preventOverflow,s=G(t,{elementContext:"reference"}),o=G(t,{altBoundary:!0}),l=pe(s,i),c=pe(o,r,a),d=he(l),u=he(c);t.modifiersData[n]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:d,hasPopperEscaped:u},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":d,"data-popper-escaped":u})}},me=Y({defaultModifiers:[U,J,ee,te]}),ve=[U,J,ee,te,ne,le,de,ue,fe],ge=Y({defaultModifiers:ve});e.applyStyles=te,e.arrow=ue,e.computeStyles=ee,e.createPopper=ge,e.createPopperLite=me,e.defaultModifiers=ve,e.detectOverflow=G,e.eventListeners=U,e.flip=le,e.hide=fe,e.offset=ne,e.popperGenerator=Y,e.popperOffsets=J,e.preventOverflow=de,Object.defineProperty(e,"__esModule",{value:!0})},"object"===("undefined"==typeof exports?"undefined":e(exports))&&"undefined"!=typeof module?n(exports):"function"==typeof define&&define.amd?define(["exports"],n):n((t="undefined"!=typeof globalThis?globalThis:t||self).Popper={}),document.addEventListener("DOMContentLoaded",(function(){var e,t=!(!(e=document.createElement("canvas")).getContext||!e.getContext("2d"))&&0===e.toDataURL("image/webp").indexOf("data:image/webp"),n=document.querySelector(".gallery");1==t?n.classList.add("bg-gallery-webp"):n.classList.add("bg-gallery-img");var i=document.querySelector(".editions");1==t?i.classList.add("bg-editions-webp"):i.classList.add("bg-editions-img")})),document.addEventListener("DOMContentLoaded",(function(){var e=document.querySelector("#js-modal-img");e.addEventListener("click",(function(t){"BUTTON"==t.target.tagName&&(e.classList.remove("modal-img_is-close"),e.classList.add("modal-img_is-close"),setTimeout((function(){e.classList.remove("modal-img_is-close"),e.classList.remove("modal-img_is-open")}),500))}))})),document.addEventListener("DOMContentLoaded",(function(){function e(e){var t=e.querySelectorAll(".choices__item--choice"),n=e.querySelector(".choices__list--dropdown"),i=[];t.forEach((function(e){i.push(e.offsetWidth)}));var r=Math.max.apply(null,i);n.style.width="".concat(r,"px")}document.querySelectorAll(".header-search-block__drop-item").forEach((function(t){t.addEventListener("click",(function(n){e(t)})),t.addEventListener("keyup",(function(n){"Enter"==n.code&&e(t)}))})),document.body.addEventListener("keyup",(function(e){if("Tab"==e.code)return!1}))})),document.addEventListener("DOMContentLoaded",(function(){var e=document.querySelector("#js-select-1"),t=document.querySelector("#js-select-2"),n=document.querySelector("#js-select-3"),i=document.querySelector("#js-select-4"),r=document.querySelector("#js-select-5"),a=document.querySelector("#js-gallery-select-1"),s=document.querySelector("#js-gallery-select-2"),o=document.querySelector("#js-gallery-select-3"),l={searchEnabled:!1,classNames:{containerOuter:"choices",containerInner:"choices__inner",input:"choices__input",inputCloned:"choices__input--cloned",list:"choices__list",listItems:"choices__list--multiple",listSingle:"choices__list--single",listDropdown:"choices__list--dropdown",item:"choices__item",itemSelectable:"choices__item--selectable",itemDisabled:"choices__item--disabled",itemChoice:"choices__item--choice",placeholder:"choices__placeholder",group:"choices__group",groupHeading:"choices__heading",button:"choices__button",activeState:"is-active",focusState:"is-focused",openState:"is-open",disabledState:"is-disabled",highlightedState:"is-highlighted",selectedState:"is-selected",flippedState:"is-flipped",loadingState:"is-loading",noResults:"has-no-results",noChoices:"has-no-choices"}};new Choices(e,l),new Choices(t,l),new Choices(n,l),new Choices(i,l),new Choices(r,l),new Choices(a,l),new Choices(s,l),new Choices(o,l)})),document.addEventListener("DOMContentLoaded",(function(){var e,t=document.querySelector("#js-btn-nav"),n=document.querySelector("#js-nav"),i=document.querySelectorAll(".header-nav-block__nav-link");t.addEventListener("click",(function(i){i.preventDefault();var r=t.getAttribute("aria-expanded");e=r,"false"==r?(t.setAttribute("aria-expanded","true"),t.setAttribute("aria-label","закрыть меню"),t.classList.remove("header-nav-block__open-nav_is-open"),t.classList.add("header-nav-block__open-nav_is-close"),n.classList.add("header-nav-block__nav-block_is-active"),n.classList.remove("header-nav-block__nav-block_anima-close"),n.classList.add("header-nav-block__nav-block_anima-open"),document.body.style.overflowY="hidden"):(t.setAttribute("aria-expanded","false"),t.setAttribute("aria-label","открыть меню"),t.classList.add("header-nav-block__open-nav_is-open"),t.classList.remove("header-nav-block__open-nav_is-close"),n.classList.remove("header-nav-block__nav-block_anima-close"),n.classList.remove("header-nav-block__nav-block_anima-open"),n.classList.add("header-nav-block__nav-block_anima-close"),document.body.style.overflowY="auto",setTimeout((function(){"true"==e&&n.classList.remove("header-nav-block__nav-block_is-active")}),1e3))})),i.forEach((function(i){i.addEventListener("click",(function(i){document.body.clientWidth<1400&&(i.preventDefault(),e="true",t.setAttribute("aria-expanded","false"),t.setAttribute("aria-label","открыть меню"),t.classList.add("header-nav-block__open-nav_is-open"),t.classList.remove("header-nav-block__open-nav_is-close"),n.classList.remove("header-nav-block__nav-block_anima-close"),n.classList.remove("header-nav-block__nav-block_anima-open"),n.classList.add("header-nav-block__nav-block_anima-close"),document.body.style.overflowY="auto",setTimeout((function(){"true"==e&&n.classList.remove("header-nav-block__nav-block_is-active")}),1e3))}))})),window.onresize=function(){document.body.clientWidth>1400&&(t.setAttribute("aria-expanded","false"),t.setAttribute("aria-label","открыть меню"),t.classList.add("header-nav-block__open-nav_is-open"),t.classList.remove("header-nav-block__open-nav_is-close"),n.classList.remove("header-nav-block__nav-block_anima-close"),n.classList.remove("header-nav-block__nav-block_anima-open"),n.classList.remove("header-nav-block__nav-block_anima-close"),n.classList.remove("header-nav-block__nav-block_is-active"),document.body.style.overflowY="auto")}})),document.addEventListener("DOMContentLoaded",(function(){var e=document.querySelector("#js-header-search-form"),t=document.querySelector("#js-header-search-input"),n=document.querySelector("#js-header-search-tooltip"),i=document.querySelector("#js-header-logo");e.addEventListener("submit",(function(e){""==t.value?(e.preventDefault(),n.classList.add("header-search-block__search-tooltip_is-active"),setTimeout((function(){n.classList.add("header-search-block__search-tooltip_active")}),1),setTimeout((function(){n.classList.remove("header-search-block__search-tooltip_active")}),800),setTimeout((function(){n.classList.remove("header-search-block__search-tooltip_is-active")}),801)):t.value=""})),e.addEventListener("mouseover",(function(e){window.screen.width<680&&(i.style.opacity="0")})),e.addEventListener("mouseout",(function(e){i.style.opacity="1"}))})),document.addEventListener("DOMContentLoaded",(function(){var e,t=document.querySelector("#js-gallery-track"),n=new XMLHttpRequest;n.open("GET","../json/gallery/gallery.json",!0),n.responseType="json",n.onreadystatechange=function(){if(4==n.readyState&&200===n.status){var i=n.response;e=i;for(var r=0;r<i.length;r++)t.innerHTML+='<li class="swiper-slide gallery__slider-item">\n                            <div class="gallery__container-img" tabindex="0">\n                                <picture>\n                                    <source type="image/webp" media="(min-width: 768px)" srcset="'.concat(i[r].webp,'">\n                                    <source type="image/webp" media="(max-width: 767px)" srcset="').concat(i[r].webpMobail,'">\n                                    <source media="(max-width: 767px)" srcset="').concat(i[r].jpgMobail,'">\n                                    <img id="gallery-img-').concat(r,'" src="').concat(i[r].jpg,'" alt="').concat(i[r].alt,'" class="gallery__img">\n                                </picture>\n                            </div>\n                        </li>')}404===n.status&&(personBlock.innerHTML="<h3>бла бла бла</h3>")},n.send(null),t.addEventListener("click",(function(t){if("DIV"==t.target.tagName){var n=t.target;n=(n=n.querySelector("img")).getAttribute("id"),i(e,n)}})),t.addEventListener("keyup",(function(t){if("DIV"==t.target.tagName&&"Enter"==t.key){var n=t.target;n=(n=n.querySelector("img")).getAttribute("id"),i(e,n)}}))})),document.addEventListener("DOMContentLoaded",(function(){var e,t=document.querySelectorAll(".catalog__flags-link"),n=document.querySelector("#js-catalog-data-list"),i=document.querySelector("#js-catalog-individual-block"),r=document.querySelector("#js-catalog-full-info");function a(t){n.innerHTML="",i.innerHTML="";var r=t.getAttribute("href");r=r.substring(1);var a="../json/catalog/".concat(r,".json"),l=new XMLHttpRequest;l.open("GET",a,!0),l.responseType="json",l.onreadystatechange=function(){4==l.readyState&&200===l.status&&function(){var t=l.response[0];e=t;var i,a=Object.keys(t);a=a.sort();for(var c=function(e){var i=a[e],s=t[i],o=Object.keys(s),l=Math.random(),c=Math.random(),d=i+"",u=void 0;u=(d=d.split(/\s*-\s*/)).length>1?"С ".concat(d[0]," по ").concat(d[1]," гг."):"С ".concat(d[0]," г."),n.innerHTML+='\n                            <li class="catalog__data-item">\n                                <button\n                                    id="al-'.concat(c,'" \n                                    aria-label="показать/скрыть дату" \n                                    aria-controls="ac-').concat(l,'" \n                                    aria-expanded="false" \n                                    type="button" \n                                    class="catalog__data-btn"\n                                    value="').concat(i,'">\n                                        ').concat(u,'\n                                </button>\n\n                                <ul\n                                    id="ac-').concat(l,'" \n                                    aria-labelledby="al-').concat(c,'" \n                                    class="catalog__data-list-link"\n                                    >\n                                </ul>\n                            </li>\n                        ');for(var p=function(t){var n=o[t],l=s[n];Object.keys(l);document.querySelectorAll(".catalog__data-item").forEach((function(s){var l=s.querySelector(".catalog__data-btn").value,c=s.querySelector(".catalog__data-list-link");l==i&&(c.innerHTML+='\n                                            <li class="catalog__data-item-link">\n                                                <a href="'.concat(r+"/"+a[e]+"/"+o[t],'" class="catalog__data-link">\n                                                    ').concat(n,"\n                                                </a>\n                                            </li>\n                                        "))}))},h=0;h<o.length;h++)p(h)},d=0;d<a.length;d++)c(d);(n.querySelectorAll(".catalog__data-link").forEach((function(e){i=!e.classList.contains("catalog__data-list-link_is-active")})),i)&&s(n.querySelector(".catalog__data-link"));n.querySelectorAll(".catalog__data-btn").forEach((function(e){e.addEventListener("click",(function(){o(e)}))}))}(),404===l.status&&(i.innerHTML="<h3>бла бла бла</h3>")},l.send(null)}function s(t){var n=t.parentElement.parentElement.parentElement.querySelector(".catalog__data-btn"),r=n.parentElement,a=t.parentElement.parentElement,s=t.getAttribute("href");s=s.split("/"),t.classList.add("catalog__data-link_is-active"),r.classList.add("catalog__data-item_link-is-active"),r.querySelector(".catalog__data-list-link").classList.add("catalog__data-list-link_link-is-active"),r.classList.add("catalog__data-item_is-active"),n.setAttribute("aria-expanded","true"),n.classList.add("catalog__data-btn_is-active"),a.classList.add("catalog__data-list-link_is-active");var o=s[1],l=s[2],c=e[o][l],d=c.image,u=c.name,p=c.date,h=c.description;i.innerHTML='\n                <picture>\n                    <source type="image/webp" srcset="'.concat(d,'.webp">\n                    <img src="').concat(d,'.jpg" alt="').concat(u,'" class="catalog__individual-img">\n                </picture>\n\n                <h3 class="catalog__individual-title">').concat(u,'</h3>\n    \n                <time class="catalog__individual-data">').concat(p,'</time>\n\n                <p class="catalog__individual-subtitle">').concat(h,"</p>\n            ")}function o(e){var t=n.querySelectorAll(".catalog__data-btn"),i=e.parentElement,r=e.getAttribute("aria-expanded");t.forEach((function(e){for(var t,n,i=e.parentElement.querySelector(".catalog__data-list-link").children,r=0;r<i.length;r++){var a=i[r];if(a=a.querySelector(".catalog__data-link"),e.parentElement.classList.contains("catalog__data-item_is-active")&&(n=!0),a.classList.contains("catalog__data-link_is-active")){t=!1;break}t=!0}t&&n&&(e.parentElement.querySelector(".catalog__data-list-link").classList.remove("catalog__data-list-link_is-active"),e.parentElement.querySelector(".catalog__data-list-link").classList.add("catalog__data-list-link_is-off"),setTimeout((function(){e.parentElement.querySelector(".catalog__data-list-link").classList.remove("catalog__data-list-link_is-off")}),500),e.setAttribute("aria-expanded","false"),e.classList.remove("catalog__data-btn_is-active"),e.parentElement.classList.remove("catalog__data-item_is-active"),e.parentElement.classList.add("catalog__data-item_is-off"))}));for(var a,s=i.querySelector(".catalog__data-list-link").children,o=0;o<s.length;o++){if(s[o].querySelector(".catalog__data-link").classList.contains("catalog__data-link_is-active")){a=!1;break}a=!0}"true"==r&&a?(i.querySelector(".catalog__data-list-link").classList.remove("catalog__data-list-link_is-active"),i.querySelector(".catalog__data-list-link").classList.add("catalog__data-list-link_is-off"),setTimeout((function(){i.querySelector(".catalog__data-list-link").classList.remove("catalog__data-list-link_is-off")}),500),e.setAttribute("aria-expanded","false"),e.classList.remove("catalog__data-btn_is-active"),i.classList.remove("catalog__data-item_is-active"),i.classList.add("catalog__data-item_is-off")):(e.setAttribute("aria-expanded","true"),e.classList.add("catalog__data-btn_is-active"),i.querySelector(".catalog__data-list-link").classList.add("catalog__data-list-link_is-active"),i.querySelector(".catalog__data-list-link").classList.remove("catalog__data-list-link_is-off"),i.classList.add("catalog__data-item_is-active"),i.classList.remove("catalog__data-item_is-off"))}t.forEach((function(e){var n=e.getAttribute("href");n=n.substring(1);var i="img/svg/flags/".concat(n,".svg");e.style.backgroundImage="url('".concat(i,"')"),e.addEventListener("click",(function(n){n.preventDefault(),r.classList.remove("catalog__person-block_is-leafing"),setTimeout((function(){r.classList.add("catalog__person-block_is-leafing")}),1),setTimeout((function(){t.forEach((function(e){e.classList.remove("catalog__flags-link_is-active")})),e.classList.add("catalog__flags-link_is-active"),a(e)}),501)})),e.classList.contains("catalog__flags-link_is-active")&&a(e)})),n.addEventListener("click",(function(e){if("A"===e.target.tagName){n.querySelectorAll(".catalog__data-link").forEach((function(e){e.classList.remove("catalog__data-link_is-active"),e.parentElement.parentElement.parentElement.classList.remove("catalog__data-item_link-is-active"),e.parentElement.parentElement.classList.remove("catalog__data-list-link_link-is-active")}));var t=e.target,i=t.parentElement.parentElement.parentElement.querySelector(".catalog__data-btn");e.preventDefault(),s(t),o(i)}}))})),document.addEventListener("DOMContentLoaded",(function(){var e,t=document.querySelector("#js-events__list"),n=document.querySelector("#js-all-events-btn");function i(){var t=document.body.clientWidth;t>1023&&(e=7),t>767&&t<1024&&(e=5),t<768&&(e=6)}function r(){document.querySelectorAll(".events__item-container").forEach((function(t){var n=t.querySelector(".events__item-subtitle"),i=t.querySelector(".events__item-btn"),r=n.style.webkitLineClamp;if(document.body.clientWidth>=1400)i.textContent="Подробнее",i.classList.add("events__item-btn_disable");else{n.style.webkitLineClamp="inherit";var a=n.clientHeight,s=window.getComputedStyle(n).lineHeight;n.style.webkitLineClamp=r;var o=a/(s=s.replace(/[a-zа-яё]/gi,""));o<=e&&(i.textContent="Подробнее",i.classList.add("events__item-btn_disable")),o>e&&i.classList.remove("events__item-btn_disable")}}))}function a(e){t.innerHTML="";var i=new XMLHttpRequest;i.open("GET","../json/events/evens-item.json",!0),i.responseType="json",i.onreadystatechange=function(){if(4==i.readyState&&200===i.status){var a,s=i.response,o=document.body.clientWidth;"false"==e?(n.setAttribute("aria-expanded","true"),n.textContent="скрыть все события",a=s.length):(n.setAttribute("aria-expanded","false"),n.textContent="все события",document.location.href="#events",o>1023&&(a=3),o>767&&o<1024&&(a=2),o<768&&(a=s.length));for(var l=0;l<a;l++)t.innerHTML+='\n                            <li class="swiper-slide events__item">\n                                <figure class="events__slide-figure">\n                                    <picture>\n                                        <source type="image/webp" srcset="'.concat(s[l].webp,'">\n                                        <img src="').concat(s[l].img,'" alt="картинка 1" class="events__item-img">\n                                    </picture>\n\n                                    <figcaption class="events__slide-figcaption">\n                                        <span class="events__item-site">\n                                            ').concat(s[l].site,'\n                                        </span>\n\n                                        <time class="events__item-time" datetime="').concat(s[l].data,'">\n                                            ').concat(s[l].data,'\n                                        </time>\n                                    </figcaption>\n                                </figure>\n\n                                <div class="events__item-container">                              \n                                    <h3 class="events__item-title">\n                                        ').concat(s[l].title,'\n                                    </h3>\n\n                                    <div class="events__item-contianer-subtitle">\n                                        <p class="events__item-subtitle">\n                                            ').concat(s[l].subtitle,'\n                                        </p>\n                                    </div>\n\n                                    <button class="events__item-btn">\n                                        ').concat(s[l].btn,"\n                                    </button>\n                                </div>\n                            </li>\n                        ");r()}404===i.status&&(personBlock.innerHTML="<h3>бла бла бла</h3>")},i.send(null)}n.addEventListener("click",(function(e){a(e.target.getAttribute("aria-expanded"))})),t.addEventListener("click",(function(t){var n=document.body.clientWidth;if(t.target.classList.contains("events__item-btn")&&n<1400){var i=t.target,r=i.parentElement.querySelector(".events__item-subtitle"),a="'".concat(e,"'");"none"==window.getComputedStyle(r).webkitLineClamp?(r.style.webkitLineClamp=a,i.textContent="Подробнее"):(r.style.webkitLineClamp="inherit",i.textContent="Скрыть")}})),window.addEventListener("resize",(function(e){i(),r(),a(),document.location.reload()})),i(),a()})),document.addEventListener("DOMContentLoaded",(function(){var e=document.querySelector("#js-editions-title-check"),t=document.querySelector("#js-editions-container-list-check"),n=document.querySelector("#js-editions-list-check"),i=document.querySelectorAll(".editions__price-input");function r(){window.screen.width<768?(e.setAttribute("role","button"),e.setAttribute("aria-expanded","false"),e.setAttribute("aria-label","Показать категории"),e.setAttribute("type","button"),e.setAttribute("aria-controls","js-editions-list-check"),e.setAttribute("tabindex","0"),n.setAttribute("aria-labelledby","js-editions-title-check")):(e.removeAttribute("role"),e.removeAttribute("aria-expanded"),e.removeAttribute("type"),e.removeAttribute("aria-controls"),e.removeAttribute("aria-label"),e.removeAttribute("tabindex"),n.removeAttribute("aria-labelledby"))}function a(e){if(window.screen.width<768){var t=e.target;"false"==t.getAttribute("aria-expanded")?(t.setAttribute("aria-expanded","true"),t.setAttribute("aria-label","Скрыть категории"),t.classList.add("editions__title-check_active"),n.classList.add("editions__list-check_active")):(t.setAttribute("aria-expanded","false"),t.setAttribute("aria-label","Показать категории"),t.classList.remove("editions__title-check_active"),n.classList.remove("editions__list-check_active"))}}function s(e){var i=e.querySelector("label").textContent.replace(/\s+/g," ").trim(),r=e.querySelector("input"),a=t.querySelectorAll("input"),s=n.querySelectorAll("input"),o=!1;r.setAttribute("name","".concat(i));for(var l=0;l<a.length;l++){if(r.getAttribute("name")==a[l].getAttribute("name")){o=!0;break}o=!1}0==o&&(t.innerHTML+='\n                <li class="editions__clone-item-check">\n                    <label class="editions__label-check">\n                        <input type="checkbox" name="'.concat(i,'" class="editions__inpyt-check">\n                        <span class="editions__span-check"></span>\n                        <span class="editions__span-text">\n                            ').concat(i,'\n                        </span>\n                    </label>\n\n                    <button type="button" class="editions__clone-btn-close"></button>\n                </li>\n            ')),s.forEach((function(e){for(var n=e.checked,i=e.getAttribute("name"),r=t.querySelectorAll("input"),a=0;a<r.length;a++){r[a].getAttribute("name")==i&&(r[a].checked=n)}}))}function o(e){for(var n=e.querySelector("input"),i=n.getAttribute("name"),r=t.querySelectorAll("input"),a=n.checked,s=0;s<r.length;s++){r[s].getAttribute("name")==i&&(r[s].checked=a)}}function l(e){for(var t=e.querySelector("input"),i=t.getAttribute("name"),r=n.querySelectorAll("input"),a=t.checked,s=0;s<r.length;s++){r[s].getAttribute("name")==i&&(r[s].checked=a)}}function c(e){e.value=""}e.addEventListener("click",(function(e){a(e)})),e.addEventListener("keydown",(function(e){"Enter"==e.key&&a(e)})),n.addEventListener("click",(function(e){if(e.target.classList.contains("editions__item-check")){var t=e.target;s(t),o(t)}if(e.target.parentElement.classList.contains("editions__item-check")){var n=e.target.parentElement;s(n),o(n)}if(e.target.parentElement.parentElement.classList.contains("editions__item-check")){var i=e.target.parentElement.parentElement;s(i),o(i)}})),t.addEventListener("click",(function(e){e.target.classList.contains("editions__clone-item-check")&&l(e.target);e.target.parentElement.classList.contains("editions__clone-item-check")&&l(e.target.parentElement);e.target.parentElement.parentElement.classList.contains("editions__clone-item-check")&&l(e.target.parentElement.parentElement);e.target.classList.contains("editions__clone-btn-close")&&function(e){t.removeChild(e)}(e.target.parentElement)})),i.forEach((function(e){e.addEventListener("click",(function(){c(e)})),e.addEventListener("focus",(function(){c(e)})),e.addEventListener("blur",(function(){!function(e){if(""==e.value){var t=e.name;"min"==t&&(e.value=50),"max"==t&&(e.value=25e3)}}(e)}))})),window.onresize=function(){r()},r()})),document.addEventListener("DOMContentLoaded",(function(){var e=document.querySelector("#js-editions-track"),t=document.querySelector("#js-editions-slider"),n=new XMLHttpRequest;n.open("GET","../json/editions/editions.json",!0),n.responseType="json",n.onreadystatechange=function(){if(4==n.readyState&&200===n.status){var i=n.response;i;for(var r=0;r<i.length;r++)e.innerHTML+='<li class="swiper-slide editions__swiper-slid">\n                            <figure class="editions__slide-figure"> \n                                <picture>\n                                    <source type="image/webp" srcset="'.concat(i[r].webp,'">\n                                    <img src="').concat(i[r].jpg,'" alt="').concat(i[r].alt,'" class="editions__slide-img">\n                                </picture>\n                            \n                                <figcaption class="editions__slide-figcaption">\n                                    <span class="editions__slide-disc">\n                                        ').concat(i[r].disc,'\n                                    </span>\n\n                                    <span class="editions__slide-price">\n                                        ').concat(i[r].price,'\n                                    </span>\n\n                                    <span class="editions__slide-disc">\n                                        ').concat(i[r].author,'\n                                    </span>\n                                </figcaption>\n                            </figure>\n\n                            <button class="editions__slide-btn">\n                                Заказать\n                            </button>\n                        </li>')}404===n.status&&(t.innerHTML="<h3>бла бла бла</h3>")},n.send(null)})),document.addEventListener("DOMContentLoaded",(function(){var e=document.querySelector("#js-projects-track"),t=new XMLHttpRequest;t.open("GET","../json/partners/partners.json",!0),t.responseType="json",t.onreadystatechange=function(){if(4==t.readyState&&200===t.status){var n=t.response;n;for(var i=0;i<n.length;i++)e.innerHTML+='<li class="swiper-slide projects__swiper-item">\n                            <a href="#" class="projects__swiper-link">\n                                <picture>\n                                    <source type="image/webp" srcset="'.concat(n[i].partnersWebp,'">\n                                    <img src="').concat(n[i].partners,'" alt="').concat(n[i].alt,'" class="projects__swiper-img">\n                                </picture>\n\n                                <picture>\n                                    <source type="image/webp" srcset="').concat(n[i].partnersColorWebp,'">\n                                    <img src="').concat(n[i].partnersColor,'" alt="').concat(n[i].alt,'" class="projects__swiper-img-active">\n                                </picture>\n                            </a>\n                        </li>')}404===t.status&&(e.innerHTML="<h3>бла бла бла</h3>")},t.send(null)})),document.addEventListener("DOMContentLoaded",(function(){document.querySelectorAll(".projects__discription_icon").forEach((function(e){var t=e.parentElement.querySelector(".projects__discription_tooltip-content");Popper.createPopper(e,t,{placement:"top",modifiers:[{name:"offset",options:{offset:[0,15]}},{name:"arrow",options:{padding:2}}]})}))})),document.addEventListener("DOMContentLoaded",(function(){var e=document.querySelector(".contacts__title"),t=document.querySelector(".contacts__form-subtitle-container"),n=document.querySelector(".contacts__form-block");function i(){window.screen.width>=768?(e.classList.remove("container"),t.classList.remove("container"),n.classList.remove("container")):(e.classList.add("container"),t.classList.add("container"),n.classList.add("container"))}window.onresize=function(){i()},i()})),document.addEventListener("DOMContentLoaded",(function(){ymaps.ready((function(){var e=new ymaps.Map("js-contacts-card-block",{center:[55.75446196,37.60309677],zoom:14,controls:["zoomControl"]}),t=new ymaps.Placemark([55.76008422997253,37.601079499999905],{hintContent:"<strong>Шоурум №4</strong>",balloonContent:"<strong>Шоурум №4</strong> Леонтьевский переулок, дом 5, строение 1"},{iconLayout:"default#image",iconImageHref:"../img/svg/card-metka.svg",iconImageSize:[20,20]});e.geoObjects.add(t)}))})),document.addEventListener("DOMContentLoaded",(function(){function e(){new Swiper("#js-swiper-hero",{loop:!0,autoplay:{delay:5e3},speed:600,observer:!0,observeParents:!0,observeSlideChildren:!0})}function t(){new Swiper("#js-gallery-slider",{navigation:{nextEl:".gallery__swiper-button-next",prevEl:".gallery__swiper-button-prev"},pagination:{el:".gallery__swiper-fraction",type:"fraction"},breakpoints:{0:{slidesPerView:1,slidesPerColumn:1,spaceBetween:0},768:{slidesPerView:2,slidesPerColumn:2,spaceBetween:34},1400:{slidesPerView:3,slidesPerColumn:2,spaceBetween:50}},observer:!0,observeParents:!0,observeSlideChildren:!0})}function n(){var e=window.screen.width;e<768?new Swiper("#js-event-block-swiper",{pagination:{el:".events__swiper-pagination",clickable:!0},effect:"flip",flipEffect:{slideShadows:!0,limitRotation:!0},slidesPerView:1,slidesPerColumn:1,observer:!0,observeParents:!0,observeSlideChildren:!0,autoHight:!0}):null}function i(){var e=window.screen.width;e>=768?new Swiper("#js-editions-slider",{navigation:{nextEl:".editions__swiper-button-next",prevEl:".editions__swiper-button-prev"},pagination:{el:".editions__swiper-fraction",type:"fraction"},breakpoints:{768:{slidesPerView:2,spaceBetween:34},1024:{slidesPerView:2,spaceBetween:49},1400:{slidesPerView:3,spaceBetween:50}},slidesPerColumn:1,observer:!0,observeParents:!0,observeSlideChildren:!0}):null}function r(){new Swiper("#js-projects-slider",{navigation:{nextEl:".projects__swiper-button-next",prevEl:".projects__swiper-button-prev"},breakpoints:{320:{slidesPerView:1},768:{slidesPerView:2,spaceBetween:34},1024:{slidesPerView:2,spaceBetween:50},1400:{slidesPerView:3,spaceBetween:50}},slidesPerColumn:1,observer:!0,observeParents:!0,observeSlideChildren:!0})}window.onresize=function(){e(),t(),n(),i(),r()},e(),t(),n(),i(),r()}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
